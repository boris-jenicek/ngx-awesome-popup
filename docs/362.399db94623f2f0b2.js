"use strict";(self.webpackChunkdemo=self.webpackChunkdemo||[]).push([[362],{5362:(C,s,e)=>{e.r(s),e.d(s,{AdvancedExamplesModule:()=>M});var u=e(9808),c=e(3075),p=e(8087),d=e(7322),g=e(156),o=e(5e3);let m=(()=>{class t{}return t.\u0275fac=function(i){return new(i||t)},t.\u0275mod=o.oAB({type:t}),t.\u0275inj=o.cJS({imports:[[u.ez,d.lN,g.LD,c.UX]]}),t})();var l=e(5031),f=e(8453),r=e(5241),h=e(6998),A=e.n(h),y=e(1879);r.registerLanguage("typescript",A());const Z=[{path:"global-config",component:(()=>{class t{constructor(i){this.webTitleService=i,this.ngxAwesomePopupModuleBasic="// app.module imports:\nNgxAwesomePopupModule.forRoot()",this.ngxAwesomePopupModule="// app.module imports:\nNgxAwesomePopupModule.forRoot({\n    colorList: {\n           primary  : '#ff9e00', // optional\n           secondary: '#989ea5', // optional\n           info     : '#2f8ee5', // optional\n           success  : '#3caea3', // optional\n           warning  : '#ffc107', // optional\n           danger   : '#e46464', // optional\n           light    : '#fbfbfb', // optional\n           dark     : '#343a40', // optional\n           customOne: '#34fa40', // optional\n           customTwo: '#343f40'  // optional (up to custom five)\n          }\n})",this.toastNotificationConfigModuleBasic="// app.module imports:\nToastNotificationConfigModule.forRoot()",this.toastNotificationConfigModule="// app.module imports:\nToastNotificationConfigModule.forRoot({\n   ToastCoreConfig: {\n      toastPosition: ToastPositionEnum.TOP_FULL_WIDTH, // check API documentation ToastPositionEnum\n      progressBar: ToastprogressBarEnum.INCREASE, // check API documentation ToastprogressBarEnum\n      toastUserViewType: toastUserViewTypeEnum.SIMPLE, // check API documentation toastUserViewTypeEnum\n      layoutType: DialogLayoutDisplay.WARNING, // check API documentation DialogLayoutDisplay\n      buttonPosition: 'right', // check API documentation VerticalPosition\n      textPosition: 'right', // check API documentation VerticalPosition\n      ConfirmLabel: 'Confirm', // default confirmation button label\n      DeclineLabel: 'Decline', // default declination button label\n      autoCloseDelay: 3000, // Milliseconds it will be ignored if buttons are included.\n      disableIcon: true, // Disable icon by default\n      allowHtmlMessage: true, // Allow HTML content in message by default\n      // Optional default dispatch object.\n      Dispatch: {\n        Title: 'Global default title.',\n        Message: 'Global default message.'\n      },\n      // openInElementID: 'custom-toast-wrapper-id', // it can be any element as wrapper anywhere in the DOM\n   },\n   GlobalSettings: {\n      allowedNotificationsAtOnce: 4  // The number of toast notifications that can be shown at once.\n   },\n   // custom buttons overrides the buttons set with ConfirmLabel & DeclineLabel\n   Buttons: [\n     new ButtonMaker('Ok', 'ok', ButtonLayoutDisplay.PRIMARY), // check API documentation ButtonLayoutDisplay\n     new ButtonMaker('Cancel', 'cancel', ButtonLayoutDisplay.SECONDARY)\n  ]\n})",this.confirmBoxConfigModuleBasic="// app.module imports:\nConfirmBoxConfigModule.forRoot()",this.confirmBoxConfigModule="// app.module imports:\nConfirmBoxConfigModule.forRoot({\n   ConfirmBoxCoreConfig: {\n      width: '50%', // string value with '%' or 'px' as the suffix\n      height: '50%', // string value with '%' or 'px' as the suffix\n      buttonPosition: 'right', // check API documentation VerticalPosition\n      layoutType: DialogLayoutDisplay.WARNING, // check API documentation DialogLayoutDisplay\n      Dispatch: {\n        Title: 'Global default title.',\n        Message: 'Global default message.'\n      },\n      ConfirmLabel: 'Confirm', // default confirmation button label\n      DeclineLabel: 'Decline', // default declination button label\n      disableIcon: true, // Disable icon by default\n      allowHtmlMessage: true, // Allow HTML content in message by default\n   }\n   // custom buttons overrides the buttons set with ConfirmLabel & DeclineLabel\n   Buttons: [\n     new ButtonMaker('Ok', 'ok', ButtonLayoutDisplay.PRIMARY), // check API documentation ButtonLayoutDisplay\n     new ButtonMaker('Cancel', 'cancel', ButtonLayoutDisplay.SECONDARY)\n  ]\n})",this.dialogConfigModuleBasic="// app.module imports:\nDialogConfigModule.forRoot()",this.dialogConfigModule="// app.module imports:\nDialogConfigModule.forRoot({\n   DialogCoreConfig: {\n      layoutType: DialogLayoutDisplay.WARNING, // check API documentation DialogLayoutDisplay\n      buttonPosition: 'right', // check API documentation VerticalPosition\n      DisplayLoader: true, // display the integrated loader by default\n      // LoaderComponent: TheRealAngularComponent, // it will appear as loader before content shows\n   },\n   Buttons: [\n     new ButtonMaker('Ok', 'ok', ButtonLayoutDisplay.PRIMARY), // check API documentation ButtonLayoutDisplay\n     new ButtonMaker('Cancel', 'cancel', ButtonLayoutDisplay.SECONDARY)\n  ]\n})",i.setTitle("Global config")}ngAfterViewInit(){r.highlightAll()}}return t.\u0275fac=function(i){return new(i||t)(o.Y36(y.Y))},t.\u0275cmp=o.Xpm({type:t,selectors:[["app-global-config"]],decls:57,vars:8,consts:[[1,"container"],[1,"row","m-4"],[1,"px-4","pt-2","mt-2","text-start"],[1,"row","m-0","mb-5"],[1,"typescript",3,"innerHTML"],["routerLink","/documentation/Interface: IGlobalUserConfig"]],template:function(i,a){1&i&&(o.TgZ(0,"div",0),o.TgZ(1,"div",1),o.TgZ(2,"div",2),o.TgZ(3,"div",3),o.TgZ(4,"h3"),o._uU(5,"NgxAwesomePopupModule"),o.qZA(),o.TgZ(6,"p"),o._uU(7," Imported module globally can have own settings which will reflect on the entire application. "),o.qZA(),o.TgZ(8,"h6"),o._uU(9,"Basic example:"),o.qZA(),o.TgZ(10,"pre"),o._UZ(11,"code",4),o.qZA(),o.TgZ(12,"h6"),o._uU(13,"Example with configuration:"),o.qZA(),o.TgZ(14,"p"),o._uU(15,' The "'),o.TgZ(16,"a",5),o._uU(17,"colorList"),o.qZA(),o._uU(18,'" object gives the ability to harmonize the colors of the application with different awesome popup types. The shade of '),o.TgZ(19,"strong"),o._uU(20,'"Primary"'),o.qZA(),o._uU(21," color is used for overlay and primary buttons, we suggest that you match this color with your application dominant color. "),o.qZA(),o.TgZ(22,"pre"),o._UZ(23,"code",4),o.qZA(),o.qZA(),o.TgZ(24,"div",3),o.TgZ(25,"h3"),o._uU(26,"ToastNotificationConfigModule"),o.qZA(),o.TgZ(27,"h6"),o._uU(28,"Basic example:"),o.qZA(),o.TgZ(29,"pre"),o._UZ(30,"code",4),o.qZA(),o.TgZ(31,"h6"),o._uU(32,"Example with configuration:"),o.qZA(),o.TgZ(33,"pre"),o._UZ(34,"code",4),o.qZA(),o.qZA(),o.TgZ(35,"div",3),o.TgZ(36,"h3"),o._uU(37,"ConfirmBoxConfigModule"),o.qZA(),o.TgZ(38,"h6"),o._uU(39,"Basic example:"),o.qZA(),o.TgZ(40,"pre"),o._UZ(41,"code",4),o.qZA(),o.TgZ(42,"h6"),o._uU(43,"Example with configuration:"),o.qZA(),o.TgZ(44,"pre"),o._UZ(45,"code",4),o.qZA(),o.qZA(),o.TgZ(46,"div",3),o.TgZ(47,"h3"),o._uU(48,"DialogConfigModule"),o.qZA(),o.TgZ(49,"h6"),o._uU(50,"Basic example:"),o.qZA(),o.TgZ(51,"pre"),o._UZ(52,"code",4),o.qZA(),o.TgZ(53,"h6"),o._uU(54,"Example with configuration:"),o.qZA(),o.TgZ(55,"pre"),o._UZ(56,"code",4),o.qZA(),o.qZA(),o.qZA(),o.qZA(),o.qZA()),2&i&&(o.xp6(11),o.Q6J("innerHTML",a.ngxAwesomePopupModuleBasic,o.oJD),o.xp6(12),o.Q6J("innerHTML",a.ngxAwesomePopupModule,o.oJD),o.xp6(7),o.Q6J("innerHTML",a.toastNotificationConfigModuleBasic,o.oJD),o.xp6(4),o.Q6J("innerHTML",a.toastNotificationConfigModule,o.oJD),o.xp6(7),o.Q6J("innerHTML",a.confirmBoxConfigModuleBasic,o.oJD),o.xp6(4),o.Q6J("innerHTML",a.confirmBoxConfigModule,o.oJD),o.xp6(7),o.Q6J("innerHTML",a.dialogConfigModuleBasic,o.oJD),o.xp6(4),o.Q6J("innerHTML",a.dialogConfigModule,o.oJD))},directives:[l.yS],styles:[""]}),t})()},{path:"showcase",component:f.k}];let T=(()=>{class t{}return t.\u0275fac=function(i){return new(i||t)},t.\u0275mod=o.oAB({type:t}),t.\u0275inj=o.cJS({imports:[[l.Bz.forChild(Z)],l.Bz]}),t})(),M=(()=>{class t{}return t.\u0275fac=function(i){return new(i||t)},t.\u0275mod=o.oAB({type:t}),t.\u0275inj=o.cJS({imports:[[u.ez,T,c.u5,p.e4,m]]}),t})()}}]);