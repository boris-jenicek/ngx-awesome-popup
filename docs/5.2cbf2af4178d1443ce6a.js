(window.webpackJsonp=window.webpackJsonp||[]).push([[5],{xaJI:function(o,n,t){"use strict";t.r(n),t.d(n,"AdvancedExamplesModule",function(){return f});var e=t("ofXK"),i=t("3Pt+"),a=t("R9Cn"),l=t("ZAI4"),c=t("tyNb"),s=t("TEsR"),r=t("FIf5"),u=t("fXoL"),b=t("VKAB");const p=[{path:"global-config",component:(()=>{class o{constructor(o){this.webTitleService=o,this.ngxAwesomePopupModuleBasic="// app.module imports:\nNgxAwesomePopupModule.forRoot()",this.ngxAwesomePopupModule="// app.module imports:\nNgxAwesomePopupModule.forRoot({\n    ColorList: {\n           Primary  : '#ff9e00', // optional\n           Secondary: '#989ea5', // optional\n           Info     : '#2f8ee5', // optional\n           Success  : '#3caea3', // optional\n           Warning  : '#ffc107', // optional\n           Danger   : '#e46464', // optional\n           Light    : '#fbfbfb', // optional\n           Dark     : '#343a40'  // optional\n          }\n})",this.toastNotificationConfigModuleBasic="// app.module imports:\nToastNotificationConfigModule.forRoot()",this.toastNotificationConfigModule="// app.module imports:\nToastNotificationConfigModule.forRoot({\n   ToastCoreConfig: {\n      ToastPosition: ToastPositionEnum.TOP_FULL_WIDTH, // check API documentation ToastPositionEnum\n      ProgressBar: ToastProgressBarEnum.INCREASE, // check API documentation ToastProgressBarEnum\n      ToastUserViewType: ToastUserViewTypeEnum.SIMPLE, // check API documentation ToastUserViewTypeEnum\n      LayoutType: DialogLayoutDisplay.WARNING, // check API documentation DialogLayoutDisplay\n      ButtonPosition: 'right', // check API documentation VerticalPosition\n      TextPosition: 'right', // check API documentation VerticalPosition\n      ConfirmLabel: 'Confirm', // default confirmation button label\n      DeclineLabel: 'Decline', // default declination button label\n      AutoCloseDelay: 3000, // Milliseconds it will be ignored if buttons are included.\n      DisableIcon: true, // Disable icon by default\n      AllowHTMLMessage: true, // Allow HTML content in message by default\n      // Optional default dispatch object.\n      Dispatch: {\n        Title: 'Global default title.',\n        Message: 'Global default message.'\n      },\n      // OpenInElementID: 'custom-toast-wrapper-id', // it can be any element as wrapper anywhere in the DOM\n   },\n   GlobalSettings: {\n      AllowedNotificationsAtOnce: 4  // The number of toast notifications that can be shown at once.\n   },\n   // custom buttons overrides the buttons set with ConfirmLabel & DeclineLabel\n   Buttons: [\n     new ButtonMaker('Ok', 'ok', ButtonLayoutDisplay.PRIMARY), // check API documentation ButtonLayoutDisplay\n     new ButtonMaker('Cancel', 'cancel', ButtonLayoutDisplay.SECONDARY)\n  ]\n})",this.confirmBoxConfigModuleBasic="// app.module imports:\nConfirmBoxConfigModule.forRoot()",this.confirmBoxConfigModule="// app.module imports:\nConfirmBoxConfigModule.forRoot({\n   ConfirmBoxCoreConfig: {\n      Width: '50%', // string value with '%' or 'px' as the suffix\n      Height: '50%', // string value with '%' or 'px' as the suffix\n      ButtonPosition: 'right', // check API documentation VerticalPosition\n      LayoutType: DialogLayoutDisplay.WARNING, // check API documentation DialogLayoutDisplay\n      Dispatch: {\n        Title: 'Global default title.',\n        Message: 'Global default message.'\n      },\n      ConfirmLabel: 'Confirm', // default confirmation button label\n      DeclineLabel: 'Decline', // default declination button label\n      DisableIcon: true, // Disable icon by default\n      AllowHTMLMessage: true, // Allow HTML content in message by default\n   }\n   // custom buttons overrides the buttons set with ConfirmLabel & DeclineLabel\n   Buttons: [\n     new ButtonMaker('Ok', 'ok', ButtonLayoutDisplay.PRIMARY), // check API documentation ButtonLayoutDisplay\n     new ButtonMaker('Cancel', 'cancel', ButtonLayoutDisplay.SECONDARY)\n  ]\n})",this.dialogConfigModuleBasic="// app.module imports:\nDialogConfigModule.forRoot()",this.dialogConfigModule="// app.module imports:\nDialogConfigModule.forRoot({\n   DialogCoreConfig: {\n      LayoutType: DialogLayoutDisplay.WARNING, // check API documentation DialogLayoutDisplay\n      ButtonPosition: 'right', // check API documentation VerticalPosition\n      DisplayLoader: true, // display the integrated loader by default\n      // LoaderComponent: TheRealAngularComponent, // it will appear as loader before content shows\n   },\n   Buttons: [\n     new ButtonMaker('Ok', 'ok', ButtonLayoutDisplay.PRIMARY), // check API documentation ButtonLayoutDisplay\n     new ButtonMaker('Cancel', 'cancel', ButtonLayoutDisplay.SECONDARY)\n  ]\n})",o.setTitle("Global config")}ngAfterViewInit(){r.highlightAll()}}return o.\u0275fac=function(n){return new(n||o)(u.Ob(b.a))},o.\u0275cmp=u.Ib({type:o,selectors:[["app-global-config"]],decls:57,vars:8,consts:[[1,"container"],[1,"row","m-4"],[1,"px-4","pt-2","mt-2","text-start"],[1,"row","m-0","mb-5"],[1,"language-typescript",3,"innerHTML"],["routerLink","/documentation/Interface: IGlobalUserConfig"]],template:function(o,n){1&o&&(u.Ub(0,"div",0),u.Ub(1,"div",1),u.Ub(2,"div",2),u.Ub(3,"div",3),u.Ub(4,"h3"),u.Ec(5,"NgxAwesomePopupModule"),u.Tb(),u.Ub(6,"p"),u.Ec(7," Imported module globally can have own settings which will reflect on the entire application. "),u.Tb(),u.Ub(8,"h6"),u.Ec(9,"Basic example:"),u.Tb(),u.Ub(10,"pre"),u.Pb(11,"code",4),u.Tb(),u.Ub(12,"h6"),u.Ec(13,"Example with configuration:"),u.Tb(),u.Ub(14,"p"),u.Ec(15,' The "'),u.Ub(16,"a",5),u.Ec(17,"ColorList"),u.Tb(),u.Ec(18,'" object gives the ability to harmonize the colors of the application with different awesome popup types. The shade of '),u.Ub(19,"strong"),u.Ec(20,'"Primary"'),u.Tb(),u.Ec(21," color is used for overlay and primary buttons, we suggest that you match this color with your application dominant color. "),u.Tb(),u.Ub(22,"pre"),u.Pb(23,"code",4),u.Tb(),u.Tb(),u.Ub(24,"div",3),u.Ub(25,"h3"),u.Ec(26,"ToastNotificationConfigModule"),u.Tb(),u.Ub(27,"h6"),u.Ec(28,"Basic example:"),u.Tb(),u.Ub(29,"pre"),u.Pb(30,"code",4),u.Tb(),u.Ub(31,"h6"),u.Ec(32,"Example with configuration:"),u.Tb(),u.Ub(33,"pre"),u.Pb(34,"code",4),u.Tb(),u.Tb(),u.Ub(35,"div",3),u.Ub(36,"h3"),u.Ec(37,"ConfirmBoxConfigModule"),u.Tb(),u.Ub(38,"h6"),u.Ec(39,"Basic example:"),u.Tb(),u.Ub(40,"pre"),u.Pb(41,"code",4),u.Tb(),u.Ub(42,"h6"),u.Ec(43,"Example with configuration:"),u.Tb(),u.Ub(44,"pre"),u.Pb(45,"code",4),u.Tb(),u.Tb(),u.Ub(46,"div",3),u.Ub(47,"h3"),u.Ec(48,"DialogConfigModule"),u.Tb(),u.Ub(49,"h6"),u.Ec(50,"Basic example:"),u.Tb(),u.Ub(51,"pre"),u.Pb(52,"code",4),u.Tb(),u.Ub(53,"h6"),u.Ec(54,"Example with configuration:"),u.Tb(),u.Ub(55,"pre"),u.Pb(56,"code",4),u.Tb(),u.Tb(),u.Tb(),u.Tb(),u.Tb()),2&o&&(u.Cb(11),u.jc("innerHTML",n.ngxAwesomePopupModuleBasic,u.wc),u.Cb(12),u.jc("innerHTML",n.ngxAwesomePopupModule,u.wc),u.Cb(7),u.jc("innerHTML",n.toastNotificationConfigModuleBasic,u.wc),u.Cb(4),u.jc("innerHTML",n.toastNotificationConfigModule,u.wc),u.Cb(7),u.jc("innerHTML",n.confirmBoxConfigModuleBasic,u.wc),u.Cb(4),u.jc("innerHTML",n.confirmBoxConfigModule,u.wc),u.Cb(7),u.jc("innerHTML",n.dialogConfigModuleBasic,u.wc),u.Cb(4),u.jc("innerHTML",n.dialogConfigModule,u.wc))},directives:[c.f],styles:[""]}),o})()},{path:"showcase",component:s.a}];let d=(()=>{class o{}return o.\u0275mod=u.Mb({type:o}),o.\u0275inj=u.Lb({factory:function(n){return new(n||o)},imports:[[c.g.forChild(p)],c.g]}),o})(),f=(()=>{class o{}return o.\u0275mod=u.Mb({type:o}),o.\u0275inj=u.Lb({factory:function(n){return new(n||o)},imports:[[e.b,d,i.g,a.b,l.a]]}),o})()}}]);