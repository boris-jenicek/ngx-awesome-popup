{"version":3,"file":"costlydeveloper-ngx-awesome-popup.js","sources":["../../ngx-awesome-popup/locator.service.ts","../../ngx-awesome-popup/core/enums.ts","../../ngx-awesome-popup/core/global-config.service.ts","../../ngx-awesome-popup/core/global.ts","../../ngx-awesome-popup/types/confirm-box/core/confirm-box-config.service.ts","../../ngx-awesome-popup/core/dialog-injector.ts","../../ngx-awesome-popup/core/animations.ts","../../ngx-awesome-popup/types/confirm-box/confirm-box-wrapper/confirm-box-wrapper.component.ts","../../ngx-awesome-popup/types/confirm-box/core/confirm-box-service.ts","../../ngx-awesome-popup/types/confirm-box/core/model.ts","../../ngx-awesome-popup/default-loader/default-loader.component.ts","../../ngx-awesome-popup/types/dialog/core/dialog-config.service.ts","../../ngx-awesome-popup/core/insertion-loader.directive.ts","../../ngx-awesome-popup/core/insertion.directive.ts","../../ngx-awesome-popup/types/dialog/dialog-wrapper/dialog-wrapper.component.ts","../../ngx-awesome-popup/types/dialog/core/dialog.service.ts","../../ngx-awesome-popup/types/dialog/core/model.ts","../../ngx-awesome-popup/types/toast-notification/core/toast-notification-config.service.ts","../../ngx-awesome-popup/types/toast-notification/core/wrapper-abstraction.ts","../../ngx-awesome-popup/types/toast-notification/toast-notification-simple-wrapper/toast-notification-simple-wrapper.component.ts","../../ngx-awesome-popup/types/toast-notification/toast-notification-wrapper/toast-notification-wrapper.component.ts","../../ngx-awesome-popup/types/toast-notification/core/toast-notification.service.ts","../../ngx-awesome-popup/types/toast-notification/core/model.ts","../../ngx-awesome-popup/ngx-awesome-popup.module.ts","../../public_api.ts","../../costlydeveloper-ngx-awesome-popup.ts"],"sourcesContent":["import {Injector} from '@angular/core'; // @dynamic\n\n// @dynamic\nexport class ServiceLocator {\n  static injector: Injector;\n}\n","export enum DialogLayoutDisplay {\n  NONE = 0,\n  SUCCESS = 1,\n  INFO = 2,\n  WARNING = 3,\n  DANGER = 4,\n}\n\nexport enum ButtonLayoutDisplay {\n  NONE = 0,\n  SUCCESS = 1,\n  INFO = 2,\n  WARNING = 3,\n  DANGER = 4,\n  DARK = 5,\n  LIGHT = 6,\n  PRIMARY = 7,\n  SECONDARY = 8,\n  LINK = 9,\n}\n\nexport enum ColorVariance {\n  SUCCESS = 1,\n  INFO = 2,\n  WARNING = 3,\n  DANGER = 4,\n  DARK = 5,\n  LIGHT = 6,\n  PRIMARY = 7,\n  SECONDARY = 8,\n}\n\nexport type VerticalPosition = \"left\" | \"center\" | \"right\";\n","import { Inject, Injectable } from \"@angular/core\";\nimport { ColorVariance } from \"./enums\";\nimport { GlobalClass, GlobalInterface } from \"./global\";\nimport IColorProvider = GlobalInterface.IColorProvider;\n\n@Injectable({\n  providedIn: \"root\",\n})\nexport class GlobalConfigService {\n  productionGlobalConfig: GlobalInterface.IGlobalConfig = new GlobalClass.GlobalConfig();\n  private authorGlobalConfig: GlobalInterface.IGlobalConfig = new GlobalClass.GlobalConfig();\n  private userGeneratedConfig: GlobalInterface.IGlobalUserConfig;\n\n  constructor(\n    @Inject(\"globalConfig\")\n    private userGlobalConfig: GlobalInterface.IGlobalUserConfig\n  ) {\n    this.userGeneratedConfig = new GlobalClass.GlobalUserConfig(\n      userGlobalConfig\n    );\n\n    // region *** author global config values (if there is no user input) ***\n    this.authorGlobalConfig.DisplayColor.Primary = null; // new GlobalClass.ColorProvider('#ff9e00');\n    this.authorGlobalConfig.DisplayColor.Secondary = null; // new GlobalClass.ColorProvider('#989ea5');\n    this.authorGlobalConfig.DisplayColor.Success = null; // new GlobalClass.ColorProvider('#3caea3');\n    this.authorGlobalConfig.DisplayColor.Info = null; // new GlobalClass.ColorProvider('#2f8ee5');\n    this.authorGlobalConfig.DisplayColor.Warning = null; // new GlobalClass.ColorProvider('#ffc107');\n    this.authorGlobalConfig.DisplayColor.Danger = null; // new GlobalClass.ColorProvider('#e46464');\n    this.authorGlobalConfig.DisplayColor.Light = null; // new GlobalClass.ColorProvider('#f8f9fa');\n    this.authorGlobalConfig.DisplayColor.Dark = null; // new GlobalClass.ColorProvider('#343a40');\n    // endregion\n\n    this.productionGlobalConfig.DisplayColor = this.authorGlobalConfig.DisplayColor;\n\n    // region *** global userConfig (user input app-module) ***\n    this.setUserColors(this.userGeneratedConfig.ColorList);\n\n    // endregion\n\n    this.setNodeStyles(this.productionGlobalConfig.DisplayColor);\n  }\n\n  resetStyles(): void {\n    this.setUserColors(this.userGeneratedConfig.ColorList);\n    this.setNodeStyles(this.productionGlobalConfig.DisplayColor, true);\n  }\n\n  setNodeStyles(\n    _ProductionColorTypes: GlobalInterface.IColorObject,\n    _Reset: boolean = false\n  ) {\n    if (_Reset) {\n      let evolveDialogStyleNode = document.getElementById(\n        \"ngx-awesome-popup-glob-styles\"\n      ) as HTMLStyleElement;\n      if (evolveDialogStyleNode) {\n        evolveDialogStyleNode.remove();\n      }\n    }\n    this.setToastStyles();\n\n    Object.keys(_ProductionColorTypes).forEach((key) => {\n      if (_ProductionColorTypes[key]) {\n        this.setButtonStyling(key, _ProductionColorTypes[key]);\n        this.setIconStyling(key, _ProductionColorTypes[key]);\n        this.setToastStyling(key, _ProductionColorTypes[key]);\n        this.setDialogFrame(key, _ProductionColorTypes[key]);\n\n        if (ColorVariance[key.toUpperCase()] === ColorVariance.PRIMARY) {\n          this.getSheet(\"ngx-awesome-popup-styles\").addRule(\n            \".ngx-awesome-popup-overlay\",\n            `background:  ${_ProductionColorTypes[key].TransparentDarkenVariance}!important;`\n          );\n        }\n      }\n    });\n  }\n\n  public setUserColors(_UserColorTypes: GlobalInterface.IColorTypes): void {\n    if (typeof _UserColorTypes !== \"object\") {\n      return;\n    }\n\n    const userKeys = Object.keys(_UserColorTypes);\n    const productionObjectKeys = Object.keys(\n      this.productionGlobalConfig.DisplayColor\n    );\n\n    userKeys.forEach((key) => {\n      if (productionObjectKeys.find((tKey) => tKey === key)) {\n        if (_UserColorTypes[key]) {\n          const baseColorProvider = new GlobalClass.ColorProvider(\n            _UserColorTypes[key]\n          );\n          if (baseColorProvider.Base) {\n            this.productionGlobalConfig.DisplayColor[key] = baseColorProvider;\n          }\n        } else {\n          this.productionGlobalConfig.DisplayColor[key] = null;\n        }\n      }\n    });\n  }\n\n  public getSheet(_StyleID: string) {\n    // Create the <style> tag\n    let evolveDialogStyleNode = document.getElementById(\n      _StyleID\n    ) as HTMLStyleElement;\n    if (!evolveDialogStyleNode) {\n      const headNode =\n        document.head || document.getElementsByTagName(\"head\")[0];\n      if (!headNode) {\n        return;\n      }\n\n      evolveDialogStyleNode = document.createElement(\"style\");\n      evolveDialogStyleNode.setAttribute(\"id\", _StyleID);\n      evolveDialogStyleNode.appendChild(document.createTextNode(\"\"));\n      headNode.appendChild(evolveDialogStyleNode);\n    }\n\n    return evolveDialogStyleNode ? evolveDialogStyleNode.sheet : null;\n  }\n\n  private setToastStyling(_Key: string, _ColorProvider: IColorProvider) {\n    const standardToast = `.toast-wrapper.standard-toast .evolve-toast.${_Key.toLowerCase()}-dialog`;\n    const standardToastStyle = `\n        background:  ${_ColorProvider.BrightShade}!important;\n        border-color: ${_ColorProvider.Brighten}!important;\n        `;\n\n    const simpleToast = `.toast-wrapper.simple-toast .evolve-toast.${_Key.toLowerCase()}-dialog`;\n    const simpleToastStyle = `\n        background:  ${_ColorProvider.BrightWarmly}!important;\n        color:  ${_ColorProvider.Darken}!important;\n        `;\n\n    const baseProgress = `.toast-wrapper .evolve-toast.${_Key.toLowerCase()}-dialog .progress-bar`;\n    const baseProgressStyle = `\n        background-color:  ${_ColorProvider.Brighten}!important;\n        `;\n\n    this.getSheet(\"ngx-awesome-popup-glob-styles\").addRule(\n      baseProgress,\n      baseProgressStyle\n    );\n    this.getSheet(\"ngx-awesome-popup-glob-styles\").addRule(\n      standardToast,\n      standardToastStyle\n    );\n    this.getSheet(\"ngx-awesome-popup-glob-styles\").addRule(\n      simpleToast,\n      simpleToastStyle\n    );\n  }\n\n  private setButtonStyling(_Key: string, _ColorProvider: IColorProvider) {\n    const baseButtonClass = `.ed-btn-${_Key.toLowerCase()}`;\n    const baseStyle = `\n        color: ${_ColorProvider.ContrastColor}!important;\n        background:  ${_ColorProvider.Base}!important;\n        border-color: ${_ColorProvider.BrightenForShade}!important;\n        `;\n\n    const hoverButtonClass = `.ed-btn-${_Key.toLowerCase()}:hover`;\n    const hoverStyle = `\n        background:  ${\n          _ColorProvider.IsBaseBright\n            ? _ColorProvider.DarkenForShade\n            : _ColorProvider.BrightenForShade\n        }!important;\n        border-color: ${\n          _ColorProvider.IsBaseBright\n            ? _ColorProvider.Darken\n            : _ColorProvider.Brighten\n        }!important;\n        `;\n\n    const focusActiveButtonClass = `.ed-btn-${_Key.toLowerCase()}:focus, .ed-btn-${_Key.toLowerCase()}:active`;\n    const focusActiveStyle = `\n        box-shadow: 0 0 1px 2px ${\n          _ColorProvider.IsBaseBright\n            ? _ColorProvider.Darken\n            : _ColorProvider.Brighten\n        }!important;\n        `;\n\n    this.getSheet(\"ngx-awesome-popup-glob-styles\").addRule(\n      baseButtonClass,\n      baseStyle\n    );\n    this.getSheet(\"ngx-awesome-popup-glob-styles\").addRule(\n      hoverButtonClass,\n      hoverStyle\n    );\n    this.getSheet(\"ngx-awesome-popup-glob-styles\").addRule(\n      focusActiveButtonClass,\n      focusActiveStyle\n    );\n  }\n\n  private setIconStyling(_Key: string, _ColorProvider: IColorProvider) {\n    const baseIconClass = `.ap-icon-${_Key.toLowerCase()}`;\n    const baseStyle = `color: ${_ColorProvider.BrightenForShade}!important;`;\n\n    this.getSheet(\"ngx-awesome-popup-glob-styles\").addRule(\n      baseIconClass,\n      baseStyle\n    );\n  }\n\n  private setDialogFrame(_Key: string, _ColorProvider: IColorProvider) {\n    const baseDialogFrameClass = `.ngx-awesome-popup-overlay .${_Key.toLowerCase()}-dialog`;\n    const baseStyle = `\n        border-color: ${_ColorProvider.Brighten}!important;\n        `;\n\n    this.getSheet(\"ngx-awesome-popup-glob-styles\").addRule(\n      baseDialogFrameClass,\n      baseStyle\n    );\n  }\n\n  private setToastStyles() {\n    this.getSheet(\"ngx-awesome-popup-styles\").addRule(\n      `.toast-entity`,\n      `all 0.5s ease;`\n    );\n    this.getSheet(\"ngx-awesome-popup-styles\").addRule(\n      `.toast-entity:first-child`,\n      `animation: move 0.7s ease-out;`\n    );\n\n    const isIEOrEdge = /msie\\s|trident\\//i.test(window.navigator.userAgent);\n    if (!isIEOrEdge) {\n      this.getSheet(\"ngx-awesome-popup-styles\").addRule(\n        `@-webkit-keyframes move`,\n        `\n                                        0% {margin-top: -5px; opacity: 0.4;}\n                                        30% {margin-top: -4px; opacity: 0.7;}\n                                        100% {margin-top: 0px; opacity: 1;}\n                                        `\n      );\n      this.getSheet(\"ngx-awesome-popup-styles\").addRule(\n        `@keyframes move`,\n        `\n                                        0% {margin-top: -5px; opacity: 0.4;}\n                                        30% {margin-top: -4px; opacity: 0.7;}\n                                        100% {margin-top: 0px; opacity: 1;}\n                                        `\n      );\n    }\n  }\n}\n","import { ServiceLocator } from \"../locator.service\";\nimport { ButtonLayoutDisplay } from \"./enums\";\nimport { GlobalConfigService } from \"./global-config.service\";\n\nexport namespace GlobalInterface {\n  export interface ISizes {\n    Width?: string;\n    MinWidth?: string;\n    MaxWidth?: string;\n    Height?: string;\n    MinHeight?: string;\n    MaxHeight?: string;\n    FullScreen?: boolean;\n  }\n\n  /**\n   * Each property of {@link ColorList} represent a string which represent a color in hex or rgb/rgba format.\n   * For available color types(properties) check {@link IColorTypes} interface.\n   * Every color is optional, and it will reflect on dialog or button color types and its color contrast or variance.\n   *  * ```typescript\n   * // ColorList object example.\n   * const colorList = {\n   *         ColorList: {\n   *            Primary  : '#ff9e00',\n   *            Secondary: '#989ea5',\n   *            Info     : '#2f8ee5',\n   *            Success  : '#3caea3',\n   *            Warning  : '#ffc107',\n   *            Danger   : '#e46464',\n   *            Light    : '#fbfbfb',\n   *            Dark     : '#343a40'\n   *           }\n   *        }\n   * ```\n   */\n  export interface IGlobalUserConfig {\n    ColorList?: GlobalInterface.IColorTypes;\n  }\n\n  export interface IGlobalConfig {\n    DisplayColor?: GlobalInterface.IColorObject;\n  }\n\n  export interface IColorTypes {\n    Primary?: string;\n    Secondary?: string;\n    Success?: string;\n    Info?: string;\n    Warning?: string;\n    Danger?: string;\n    Light?: string;\n    Dark?: string;\n  }\n\n  export interface IPrivateResponse {\n    setBelonging(_DialogBelonging): void;\n  }\n\n  /**\n   * Interface for custom button.\n   *\n   * Example:\n   * ```typescript\n   * // Custom button object.\n   * const button = {\n   *        ID         : 'confirm_btn',\n   *        Label:     : 'Confirm'\n   *        LayoutType : ButtonLayoutDisplay.SUCCESS\n   *  }\n   * // Or instantiated with ButtonMaker class\n   * const button2 = new ButtonMaker('Confirm', 'confirm_btn', ButtonLayoutDisplay.SUCCESS)\n   * ```\n   * * ButtonLayoutDisplay: {@link ButtonLayoutDisplay}\n   */\n  export interface IButton {\n    Label: string;\n    LayoutType: ButtonLayoutDisplay | null;\n    ID?: string;\n  }\n\n  export interface IColorObject {\n    Primary?: GlobalInterface.IColorProvider;\n    Secondary?: GlobalInterface.IColorProvider;\n    Success?: GlobalInterface.IColorProvider;\n    Info?: GlobalInterface.IColorProvider;\n    Warning?: GlobalInterface.IColorProvider;\n    Danger?: GlobalInterface.IColorProvider;\n    Light?: GlobalInterface.IColorProvider;\n    Dark?: GlobalInterface.IColorProvider;\n  }\n\n  export interface IColorProvider {\n    Base: string;\n    Brighten: string;\n    BrightenForShade: string;\n    Darken: string;\n    DarkenForShade: string;\n    ContrastColor: string;\n    BrightShade: string;\n    BrightWarmly: string;\n    TransparentDarkenVariance: string;\n    IsBaseBright: boolean;\n  }\n\n  export interface IDispatch {\n    Title: string;\n    Message: string;\n  }\n}\n\nexport namespace GlobalClass {\n  export class Sizes implements GlobalInterface.ISizes {\n    Width: string = null;\n    MinWidth: string = null;\n    MaxWidth: string = null;\n    Height: string = null;\n    MinHeight: string = null;\n    MaxHeight: string = null;\n    FullScreen: boolean = null;\n  }\n\n  export class Dispatch {\n    Title: string = null;\n    Message: string = null;\n  }\n\n  export class ButtonMaker implements GlobalInterface.IButton {\n    constructor(\n      public Label: string,\n      public ID: string,\n      public LayoutType: ButtonLayoutDisplay = ButtonLayoutDisplay.PRIMARY\n    ) {}\n  }\n\n  export class GlobalUserConfig implements GlobalInterface.IGlobalUserConfig {\n    ColorList: GlobalInterface.IColorTypes = new GlobalClass.ColorTypes();\n\n    constructor(_GlobalUserConfig: GlobalInterface.IGlobalUserConfig) {\n      if (_GlobalUserConfig) {\n        const dataControl = new GlobalClass.DataControl();\n        dataControl.copyValuesFrom(_GlobalUserConfig, this);\n        const colorList = new GlobalClass.ColorTypes();\n        this.ColorList = dataControl.copyValuesFrom(this.ColorList, colorList);\n      }\n    }\n  }\n\n  export class ColorTypes implements GlobalInterface.IColorTypes {\n    Primary: string = null;\n    Secondary: string = null;\n    Success: string = null;\n    Info: string = null;\n    Warning: string = null;\n    Danger: string = null;\n    Light: string = null;\n    Dark: string = null;\n  }\n\n  export class ResetGlobalConfig {\n    constructor(globalConfig?: GlobalInterface.IGlobalUserConfig) {\n      const globalConfigService: GlobalConfigService = ServiceLocator.injector.get(\n        GlobalConfigService\n      );\n      if (globalConfig) {\n        globalConfigService.setUserColors(globalConfig.ColorList);\n        globalConfigService.setNodeStyles(\n          globalConfigService.productionGlobalConfig.DisplayColor,\n          true\n        );\n      } else {\n        globalConfigService.resetStyles();\n      }\n    }\n  }\n\n  export class GlobalConfig implements GlobalInterface.IGlobalConfig {\n    DisplayColor: GlobalInterface.IColorObject = new GlobalClass.DisplayColor();\n  }\n\n  export class DisplayColor implements GlobalInterface.IColorObject {\n    Primary: ColorProvider = null;\n    Secondary: ColorProvider = null;\n    Success: ColorProvider = null;\n    Info: ColorProvider = null;\n    Warning: ColorProvider = null;\n    Danger: ColorProvider = null;\n    Light: ColorProvider = null;\n    Dark: ColorProvider = null;\n  }\n\n  export class ColorProvider {\n    Base: string = null;\n    Brighten: string = null;\n    BrightenForShade: string = null;\n    Darken: string = null;\n    DarkenForShade: string = null;\n    ContrastColor: string = null;\n    TransparentDarkenVariance: string = null;\n    BrightShade: string = null;\n    BrightWarmly: string = null;\n    IsBaseBright: boolean = null;\n\n    constructor(_Color: string) {\n      if ((this.Base = this.isColor(_Color))) {\n        this.Brighten = this.brightness(this.Base, \"brighten\", 25);\n        this.BrightenForShade = this.brightness(this.Base, \"brighten\", 10);\n        this.Darken = this.brightness(this.Base, \"darken\", 20);\n        this.DarkenForShade = this.brightness(this.Base, \"darken\", 10);\n        const luminance = Math.floor(this.luminance(this.Base) * 100);\n        const darken =\n          luminance > 50\n            ? 5\n            : luminance > 40\n            ? 10\n            : luminance > 20\n            ? 15\n            : luminance;\n        const brighten =\n          luminance > 55\n            ? 65\n            : luminance > 45\n            ? 60\n            : luminance > 20\n            ? 55\n            : luminance > 10\n            ? 45\n            : 80;\n        this.BrightShade = this.brightness(\n          this.brightness(this.Base, \"darken\", darken),\n          \"brighten\",\n          brighten\n        );\n        this.BrightWarmly = this.brightness(\n          this.brightness(this.saturate(this.Base), \"darken\", darken - 10),\n          \"brighten\",\n          brighten - 5\n        );\n        this.TransparentDarkenVariance = this.brightness(\n          this.transparentize(this.Base, 80),\n          \"darken\",\n          40\n        );\n        if (this.isBright(this.Base)) {\n          this.ContrastColor = \"rgba(58,65,71,0.5)\";\n          this.IsBaseBright = true;\n        } else {\n          this.ContrastColor = \"rgb(255,255,255, 0.7)\";\n          this.IsBaseBright = false;\n        }\n\n        /*\t       console.log('%c BrightShade ', `background: ${this.BrightShade}; color: ${this.ContrastColor}`, this.BrightShade);\n\t\t\t\t\t       console.log('%c BrightWarmly ', `background: ${this.BrightWarmly}; color: ${this.ContrastColor}`, this.BrightWarmly);\n\t\t\t\t\t\t   console.log('%c Brighten ', `background: ${this.Brighten}; color: ${this.ContrastColor}`, this.Brighten);\n\t\t\t\t\t\t   console.log('%c BrightenForShade ', `background: ${this.BrightenForShade}; color: ${this.ContrastColor}`, this.BrightenForShade);\n\t\t\t\t\t       console.log('%c Base ', `background: ${this.Base}; color: ${this.ContrastColor}`, this.Base);\n\t\t\t\t\t       console.log('%c DarkenForShade ', `background: ${this.DarkenForShade}; color: ${this.ContrastColor}`, this.DarkenForShade);\n\t\t\t\t\t       console.log('%c Darken ', `background: ${this.Darken}; color: ${this.ContrastColor}`, this.Darken);\n\t\t\t\t\t\t   console.log('%c TransparentDarkenVariance ', `background: ${this.TransparentDarkenVariance}; color: ${this.ContrastColor}`, this.TransparentDarkenVariance);\n\t\t\t*/\n      }\n    }\n\n    saturate(_Rgb: string) {\n      const rgbIntArray = this.getRGBArray(_Rgb);\n      const greyVal = this.getLightnessOfRGB(_Rgb) * 55;\n      const [lowest, middle, highest] = this.getLowMidHi(rgbIntArray);\n\n      if (lowest.val === highest.val) {\n        return _Rgb;\n      }\n\n      const saturationRange = Math.round(Math.min(255 - greyVal, greyVal));\n      const maxChange = Math.min(255 - highest.val, lowest.val);\n      const changeAmount = Math.min(saturationRange / 10, maxChange);\n      const middleValueRatio =\n        (greyVal - middle.val) / (greyVal - highest.val) + 0.07;\n\n      const returnArray = [];\n      returnArray[highest.index] = Math.round(highest.val + changeAmount);\n      returnArray[lowest.index] = Math.round(lowest.val - changeAmount);\n      returnArray[middle.index] = Math.round(\n        greyVal + (returnArray[highest.index] - greyVal) * middleValueRatio + 5\n      );\n      return `rgb(${[returnArray].join()})`;\n    }\n\n    public brightness(\n      _Rgb: string,\n      _Action: \"brighten\" | \"darken\",\n      _Percentage: number\n    ): string {\n      const rgbIntArray = this.getRGBArray(_Rgb);\n      const [lowest, middle, highest] = this.getLowMidHi(rgbIntArray);\n\n      if (_Action === \"brighten\" && lowest.val === 255) {\n        return _Rgb;\n      }\n\n      if (_Action === \"darken\" && highest.val === 0) {\n        return _Rgb;\n      }\n\n      const amount = (_Percentage / 100) * 255;\n\n      let returnList = [];\n\n      if (_Action === \"brighten\") {\n        returnList[lowest.index] = Math.round(\n          lowest.val + Math.min(255 - lowest.val, amount)\n        );\n        const increaseFraction =\n          (returnList[lowest.index] - lowest.val) / (255 - lowest.val);\n        returnList[middle.index] =\n          middle.val + (255 - middle.val) * increaseFraction;\n        returnList[highest.index] =\n          highest.val + (255 - highest.val) * increaseFraction;\n      }\n      if (_Action === \"darken\") {\n        returnList[highest.index] = highest.val - Math.min(highest.val, amount);\n        const decreaseFraction =\n          (highest.val - returnList[highest.index]) / highest.val;\n        returnList[middle.index] = middle.val - middle.val * decreaseFraction;\n        returnList[lowest.index] = lowest.val - lowest.val * decreaseFraction;\n      }\n\n      returnList = returnList.map((item) => Math.round(item));\n      if (rgbIntArray.length > 3) {\n        returnList.push(rgbIntArray[3]);\n        return `rgba(${returnList.join()})`;\n      }\n      return `rgb(${returnList.join()})`;\n    }\n\n    getLightnessOfRGB(_Rgb: string) {\n      const rgbIntArray = this.getRGBArray(_Rgb);\n\n      const highest = Math.max(...rgbIntArray);\n      const lowest = Math.min(...rgbIntArray);\n      return (highest + lowest) / 2 / 255;\n    }\n\n    private isBright(_Rgb: string) {\n      return this.contrast(this.luminance(_Rgb));\n    }\n\n    private getLowMidHi(_RgbArray: number[]) {\n      const rgbArrayCopy = _RgbArray.slice();\n      const rgbArrayWithoutAlpha =\n        _RgbArray.length > 3\n          ? rgbArrayCopy.reverse().slice(1).reverse()\n          : _RgbArray;\n      let highest = { val: -1, index: -1 };\n      let lowest = { val: Infinity, index: -1 };\n\n      rgbArrayWithoutAlpha.map((val, index) => {\n        if (val > highest.val) {\n          highest = { val: val, index: index };\n        }\n        if (val < lowest.val) {\n          lowest = { val: val, index: index };\n        }\n      });\n\n      if (lowest.index === highest.index) {\n        lowest.index = highest.index + 1;\n      }\n\n      const middleIndex = 3 - highest.index - lowest.index;\n      let middle = {\n        val: rgbArrayWithoutAlpha[middleIndex],\n        index: middleIndex,\n      };\n      return [lowest, middle, highest];\n    }\n\n    private contrast(_Luminance) {\n      const brightest = Math.max(1.05, _Luminance + 0.05);\n      const darkest = Math.min(1.05, _Luminance + 0.05);\n      const contrast = brightest / darkest;\n      return contrast < 2.7;\n    }\n\n    private isColor(_StrColor) {\n      const CSSDeclaration = new Option().style;\n      CSSDeclaration.color = _StrColor;\n      return !!CSSDeclaration.color ? CSSDeclaration.color : null;\n    }\n\n    private getRGBArray(_Rgb: string): number[] {\n      return _Rgb\n        .replace(/^(rgb|rgba)\\(/, \"\")\n        .replace(/\\)$/, \"\")\n        .replace(/\\s/g, \"\")\n        .split(\",\")\n        .map((x) => +x);\n    }\n\n    private luminance(_Rgb: string) {\n      const rgbIntArray = this.getRGBArray(_Rgb);\n      const W3algorithm = rgbIntArray.map((item) => {\n        item /= 255;\n        return item <= 0.03928\n          ? item / 12.92\n          : Math.pow((item + 0.055) / 1.055, 2.4);\n      });\n      return (\n        W3algorithm[0] * 0.2126 +\n        W3algorithm[1] * 0.7152 +\n        W3algorithm[2] * 0.0722\n      );\n    }\n\n    private transparentize(_Rgb: string, _Percentage: number) {\n      const baseArray = this.Base.replace(/^(rgb|rgba)\\(/, \"\")\n        .replace(/\\)$/, \"\")\n        .replace(/\\s/g, \"\")\n        .split(\",\")\n        .map((x) => +x);\n      if (baseArray.length > 3) {\n        baseArray.pop();\n      }\n      const amount = (100 - _Percentage) / 100;\n      baseArray.push(amount);\n      return `rgb(${baseArray.join()})`;\n    }\n  }\n\n  export class DataControl {\n    /**\n     * @ignore\n     */\n    public copyValuesFrom(_Data: any, _DestinationObject: any): any {\n      if (typeof _Data !== \"object\") {\n        return _DestinationObject;\n      }\n\n      const dataKeys = Object.keys(_Data);\n      const destinationObjectKeys = Object.keys(_DestinationObject);\n\n      dataKeys.forEach((key) => {\n        if (\n          destinationObjectKeys.find(\n            (tKey) => tKey === key || tKey === \"_\" + key\n          )\n        ) {\n          if (key.includes(\"Date\")) {\n            const date = Date.parse(_Data[key]);\n            if (date) {\n              _DestinationObject[key] = new Date(date);\n            } else {\n              if (_Data[key] !== null) {\n                _DestinationObject[key] = _Data[key];\n              }\n            }\n          } else {\n            if (_Data[key] !== null) {\n              _DestinationObject[key] = _Data[key];\n            }\n          }\n        }\n      });\n\n      return _DestinationObject;\n    }\n  }\n\n  export class Timer {\n    TimePassed: number = 0;\n    Timer: any;\n    Progress: number = 0;\n    Remaining: number = 100;\n    Milliseconds: number;\n\n    constructor() {}\n\n    setMilliseconds(_Milliseconds: number) {\n      this.Milliseconds = _Milliseconds;\n    }\n\n    reset(): void {\n      this.TimePassed = 0;\n      this.Progress = 0;\n    }\n\n    pause(): void {\n      this.TimePassed = 0;\n      this.Progress = 0;\n    }\n\n    stop(): void {\n      this.TimePassed = 0;\n      clearInterval(this.Timer);\n    }\n\n    start(): void {\n      this.Timer = setInterval(() => {\n        if (this.TimePassed >= this.Milliseconds) {\n          clearInterval(this.Timer);\n          return;\n        }\n        this.TimePassed += 100;\n        this.Progress = (this.TimePassed * 100) / this.Milliseconds;\n        this.Remaining = 100 - this.Progress;\n      }, 100);\n    }\n  }\n}\n","import { Inject, Injectable } from \"@angular/core\";\nimport { DialogLayoutDisplay } from \"../../../core/enums\";\nimport { GlobalClass } from \"../../../core/global\";\nimport { ConfirmBoxClass, ConfirmBoxInterface } from \"./model\";\n\n@Injectable({\n  providedIn: \"root\",\n})\nexport class ConfirmBoxConfigService {\n  authorConfig: ConfirmBoxInterface.IConfirmBoxUserConfig = new ConfirmBoxClass.Settings();\n  productionConfig: ConfirmBoxInterface.IConfirmBoxUserConfig = new ConfirmBoxClass.Settings();\n\n  constructor(\n    @Inject(\"confirmBoxConfig\")\n    private userConfig: ConfirmBoxInterface.IConfirmBoxUserConfig = {}\n  ) {\n    // region *** confirmBox userConfig (user input app-module) ***\n    const userConfigBase = new ConfirmBoxClass.Settings();\n    const dataControl = new GlobalClass.DataControl();\n    dataControl.copyValuesFrom(\n      userConfig.ConfirmBoxCoreConfig,\n      userConfigBase.ConfirmBoxCoreConfig\n    ); // this will make sure that object has right properties\n    userConfig.ConfirmBoxCoreConfig = userConfigBase.ConfirmBoxCoreConfig;\n    // endregion\n\n    // region *** author default config values (if there is no user input) ***\n    this.authorConfig.ConfirmBoxCoreConfig.Width = \"auto\";\n    this.authorConfig.ConfirmBoxCoreConfig.Height = \"auto\";\n    this.authorConfig.ConfirmBoxCoreConfig.ButtonPosition = \"center\";\n    this.authorConfig.ConfirmBoxCoreConfig.ConfirmLabel = \"Confirm\";\n    this.authorConfig.ConfirmBoxCoreConfig.DeclineLabel = \"Decline\";\n    this.authorConfig.ConfirmBoxCoreConfig.DisableIcon = false;\n    this.authorConfig.ConfirmBoxCoreConfig.AllowHTMLMessage = false;\n    this.authorConfig.ConfirmBoxCoreConfig.LayoutType =\n      DialogLayoutDisplay.NONE;\n\n    // endregion\n\n    // region *** Production setup ***\n    dataControl.copyValuesFrom(\n      this.authorConfig.ConfirmBoxCoreConfig,\n      this.productionConfig.ConfirmBoxCoreConfig\n    );\n    dataControl.copyValuesFrom(\n      userConfig.ConfirmBoxCoreConfig,\n      this.productionConfig.ConfirmBoxCoreConfig\n    );\n    // endregion\n  }\n}\n","import { InjectFlags, InjectionToken, Injector, Type } from \"@angular/core\";\n\nexport class DialogInjector implements Injector {\n  constructor(\n    private ParentInjector: Injector,\n    private AdditionalTokens: WeakMap<any, any>\n  ) {}\n\n  get<T>(\n    token: Type<T> | InjectionToken<T>,\n    notFoundValue?: T,\n    flags?: InjectFlags\n  ): T;\n  get(token: any, notFoundValue?: any): any;\n  get(token: any, notFoundValue?: any, flags?: any): any {\n    const value = this.AdditionalTokens.get(token);\n\n    if (value) {\n      return value;\n    }\n\n    return this.ParentInjector.get<any>(token, notFoundValue);\n  }\n}\n","import {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n} from \"@angular/animations\";\n\nexport function fadeInOut(_OpacityMin = 0, _OpacityMax = 1) {\n  return trigger(\"fadeInOut\", [\n    // ...\n    state(\n      \"open\",\n      style({\n        opacity: _OpacityMax,\n      })\n    ),\n    state(\n      \"closed\",\n      style({\n        opacity: _OpacityMin,\n      })\n    ),\n    transition(\"* => close-fast\", [animate(\"0.1s\")]),\n    transition(\"* => open\", [animate(\"0.2s\")]),\n    transition(\"* => close-slow\", [animate(\"1.3s\")]),\n    transition(\"* => close-instant\", [animate(\"0s\")]),\n  ]);\n}\n","import { AfterViewInit, ChangeDetectorRef, Component } from \"@angular/core\";\nimport { Observable, Observer } from \"rxjs\";\nimport { delay } from \"rxjs/operators\";\nimport { fadeInOut } from \"../../../core/animations\";\nimport { GlobalInterface } from \"../../../core/global\";\nimport { ConfirmBoxClass } from \"../core/model\";\n\n@Component({\n  selector: \"app-confirm-box-wrapper\",\n  templateUrl: \"./confirm-box-wrapper.component.html\",\n  styleUrls: [\"./confirm-box-wrapper.component.scss\"],\n  animations: [fadeInOut(0, 1)],\n})\nexport class ConfirmBoxWrapperComponent implements AfterViewInit {\n  fadeInOutAnimation: string = \"open\";\n\n  constructor(\n    public confirmBoxBelonging: ConfirmBoxClass.ConfirmBoxBelonging,\n    private cd: ChangeDetectorRef\n  ) {}\n\n  ngAfterViewInit(): void {\n    this.setResponse(false);\n    this.cd.detectChanges();\n  }\n\n  setResponse(_IsSuccess: boolean, _ClickedButtonID?: string): void {\n    const response = new ConfirmBoxClass.ConfirmBoxDefaultResponse();\n    if (_ClickedButtonID) {\n      response.ClickedButtonID = _ClickedButtonID;\n    }\n\n    response.setSuccess(_IsSuccess);\n    response.setBelonging(this.confirmBoxBelonging);\n    this.confirmBoxBelonging.EventsController.setDefaultResponse(response);\n  }\n\n  onOverlayClicked(evt: MouseEvent): void {\n    // console.log('onOverlayClicked');\n  }\n\n  onCustomButton(_Button: GlobalInterface.IButton): void {\n    this.confirmBoxBelonging.EventsController.onButtonClick(_Button);\n    this.setResponse(true, _Button.ID);\n    this.confirmBoxBelonging.EventsController.close();\n  }\n\n  onButtonClick(_Type: \"confirm\" | \"decline\") {\n    let buttonID;\n    if (_Type === \"confirm\") {\n      buttonID = this.confirmBoxBelonging.ConfirmBoxCoreConfig.ConfirmLabel.toLowerCase();\n    } else if (_Type === \"decline\") {\n      buttonID = this.confirmBoxBelonging.ConfirmBoxCoreConfig.DeclineLabel.toLowerCase();\n    }\n\n    this.setResponse(_Type === \"confirm\", buttonID);\n\n    this.confirmBoxBelonging.EventsController.close();\n  }\n\n  closeParent$(_ClosingAnimation: string): Observable<any> {\n    this.fadeInOutAnimation = _ClosingAnimation;\n    const timer = _ClosingAnimation === \"close-slow\" ? 1400 : 150;\n\n    return new Observable((observer: Observer<any>) => {\n      observer.next(\"\");\n      observer.complete();\n    }).pipe(delay(timer));\n  }\n}\n","import {\n  ApplicationRef,\n  ComponentFactoryResolver,\n  ComponentRef,\n  EmbeddedViewRef,\n  Injectable,\n  Injector,\n} from \"@angular/core\";\nimport { map } from \"rxjs/operators\";\nimport { DialogInjector } from \"../../../core/dialog-injector\";\nimport { ConfirmBoxWrapperComponent } from \"../confirm-box-wrapper/confirm-box-wrapper.component\";\nimport { ConfirmBoxClass } from \"./model\";\n\n@Injectable({\n  providedIn: \"root\",\n})\nexport class ConfirmBoxService {\n  confirmBoxComponentRefList: ComponentRef<ConfirmBoxWrapperComponent>[] = [];\n\n  constructor(\n    private componentFactoryResolver: ComponentFactoryResolver,\n    private injector: Injector,\n    private appRef: ApplicationRef\n  ) {}\n\n  open(\n    _ConfirmBoxBelonging: ConfirmBoxClass.ConfirmBoxBelonging\n  ): ConfirmBoxClass.ConfirmBoxEventsController {\n    const dialogController = _ConfirmBoxBelonging.EventsController;\n    const componentRef = this.getComponentRef(\n      dialogController,\n      _ConfirmBoxBelonging\n    );\n\n    this.confirmBoxComponentRefList.push(componentRef);\n    componentRef.instance.confirmBoxBelonging = _ConfirmBoxBelonging;\n\n    this.appendToBodyParentComponent(componentRef);\n\n    this.listeners(dialogController);\n\n    return dialogController;\n  }\n\n  getComponentRef(\n    _EventsController: ConfirmBoxClass.ConfirmBoxEventsController,\n    _ConfirmBoxBelonging: ConfirmBoxClass.ConfirmBoxBelonging\n  ): ComponentRef<any> | null {\n    let componentFactory;\n\n    const dialogIndex = this.findDialogIndex(\n      _ConfirmBoxBelonging.EntityUniqueID\n    );\n    if (dialogIndex === -1) {\n      const weakMap = new WeakMap();\n      weakMap.set(\n        ConfirmBoxClass.ConfirmBoxEventsController,\n        _EventsController\n      );\n\n      componentFactory = this.componentFactoryResolver.resolveComponentFactory(\n        ConfirmBoxWrapperComponent\n      );\n      return componentFactory.create(\n        new DialogInjector(this.injector, weakMap)\n      );\n    }\n\n    return null;\n  }\n\n  listeners(_EventsController: ConfirmBoxClass.ConfirmBoxEventsController) {\n    // Listener for closing dialog\n    const closeDialogSubscription = _EventsController.afterClosed$.subscribe(\n      (response) => {\n        const modalIndex = this.findDialogIndex(\n          response.confirmBoxBelonging.EntityUniqueID\n        );\n        this.removeFromBodyParentComponent(modalIndex);\n        closeDialogSubscription.unsubscribe();\n      }\n    );\n  }\n\n  appendToBodyParentComponent(_ComponentRef: ComponentRef<any>): void {\n    // attach view to ignite lifecycle hooks\n    this.appRef.attachView(_ComponentRef.hostView);\n\n    // DOM\n    const domElem = (_ComponentRef.hostView as EmbeddedViewRef<any>)\n      .rootNodes[0] as HTMLElement;\n    document.body.appendChild(domElem);\n  }\n\n  closeDialogWrapperComponent(_DialogUniqueID: string) {\n    const modalIndex = this.findDialogIndex(_DialogUniqueID);\n    this.removeFromBodyParentComponent(modalIndex);\n  }\n\n  removeFromBodyParentComponent(_DialogIndex: number): void {\n    if (_DialogIndex > -1) {\n      this.confirmBoxComponentRefList[_DialogIndex].instance\n        .closeParent$(\"close-fast\")\n        .pipe(\n          map((item) => {\n            this.appRef.detachView(\n              this.confirmBoxComponentRefList[_DialogIndex].hostView\n            );\n            this.confirmBoxComponentRefList[_DialogIndex].destroy();\n            this.confirmBoxComponentRefList.splice(_DialogIndex, 1);\n          })\n        )\n        .subscribe();\n    }\n  }\n\n  findDialogIndex(_DialogUniqueID: string): number {\n    return this.confirmBoxComponentRefList.findIndex((item) => {\n      return (\n        _DialogUniqueID === item.instance.confirmBoxBelonging.EntityUniqueID\n      );\n    });\n  }\n}\n","import { Observable, Subject } from 'rxjs';\nimport { map, take } from 'rxjs/operators';\nimport { DialogLayoutDisplay, VerticalPosition } from '../../../core/enums';\nimport { GlobalClass, GlobalInterface } from '../../../core/global';\nimport { ServiceLocator } from '../../../locator.service';\nimport { ConfirmBoxConfigService } from './confirm-box-config.service';\nimport { ConfirmBoxService } from './confirm-box-service';\n\nexport interface IConfirmBoxUserConfig {\n  Buttons?: GlobalInterface.IButton[];\n  ConfirmBoxCoreConfig?: ConfirmBoxInterface.IConfirmBoxCoreConfig;\n  Dispatch?: GlobalInterface.IDispatch;\n}\n\nexport namespace ConfirmBoxInterface {\n  export interface IConfirmBoxUserConfig {\n    Buttons?: GlobalInterface.IButton[];\n    ConfirmBoxCoreConfig?: ConfirmBoxInterface.IConfirmBoxCoreConfig;\n    Dispatch?: GlobalInterface.IDispatch;\n  }\n\n  export interface IConfirmBoxCoreConfig {\n    /** Fixed popup width */\n    Width?: string;\n    /** Fixed popup height */\n    Height?: string;\n    ButtonPosition?: VerticalPosition;\n    LayoutType?: DialogLayoutDisplay;\n    Dispatch?: GlobalInterface.IDispatch;\n    ConfirmLabel?: string;\n    DeclineLabel?: string;\n    DisableIcon?: boolean;\n    AllowHTMLMessage?: boolean;\n  }\n\n  export interface IConfirmBoxBelonging {\n    Buttons: GlobalInterface.IButton[];\n    ConfirmBoxCoreConfig: ConfirmBoxInterface.IConfirmBoxCoreConfig;\n    EntityUniqueID: string;\n    EventsController: ConfirmBoxClass.ConfirmBoxEventsController;\n  }\n\n  export interface IConfirmBoxResponse {\n    setSuccess(_IsSuccess: boolean): void;\n\n    setClickedButtonID(_ClickedButtonID): void;\n  }\n\n  export interface IConfirmBoxPublicResponse {\n    Success: boolean;\n    ClickedButtonID: string;\n  }\n\n  export interface IPrivateResponseMerged\n    extends IConfirmBoxResponse,\n      GlobalInterface.IPrivateResponse {\n    confirmBoxBelonging: ConfirmBoxInterface.IConfirmBoxBelonging;\n  }\n}\n\nexport namespace ConfirmBoxClass {\n  // region *** Public ***\n\n  export class ConfirmBoxInitializer {\n    /** @internal */\n    private confirmBoxCarrier: ConfirmBoxClass.ConfirmBoxCarrier = new ConfirmBoxClass.ConfirmBoxCarrier();\n\n    constructor() {}\n\n    openConfirmBox$(): Observable<ConfirmBoxInterface.IConfirmBoxPublicResponse> {\n      return this.confirmBoxCarrier.openConfirmBox$().pipe(\n        map(resp => {\n          const basicConfirmBoxResponse = new ConfirmBoxResponse();\n          const dataControl = new GlobalClass.DataControl();\n          dataControl.copyValuesFrom(resp, basicConfirmBoxResponse);\n          return basicConfirmBoxResponse;\n        }),\n        take(1)\n      );\n    }\n\n    setButtons(_Buttons: GlobalInterface.IButton[]): void {\n      this.confirmBoxCarrier.setButtons(_Buttons);\n    }\n\n    setConfig(\n      _ConfirmBoxCoreConfig: ConfirmBoxInterface.IConfirmBoxCoreConfig\n    ) {\n      this.confirmBoxCarrier.setConfig(_ConfirmBoxCoreConfig);\n    }\n\n    setDispatch(_Title: string, _Message: string = null): void {\n      this.confirmBoxCarrier.setTitle(_Title);\n      this.confirmBoxCarrier.setMessage(_Message);\n    }\n\n    setTitle(_Title: string): void {\n      this.confirmBoxCarrier.setTitle(_Title);\n    }\n\n    setMessage(_Message: string): void {\n      this.confirmBoxCarrier.setMessage(_Message);\n    }\n\n    setButtonLabels(_Confirm: string, _Decline?: string): void {\n      this.confirmBoxCarrier.setButtonLabels(_Confirm, _Decline);\n    }\n  }\n\n  export class ConfirmBoxResponse\n    extends GlobalClass.DataControl\n    implements\n      ConfirmBoxInterface.IConfirmBoxResponse,\n      ConfirmBoxInterface.IConfirmBoxPublicResponse {\n    // private Response: DialogPrepareResponse            = new DialogPrepareResponse();\n\n    Success: boolean = null;\n    ClickedButtonID: string = null;\n\n    constructor() {\n      super();\n    }\n\n    setSuccess(_IsSuccess: boolean): void {\n      this.Success = _IsSuccess;\n    }\n\n    setClickedButtonID(_ClickedButtonID): void {\n      this.ClickedButtonID = _ClickedButtonID;\n    }\n  }\n\n  export class ConfirmBoxEventsController {\n    defaultResponse: ConfirmBoxInterface.IPrivateResponseMerged;\n\n    private readonly _afterClosed: Subject<ConfirmBoxInterface.IPrivateResponseMerged> = new Subject<ConfirmBoxInterface.IPrivateResponseMerged>();\n    afterClosed$: Observable<ConfirmBoxInterface.IPrivateResponseMerged> = this._afterClosed.asObservable();\n\n    private readonly _onButtonClick: Subject<GlobalInterface.IButton> = new Subject<GlobalInterface.IButton>();\n    onButtonClick$: Observable<GlobalInterface.IButton> = this._onButtonClick.asObservable();\n    private readonly _buttonList: Subject<\n      GlobalInterface.IButton[]\n    > = new Subject<GlobalInterface.IButton[]>();\n    buttonList$: Observable<\n      GlobalInterface.IButton[]\n    > = this._buttonList.asObservable();\n\n    constructor(private EntityUniqueID: string) {}\n\n    close(_Response?: ConfirmBoxInterface.IPrivateResponseMerged): void {\n      const response = _Response ? _Response : this.defaultResponse;\n      this._afterClosed.next(response);\n    }\n\n    onButtonClick(_Button: GlobalInterface.IButton): void {\n      this.defaultResponse.setClickedButtonID(_Button.ID);\n      this._onButtonClick.next(_Button);\n    }\n\n    setButtonList(_ButtonList: GlobalInterface.IButton[]): void {\n      this._buttonList.next(_ButtonList);\n    }\n\n    setDefaultResponse(\n      _Response: ConfirmBoxInterface.IPrivateResponseMerged\n    ): void {\n      this.defaultResponse = _Response;\n    }\n  }\n\n  // endregion\n\n  export class ConfirmBoxDefaultResponse\n    extends ConfirmBoxResponse\n    implements ConfirmBoxInterface.IPrivateResponseMerged {\n    confirmBoxBelonging: ConfirmBoxBelonging = null;\n\n    constructor() {\n      super();\n    }\n\n    setBelonging(_ConfirmBoxBelonging): void {\n      this.confirmBoxBelonging = _ConfirmBoxBelonging;\n    }\n  }\n\n  export class ConfirmBoxCarrier {\n    confirmBoxBelonging: ConfirmBoxClass.ConfirmBoxBelonging = new ConfirmBoxClass.ConfirmBoxBelonging();\n\n    constructor() {}\n\n    setButtons(_Buttons: GlobalInterface.IButton[]) {\n      if (_Buttons.length) {\n        this.confirmBoxBelonging.Buttons = _Buttons;\n      }\n    }\n\n    setTitle(_Title: string): void {\n      this.confirmBoxBelonging.Dispatch.Title = _Title;\n    }\n\n    setMessage(_Message: string): void {\n      this.confirmBoxBelonging.Dispatch.Message = _Message;\n    }\n\n    setButtonLabels(_Confirm: string, _Decline: string): void {\n      this.confirmBoxBelonging.ConfirmBoxCoreConfig.ConfirmLabel = _Confirm;\n      this.confirmBoxBelonging.ConfirmBoxCoreConfig.DeclineLabel = _Decline;\n    }\n\n    setConfig(_ConfirmBoxBelonging: ConfirmBoxInterface.IConfirmBoxCoreConfig) {\n      // region *** local UserConfig (defined on place where dialog is called) ***\n      const dataControl = new GlobalClass.DataControl();\n      dataControl.copyValuesFrom(\n        _ConfirmBoxBelonging,\n        this.confirmBoxBelonging.ConfirmBoxCoreConfig\n      );\n      // endregion\n    }\n\n    openConfirmBox$(): Observable<ConfirmBoxInterface.IPrivateResponseMerged> {\n      const service: ConfirmBoxService = ServiceLocator.injector.get(\n        ConfirmBoxService\n      );\n      const confirmBoxController = service.open(this.confirmBoxBelonging);\n      return confirmBoxController.afterClosed$;\n    }\n  }\n\n  export class Settings {\n    Buttons: GlobalInterface.IButton[] = [];\n    ConfirmBoxCoreConfig: ConfirmBoxInterface.IConfirmBoxCoreConfig = new ConfirmBoxCoreConfig();\n    Dispatch: GlobalInterface.IDispatch = new GlobalClass.Dispatch();\n  }\n\n  export class ConfirmBoxCoreConfig\n    implements ConfirmBoxInterface.IConfirmBoxCoreConfig {\n    Width: string = null;\n    Height: string = null;\n    ButtonPosition: VerticalPosition = null;\n    LayoutType: DialogLayoutDisplay = null;\n    Dispatch: GlobalInterface.IDispatch = null;\n    ConfirmLabel: string = null;\n    DeclineLabel: string = null;\n    DisableIcon: boolean = null;\n    AllowHTMLMessage: boolean = null;\n  }\n\n  export class ConfirmBoxBelonging\n    extends ConfirmBoxClass.Settings\n    implements ConfirmBoxInterface.IConfirmBoxBelonging {\n    EntityUniqueID: string = 'C' + Math.random().toString(36).substr(2, 9);\n    EventsController: ConfirmBoxEventsController;\n\n    constructor() {\n      super();\n      this.EventsController = new ConfirmBoxEventsController(\n        this.EntityUniqueID\n      );\n      const ConfirmBoxCoreConfigurator: ConfirmBoxConfigService = ServiceLocator.injector.get(\n        ConfirmBoxConfigService\n      );\n      const baseSettings = new ConfirmBoxClass.Settings();\n      const dataControl = new GlobalClass.DataControl();\n      dataControl.copyValuesFrom(\n        ConfirmBoxCoreConfigurator.productionConfig.ConfirmBoxCoreConfig,\n        baseSettings.ConfirmBoxCoreConfig\n      );\n      this.ConfirmBoxCoreConfig = baseSettings.ConfirmBoxCoreConfig;\n      this.Buttons = ConfirmBoxCoreConfigurator.productionConfig.Buttons.slice();\n    }\n  }\n}\n","import { Component } from \"@angular/core\";\n\n@Component({\n  selector: \"ed-default-loader\",\n  templateUrl: \"./default-loader.component.html\",\n  styleUrls: [\"./default-loader.component.scss\"],\n})\nexport class DefaultLoaderComponent {}\n","import { Inject, Injectable } from \"@angular/core\";\nimport { DialogLayoutDisplay } from \"../../../core/enums\";\nimport { GlobalClass } from \"../../../core/global\";\nimport { DefaultLoaderComponent } from \"../../../default-loader/default-loader.component\";\nimport { DialogClass, DialogInterface } from \"./model\";\n\n@Injectable({\n  providedIn: \"root\",\n})\nexport class DialogConfigService {\n  authorConfig: DialogInterface.IDialogUserConfig = new DialogClass.DialogSettings();\n  productionConfig: DialogInterface.IDialogUserConfig = new DialogClass.DialogSettings();\n\n  constructor(\n    @Inject(\"dialogConfig\")\n    private userConfig: DialogInterface.IDialogUserConfig = {}\n  ) {\n    // region *** dialog userConfig (user input app-module) ***\n    const userConfigBase = new DialogClass.DialogSettings();\n    const dataControl = new GlobalClass.DataControl();\n    dataControl.copyValuesFrom(\n      userConfig.DialogCoreConfig,\n      userConfigBase.DialogCoreConfig\n    ); // this will make sure that object has right properties\n    userConfig.DialogCoreConfig = userConfigBase.DialogCoreConfig;\n\n    if (userConfig.DialogCoreConfig.LoaderComponent !== null) {\n      userConfig.DialogCoreConfig.DisplayLoader =\n        userConfig.DialogCoreConfig.DisplayLoader === null;\n    }\n    // endregion\n\n    // region *** author default config values (if there is no user input) ***\n    this.authorConfig.DialogCoreConfig.Width = \"auto\";\n    this.authorConfig.DialogCoreConfig.Height = \"auto\";\n    this.authorConfig.DialogCoreConfig.HideScrollbar = false;\n    this.authorConfig.DialogCoreConfig.EscapeKeyClose = false;\n    this.authorConfig.DialogCoreConfig.ButtonPosition = \"right\";\n    this.authorConfig.DialogCoreConfig.DisplayLoader = false;\n    this.authorConfig.DialogCoreConfig.LayoutType = DialogLayoutDisplay.NONE;\n    this.authorConfig.DialogCoreConfig.LoaderComponent = DefaultLoaderComponent;\n    // endregion\n\n    dataControl.copyValuesFrom(\n      this.authorConfig.DialogCoreConfig,\n      this.productionConfig.DialogCoreConfig\n    );\n    dataControl.copyValuesFrom(\n      userConfig.DialogCoreConfig,\n      this.productionConfig.DialogCoreConfig\n    );\n\n    // Buttons\n    /*if(userConfig.Buttons){\n\t\t\tthis.config.Buttons.push(\n\t\t\t\tnew ButtonMaker('Ok', 'ok', ButtonLayoutDisplay.PRIMARY)\n\t\t\t\t,new ButtonMaker('Cancel', 'cancel', ButtonLayoutDisplay.SECONDARY)\n\t\t\t);\n\t\t}*/\n  }\n}\n","import { Directive, ViewContainerRef } from \"@angular/core\";\n\n@Directive({\n  selector: \"[appInsertionLoader]\",\n})\nexport class InsertionLoaderDirective {\n  constructor(public viewContainerRef: ViewContainerRef) {}\n}\n","import { Directive, ViewContainerRef } from \"@angular/core\";\n\n@Directive({\n  selector: \"[appInsertion]\",\n})\nexport class InsertionDirective {\n  constructor(public viewContainerRef: ViewContainerRef) {}\n}\n","import {\n  AfterViewInit,\n  ChangeDetectorRef,\n  Component,\n  ComponentFactoryResolver,\n  ComponentRef,\n  HostListener,\n  OnDestroy,\n  Type,\n  ViewChild,\n} from \"@angular/core\";\nimport { Observable, Observer } from \"rxjs\";\nimport { delay } from \"rxjs/operators\";\nimport { fadeInOut } from \"../../../core/animations\";\nimport { InsertionLoaderDirective } from \"../../../core/insertion-loader.directive\";\nimport { InsertionDirective } from \"../../../core/insertion.directive\";\nimport { DialogClass } from \"../core/model\";\n\n@Component({\n  selector: \"dialog-popup-wrapper\",\n  templateUrl: \"./dialog-wrapper.component.html\",\n  styleUrls: [\"./dialog-wrapper.component.scss\"],\n  animations: [fadeInOut(0, 1)],\n})\nexport class DialogWrapperComponent implements AfterViewInit, OnDestroy {\n  fadeInOutAnimation: string = \"open\";\n  showLoader: boolean = true;\n  bodyOverflow: string;\n\n  childComponentRef: ComponentRef<any>;\n  childComponentType: Type<any>;\n  loaderComponentRef: ComponentRef<any>;\n\n  @ViewChild(InsertionDirective, { static: true })\n  insertionPoint: InsertionDirective;\n  @ViewChild(InsertionLoaderDirective, { static: true })\n  loaderInsertionPoint: InsertionLoaderDirective;\n\n  constructor(\n    public dialogBelonging: DialogClass.DialogBelonging,\n    private componentFactoryResolver: ComponentFactoryResolver,\n    private cd: ChangeDetectorRef\n  ) {}\n\n  ngAfterViewInit(): void {\n    this.hideScrollbar(); // hide scrollbar if config enabled\n\n    this.loadChildComponent(this.childComponentType);\n    this.loadLoaderComponent(\n      this.dialogBelonging.DialogCoreConfig.LoaderComponent\n    );\n    this.setDefaultResponse();\n    this.cd.detectChanges();\n  }\n\n  hideScrollbar() {\n    if (this.dialogBelonging.DialogCoreConfig.HideScrollbar) {\n      this.bodyOverflow = document.body.style.overflow;\n      document.body.style.overflow = \"hidden\";\n    }\n  }\n\n  revertScrollbarSettings() {\n    if (this.dialogBelonging.DialogCoreConfig.HideScrollbar) {\n      document.body.style.overflow = this.bodyOverflow;\n    }\n  }\n\n  setDefaultResponse(): void {\n    const dialogResponse = new DialogClass.DialogDefaultResponse();\n    dialogResponse.setBelonging(this.dialogBelonging);\n    this.dialogBelonging.EventsController.setDefaultResponse(dialogResponse);\n  }\n\n  ngOnDestroy(): void {\n    this.revertScrollbarSettings();\n\n    if (this.childComponentRef) {\n      this.childComponentRef.destroy();\n    }\n    if (this.loaderComponentRef) {\n      this.loaderComponentRef.destroy();\n    }\n  }\n\n  hideScroller() {}\n\n  loadChildComponent(_ComponentType: Type<any>): void {\n    const componentFactory = this.componentFactoryResolver.resolveComponentFactory(\n      _ComponentType\n    );\n\n    const viewContainerRef = this.insertionPoint.viewContainerRef;\n    viewContainerRef.clear();\n\n    this.childComponentRef = viewContainerRef.createComponent(componentFactory);\n\n    this.childComponentRef.instance.dialogBelonging = this.dialogBelonging;\n  }\n\n  loadLoaderComponent(_LoaderRef: Type<any>): void {\n    const componentFactory = this.componentFactoryResolver.resolveComponentFactory(\n      _LoaderRef\n    );\n    const viewContainerRef = this.loaderInsertionPoint.viewContainerRef;\n    viewContainerRef.clear();\n\n    this.loaderComponentRef = viewContainerRef.createComponent(\n      componentFactory\n    );\n  }\n\n  close() {\n    this.dialogBelonging.EventsController.close();\n  }\n\n  closeParent$(_ClosingAnimation: string): Observable<any> {\n    this.fadeInOutAnimation = _ClosingAnimation;\n    const timer = _ClosingAnimation === \"close-slow\" ? 1400 : 150;\n\n    return new Observable((observer: Observer<any>) => {\n      observer.next(\"\");\n      observer.complete();\n    }).pipe(delay(timer));\n  }\n\n  onOverlayClicked(evt: MouseEvent): void {\n    // console.log('onOverlayClicked');\n  }\n\n  onCustomButton(_Button: any): void {\n    this.dialogBelonging.EventsController.onButtonClick(_Button);\n  }\n\n  closeLoader(): void {\n    this.showLoader = false;\n  }\n\n  @HostListener(\"window:keyup\", [\"$event\"])\n  keyEvent(event: KeyboardEvent) {\n    if (event.key === \"Escape\") {\n      this.close();\n    }\n  }\n}\n","import {\n  ApplicationRef,\n  ComponentFactoryResolver,\n  ComponentRef,\n  EmbeddedViewRef,\n  Injectable,\n  Injector,\n  Type,\n} from \"@angular/core\";\nimport { map } from \"rxjs/operators\";\nimport { DialogInjector } from \"../../../core/dialog-injector\";\nimport { DialogWrapperComponent } from \"../dialog-wrapper/dialog-wrapper.component\";\nimport { DialogClass, DialogInterface } from \"./model\";\n\n@Injectable({\n  providedIn: \"root\",\n})\nexport class DialogService {\n  dialogParentComponentRefList: ComponentRef<any>[] = [];\n\n  constructor(\n    private componentFactoryResolver: ComponentFactoryResolver,\n    private injector: Injector,\n    private appRef: ApplicationRef\n  ) {}\n\n  open(\n    _ComponentType: Type<any>,\n    _DialogBelonging: DialogClass.DialogBelonging\n  ): DialogInterface.IDialogEventsController {\n    const dialogController = _DialogBelonging.EventsController;\n    const componentRef = this.getComponentRef(\n      dialogController,\n      _DialogBelonging\n    );\n\n    this.dialogParentComponentRefList.push(componentRef);\n    componentRef.instance.dialogBelonging = _DialogBelonging;\n    componentRef.instance.childComponentType = _ComponentType;\n\n    this.appendToBodyParentComponent(componentRef);\n\n    this.listeners(dialogController);\n\n    return dialogController;\n  }\n\n  getComponentRef(\n    _EventsController: DialogInterface.IDialogEventsController,\n    _DialogBelonging: DialogClass.DialogBelonging\n  ): ComponentRef<any> | null {\n    let componentFactory;\n\n    const dialogIndex = this.findDialogIndex(_DialogBelonging.EntityUniqueID);\n    if (dialogIndex === -1) {\n      const weakMap = new WeakMap();\n      weakMap.set(DialogClass.DialogEventsController, _EventsController);\n\n      componentFactory = this.componentFactoryResolver.resolveComponentFactory(\n        DialogWrapperComponent\n      );\n      return componentFactory.create(\n        new DialogInjector(this.injector, weakMap)\n      );\n    }\n\n    return null;\n  }\n\n  listeners(_EventsController: DialogInterface.IDialogEventsController) {\n    // Listener for closing dialog\n    const closeDialogSubscription = _EventsController.afterClosed$.subscribe(\n      (response) => {\n        const modalIndex = this.findDialogIndex(\n          response.DialogBelonging.EntityUniqueID\n        );\n        this.removeFromBodyDialogWrapperComponent(modalIndex);\n        closeDialogSubscription.unsubscribe();\n      }\n    );\n\n    // Listener for turning off loader\n    const closeLoaderSubscription = _EventsController.afterLoader$.subscribe(\n      (_DialogUniqueID: string) => {\n        if (_DialogUniqueID) {\n          const modalIndex = this.findDialogIndex(_DialogUniqueID);\n          if (modalIndex !== -1) {\n            this.dialogParentComponentRefList[\n              modalIndex\n            ].instance.closeLoader();\n          }\n        }\n\n        closeLoaderSubscription.unsubscribe();\n      }\n    );\n  }\n\n  childComponentResolver() {}\n\n  appendToBodyParentComponent(_ComponentRef: ComponentRef<any>): void {\n    // attach view to ignite lifecycle hooks\n    this.appRef.attachView(_ComponentRef.hostView);\n\n    // DOM\n    const domElem = (_ComponentRef.hostView as EmbeddedViewRef<any>)\n      .rootNodes[0] as HTMLElement;\n    document.body.appendChild(domElem);\n  }\n\n  closeDialogWrapperComponent(_DialogUniqueID: string) {\n    const modalIndex = this.findDialogIndex(_DialogUniqueID);\n    this.removeFromBodyDialogWrapperComponent(modalIndex);\n  }\n\n  removeFromBodyDialogWrapperComponent(_DialogIndex: number): void {\n    if (_DialogIndex > -1) {\n      this.dialogParentComponentRefList[_DialogIndex].instance\n        .closeParent$(\"close-fast\")\n        .pipe(\n          map((item) => {\n            this.appRef.detachView(\n              this.dialogParentComponentRefList[_DialogIndex].hostView\n            );\n            this.dialogParentComponentRefList[_DialogIndex].destroy();\n            this.dialogParentComponentRefList.splice(_DialogIndex, 1);\n          })\n        )\n        .subscribe();\n    }\n  }\n\n  findDialogIndex(_DialogUniqueID: string): number {\n    return this.dialogParentComponentRefList.findIndex((item) => {\n      return _DialogUniqueID === item.instance.dialogBelonging.EntityUniqueID;\n    });\n  }\n}\n","import { Type } from \"@angular/core\";\nimport { Observable, Subject } from \"rxjs\";\nimport { map, take } from \"rxjs/operators\";\nimport { DialogLayoutDisplay, VerticalPosition } from \"../../../core/enums\";\nimport { GlobalClass, GlobalInterface } from \"../../../core/global\";\nimport { ServiceLocator } from \"../../../locator.service\";\nimport { DialogConfigService } from \"./dialog-config.service\";\nimport { DialogService } from \"./dialog.service\";\n\nexport namespace DialogInterface {\n  /**\n   * Check interface of properties.\n   */\n  export interface IDialogUserConfig {\n    Buttons?: GlobalInterface.IButton[];\n    DialogCoreConfig?: DialogInterface.IDialogCoreConfig;\n  }\n\n  /**\n   * Optional user configuration.\n   *\n   * Example:\n   * ```typescript\n   * // Dialog core config object example.\n   * const dialogCoreConfig = {\n   *     DialogCoreConfig: {\n   *        Width          : '500px',\n   *        // MinWidth       : '300px',  // v1.1.0\n   *        // MaxWidth       : '700px',  // v1.1.0\n   *        Height         : '500px',\n   *        // MinHeight      : '100vh',  // v1.1.0\n   *        // MaxHeight      : '100px',  // v1.1.0\n   *        HideScrollbar  : true,        // v1.1.0\n   *        EscapeKeyClose : true,        // v1.1.0\n   *        // FullScreen : true,         // v1.1.0\n   *        ButtonPosition : 'right',\n   *        LayoutType: DialogLayoutDisplay.INFO,\n   *        // LoaderComponent: // Any Angular component class name can be included as a loader.\n   *        DisplayLoader: false // This will override LoaderComponent.\n   *     }\n   *  }\n   * ```\n   */\n  export interface IDialogCoreConfig extends GlobalInterface.ISizes {\n    EscapeKeyClose?: boolean;\n    HideScrollbar?: boolean;\n    ButtonPosition?: VerticalPosition;\n    LayoutType?: DialogLayoutDisplay;\n    DisplayLoader?: boolean;\n    LoaderComponent?: Type<any>;\n  }\n\n  export interface IDialogBelonging {\n    Buttons: GlobalInterface.IButton[];\n    DialogCoreConfig: DialogInterface.IDialogCoreConfig;\n    EntityUniqueID: string;\n    CustomData: any;\n    EventsController: DialogInterface.IDialogEventsController;\n  }\n\n  export interface IDialogEventsController {\n    /** @internal */\n    defaultResponse: DialogInterface.IPrivateResponseMerged;\n    /** @internal */\n    afterClosed$: Observable<DialogInterface.IPrivateResponseMerged>;\n    /** @internal */\n    afterLoader$: Observable<string>;\n    /** @internal */\n    onButtonClick$: Observable<GlobalInterface.IButton>;\n    /** @internal */\n    buttonList$: Observable<GlobalInterface.IButton[]>;\n\n    close(_Payload?: any): void;\n\n    onButtonClick(_Button: GlobalInterface.IButton): void;\n\n    setButtonList(_ButtonList: GlobalInterface.IButton[]): void;\n\n    closeLoader(): void;\n\n    setDefaultResponse(_Response: DialogInterface.IPrivateResponseMerged): void;\n\n    setDefaultResponse(_Response: DialogInterface.IPrivateResponseMerged): void;\n  }\n\n  export interface IDialogResponse {\n    setPayload(_Payload: any): void;\n\n    setClickedButtonID(_ClickedButtonID): void;\n  }\n\n  export interface IDialogPublicResponse<ResponsePayload> {\n    /** Generic property type, accept expected payload from dynamic child component. */\n    Payload: ResponsePayload;\n    Success: boolean;\n    ClickedButtonID: string;\n  }\n\n  export interface IPrivateResponseMerged\n    extends IDialogResponse,\n      GlobalInterface.IPrivateResponse {\n    DialogBelonging: DialogInterface.IDialogBelonging;\n  }\n}\n\nexport namespace DialogClass {\n  // region *** Public ***\n\n  export class DialogInitializer {\n    private dialogCarrier: DialogCarrier = new DialogClass.DialogCarrier();\n\n    constructor(private component: Type<any>) {\n      this.dialogCarrier.setComponent(this.component);\n    }\n\n    /** Generic method accept expected payload from dynamic child component.*/\n    openDialog$<ResponsePayload = any>(): Observable<\n      DialogInterface.IDialogPublicResponse<ResponsePayload>\n    > {\n      return this.dialogCarrier.openDialog$().pipe(\n        map((resp) => {\n          const basicDialogResponse = new DialogResponse();\n          const dataControl = new GlobalClass.DataControl();\n          dataControl.copyValuesFrom(resp, basicDialogResponse);\n          return basicDialogResponse;\n        }),\n        take(1)\n      );\n    }\n\n    /** It accepts list of custom buttons */\n    setButtons(_Buttons: GlobalInterface.IButton[]): void {\n      this.dialogCarrier.setButtons(_Buttons);\n    }\n\n    setCustomData(_CustomData: any) {\n      this.dialogCarrier.setCustomData(_CustomData);\n    }\n\n    setConfig(_DialogConfig: DialogInterface.IDialogCoreConfig) {\n      this.dialogCarrier.setConfig(_DialogConfig);\n    }\n  }\n\n  export class DialogResponse\n    extends GlobalClass.DataControl\n    implements\n      DialogInterface.IDialogResponse,\n      DialogInterface.IDialogPublicResponse<any> {\n    // private Response: DialogPrepareResponse            = new DialogPrepareResponse();\n\n    Payload: any = null;\n    Success: boolean = null;\n    ClickedButtonID: string = null;\n\n    constructor() {\n      super();\n    }\n\n    /**\n     * @ignore\n     */\n    setPayload(_Payload: any): void {\n      this.Payload = _Payload;\n    }\n\n    /**\n     * @ignore\n     */\n    setClickedButtonID(_ClickedButtonID): void {\n      this.ClickedButtonID = _ClickedButtonID;\n    }\n  }\n\n  export class DialogEventsController\n    implements DialogInterface.IDialogEventsController {\n    defaultResponse: DialogInterface.IPrivateResponseMerged;\n\n    private readonly _afterClosed: Subject<DialogInterface.IPrivateResponseMerged> = new Subject<DialogInterface.IPrivateResponseMerged>();\n    afterClosed$: Observable<DialogInterface.IPrivateResponseMerged> = this._afterClosed.asObservable();\n\n    private readonly _afterLoader: any = new Subject<string>();\n    afterLoader$: Observable<string> = this._afterLoader.asObservable();\n    private readonly _onButtonClick: Subject<GlobalInterface.IButton> = new Subject<GlobalInterface.IButton>();\n    onButtonClick$: Observable<GlobalInterface.IButton> = this._onButtonClick.asObservable();\n    private readonly _buttonList: Subject<\n      GlobalInterface.IButton[]\n    > = new Subject<GlobalInterface.IButton[]>();\n    buttonList$: Observable<\n      GlobalInterface.IButton[]\n    > = this._buttonList.asObservable();\n\n    constructor(private EntityUniqueID: string) {}\n\n    close(_Payload: any = null): void {\n      this.defaultResponse.setPayload(_Payload);\n      this._afterClosed.next(this.defaultResponse);\n    }\n\n    onButtonClick(_Button: GlobalInterface.IButton): void {\n      this.defaultResponse.setClickedButtonID(_Button.ID);\n      this._onButtonClick.next(_Button);\n    }\n\n    setButtonList(_ButtonList: GlobalInterface.IButton[]): void {\n      this._buttonList.next(_ButtonList);\n    }\n\n    closeLoader(): void {\n      setTimeout(() => {\n        this._afterLoader.next(this.EntityUniqueID);\n      }, 0);\n    }\n\n    setDefaultResponse(\n      _Response: DialogInterface.IPrivateResponseMerged\n    ): void {\n      this.defaultResponse = _Response;\n    }\n  }\n\n  // endregion\n\n  export class DialogDefaultResponse\n    extends DialogResponse\n    implements DialogInterface.IPrivateResponseMerged {\n    DialogBelonging: DialogInterface.IDialogBelonging = null;\n\n    constructor() {\n      super();\n    }\n\n    setBelonging(_DialogBelonging): void {\n      this.DialogBelonging = _DialogBelonging;\n    }\n  }\n\n  export class DialogCarrier {\n    dialogBelonging: DialogBelonging = new DialogBelonging();\n    private component: Type<any>;\n\n    constructor() {}\n\n    setComponent(_Component: Type<any>): void {\n      this.component = _Component;\n    }\n\n    setButtons(_Buttons: GlobalInterface.IButton[]) {\n      if (_Buttons.length) {\n        this.dialogBelonging.Buttons = _Buttons;\n      }\n    }\n\n    setCustomData(_CustomData: any) {\n      this.dialogBelonging.CustomData = _CustomData;\n    }\n\n    setConfig(_DialogConfig: DialogInterface.IDialogCoreConfig) {\n      // region *** local UserConfig (defined on place where dialog is called) ***\n      const dataControl = new GlobalClass.DataControl();\n      dataControl.copyValuesFrom(\n        _DialogConfig,\n        this.dialogBelonging.DialogCoreConfig\n      );\n      if (_DialogConfig?.LoaderComponent) {\n        this.dialogBelonging.DialogCoreConfig.DisplayLoader = true;\n      }\n      // endregion\n    }\n\n    openDialog$(): Observable<DialogInterface.IPrivateResponseMerged> {\n      const service: DialogService = ServiceLocator.injector.get(DialogService);\n      const dialogController = service.open(\n        this.component,\n        this.dialogBelonging\n      );\n      return dialogController.afterClosed$;\n    }\n  }\n\n  export class DialogCoreConfig\n    extends GlobalClass.Sizes\n    implements DialogInterface.IDialogCoreConfig {\n    EscapeKeyClose: boolean = null;\n    HideScrollbar: boolean = null;\n    ButtonPosition: VerticalPosition = null;\n    LayoutType: DialogLayoutDisplay = null;\n    DisplayLoader: boolean = null;\n    LoaderComponent: Type<any> = null;\n  }\n\n  export class DialogSettings {\n    Buttons: GlobalInterface.IButton[] = [];\n    DialogCoreConfig: DialogInterface.IDialogCoreConfig = new DialogCoreConfig();\n  }\n\n  export class DialogBelonging<CustomData = any>\n    extends DialogSettings\n    implements DialogInterface.IDialogBelonging {\n    /** @internal */\n    EntityUniqueID: string = \"D\" + Math.random().toString(36).substr(2, 9);\n\n    CustomData: CustomData = null;\n    EventsController: DialogInterface.IDialogEventsController;\n\n    constructor() {\n      super();\n      this.EventsController = new DialogEventsController(this.EntityUniqueID);\n      const dialogConfigurator: DialogConfigService = ServiceLocator.injector.get(\n        DialogConfigService\n      );\n      const baseSettings = new DialogSettings();\n      const dataControl = new GlobalClass.DataControl();\n      dataControl.copyValuesFrom(\n        dialogConfigurator.productionConfig.DialogCoreConfig,\n        baseSettings.DialogCoreConfig\n      );\n      this.DialogCoreConfig = baseSettings.DialogCoreConfig;\n      this.Buttons = dialogConfigurator.productionConfig.Buttons.slice();\n    }\n  }\n}\n","import { Inject, Injectable } from \"@angular/core\";\nimport { DialogLayoutDisplay } from \"../../../core/enums\";\nimport { GlobalClass } from \"../../../core/global\";\nimport {\n  ToastNotificationClass,\n  ToastNotificationInterface,\n  ToastPositionEnum,\n  ToastProgressBarEnum,\n  ToastUserViewTypeEnum,\n} from \"./model\";\n\n@Injectable({\n  providedIn: \"root\",\n})\nexport class ToastNotificationConfigService {\n  authorConfig: ToastNotificationInterface.IToastNotificationUserConfig = new ToastNotificationClass.Settings();\n  productionConfig: ToastNotificationInterface.IToastNotificationUserConfig = new ToastNotificationClass.Settings();\n  private dataControl = new GlobalClass.DataControl();\n\n  constructor(\n    @Inject(\"toastNotificationConfig\")\n    private userConfig: ToastNotificationInterface.IToastNotificationUserConfig = {}\n  ) {\n    // region *** confirmBox userConfig (user input app-module) ***\n    const userConfigBase = new ToastNotificationClass.Settings();\n\n    this.dataControl.copyValuesFrom(\n      userConfig.ToastCoreConfig,\n      userConfigBase.ToastCoreConfig\n    ); // this will make sure that object has right properties\n\n    userConfig.ToastCoreConfig = userConfigBase.ToastCoreConfig;\n    // endregion\n\n    // region *** author default config values (if there is no user input) ***\n    this.authorConfig.ToastCoreConfig.ButtonPosition = \"right\";\n    this.authorConfig.ToastCoreConfig.TextPosition = \"left\";\n    this.authorConfig.ToastCoreConfig.ToastPosition =\n      ToastPositionEnum.TOP_RIGHT;\n    this.authorConfig.ToastCoreConfig.ProgressBar =\n      ToastProgressBarEnum.INCREASE;\n    this.authorConfig.ToastCoreConfig.ToastUserViewType =\n      ToastUserViewTypeEnum.SIMPLE;\n    this.authorConfig.ToastCoreConfig.AutoCloseDelay = 2500;\n    this.authorConfig.ToastCoreConfig.DisableIcon = false;\n    this.authorConfig.ToastCoreConfig.AllowHTMLMessage = true;\n    this.authorConfig.ToastCoreConfig.LayoutType = DialogLayoutDisplay.NONE;\n    this.authorConfig.GlobalSettings.AllowedNotificationsAtOnce = 5;\n\n    // endregion\n\n    // region *** Production setup ***\n\n    this.setResetGlobalToastConfig();\n    this.dataControl.copyValuesFrom(\n      this.authorConfig.ToastCoreConfig,\n      this.productionConfig.ToastCoreConfig\n    );\n    this.dataControl.copyValuesFrom(\n      this.userConfig.ToastCoreConfig,\n      this.productionConfig.ToastCoreConfig\n    );\n    // endregion\n  }\n\n  setResetGlobalToastConfig(\n    globalToastConfig?: ToastNotificationInterface.IGlobalToastSettings\n  ): void {\n    this.dataControl.copyValuesFrom(\n      this.authorConfig.GlobalSettings,\n      this.productionConfig.GlobalSettings\n    );\n    this.dataControl.copyValuesFrom(\n      globalToastConfig ? globalToastConfig : this.userConfig.GlobalSettings,\n      this.productionConfig.GlobalSettings\n    );\n  }\n}\n","import { Directive, OnDestroy } from \"@angular/core\";\nimport { BehaviorSubject, Observable, of, Subscription } from \"rxjs\";\nimport { delay, tap } from \"rxjs/operators\";\nimport { GlobalClass, GlobalInterface } from \"../../../core/global\";\nimport { ToastNotificationClass } from \"./model\";\n\n@Directive()\nexport abstract class WrapperAbstraction implements OnDestroy {\n  fadeInOutAnimation: string = \"open\";\n  timerStarted$ = new BehaviorSubject(\"start-counter\");\n  subsToClosingDelay: Subscription;\n  subTimer: Subscription;\n  isTimerStarted = false;\n  timeout;\n  timer: GlobalClass.Timer = new GlobalClass.Timer();\n\n  protected constructor(\n    public toastNotificationBelonging: ToastNotificationClass.ToastNotificationBelonging\n  ) {}\n\n  mouseOver() {\n    this.timerStarted$.next(\"stop-counter\");\n    this.fadeInOutAnimation = \"open\";\n    this.subsToClosingDelay?.unsubscribe();\n  }\n\n  mouseOut() {\n    this.timerStarted$.next(\"start-counter\");\n  }\n\n  onOverlayClicked(evt: MouseEvent): void {\n    //  console.log('onOverlayClicked');\n  }\n\n  onToastClicked(evt: MouseEvent): void {\n    // console.log('onOverlayClicked');\n  }\n\n  setResponse(_IsSuccess: boolean, _ClickedButtonID?: string): void {\n    const response = new ToastNotificationClass.ToastNotificationDefaultResponse();\n    if (_ClickedButtonID) {\n      response.ClickedButtonID = _ClickedButtonID;\n    }\n\n    response.setSuccess(_IsSuccess);\n    response.setBelonging(this.toastNotificationBelonging);\n    this.toastNotificationBelonging.EventsController.setDefaultResponse(\n      response\n    );\n  }\n\n  onCustomButton(_Button: GlobalInterface.IButton): void {\n    this.toastNotificationBelonging.EventsController.onButtonClick(_Button);\n    this.setResponse(true, _Button.ID);\n    this.toastNotificationBelonging.EventsController.close();\n  }\n\n  onButtonClick(_Type: \"confirm\" | \"decline\") {\n    let buttonID;\n    if (_Type === \"confirm\") {\n      buttonID = this.toastNotificationBelonging.ToastCoreConfig.ConfirmLabel.toLowerCase();\n    } else if (_Type === \"decline\") {\n      buttonID = this.toastNotificationBelonging.ToastCoreConfig.DeclineLabel.toLowerCase();\n    }\n\n    this.setResponse(_Type === \"confirm\", buttonID);\n    this.toastNotificationBelonging.EventsController.close();\n  }\n\n  autoClose() {\n    if (this.autoCloseCondition()) {\n      this.timer.setMilliseconds(\n        this.toastNotificationBelonging.ToastCoreConfig.AutoCloseDelay\n      );\n      this.subTimer = this.timerStarted$\n        .pipe(\n          tap((next) => {\n            if (\"start-counter\" === next) {\n              this.timer.start();\n              this.isTimerStarted = true;\n              this.timeout = setTimeout(() => {\n                this.subsToClosingDelay = this.closeParent$(\n                  \"close-slow\"\n                ).subscribe((resp) => {\n                  this.toastNotificationBelonging.EventsController.close();\n                });\n              }, this.toastNotificationBelonging.ToastCoreConfig.AutoCloseDelay);\n            } else if (\"stop-counter\" === next) {\n              if (this.isTimerStarted) {\n                this.timer.stop();\n                clearTimeout(this.timeout);\n                this.isTimerStarted = false;\n              }\n            }\n          })\n        )\n        .subscribe();\n    }\n  }\n\n  autoCloseCondition(): boolean {\n    return (\n      this.toastNotificationBelonging.ToastCoreConfig.AutoCloseDelay &&\n      !(\n        this.toastNotificationBelonging.Buttons.length ||\n        this.toastNotificationBelonging.ToastCoreConfig.DeclineLabel ||\n        this.toastNotificationBelonging.ToastCoreConfig.ConfirmLabel\n      )\n    );\n  }\n\n  closeParent$(_ClosingAnimation: string): Observable<any> {\n    this.fadeInOutAnimation = _ClosingAnimation;\n    const timer = _ClosingAnimation === \"close-slow\" ? 1400 : 150;\n    return of(\"\").pipe(delay(timer));\n  }\n\n  close() {\n    this.toastNotificationBelonging.EventsController.close();\n  }\n\n  ngOnDestroy() {\n    this.subsToClosingDelay?.unsubscribe();\n    this.subTimer?.unsubscribe();\n  }\n}\n","import { AfterViewInit, ChangeDetectorRef, Component } from \"@angular/core\";\nimport { fadeInOut } from \"../../../core/animations\";\nimport { GlobalConfigService } from \"../../../core/global-config.service\";\nimport { ToastNotificationClass } from \"../core/model\";\nimport { WrapperAbstraction } from \"../core/wrapper-abstraction\";\n\n@Component({\n  selector: \"app-toast-notification-simple-wrapper\",\n  templateUrl: \"./toast-notification-simple-wrapper.component.html\",\n  styleUrls: [\"./toast-notification-simple-wrapper.component.scss\"],\n  animations: [fadeInOut(0, 1)],\n})\nexport class ToastNotificationSimpleWrapperComponent\n  extends WrapperAbstraction\n  implements AfterViewInit {\n  constructor(\n    public gConfig: GlobalConfigService,\n    public toastNotificationBelonging: ToastNotificationClass.ToastNotificationBelonging,\n    private cd: ChangeDetectorRef\n  ) {\n    super(toastNotificationBelonging);\n  }\n\n  ngAfterViewInit(): void {\n    this.setResponse(false);\n    this.cd.detectChanges();\n    this.autoClose();\n  }\n}\n","import { AfterViewInit, ChangeDetectorRef, Component } from \"@angular/core\";\nimport { fadeInOut } from \"../../../core/animations\";\nimport { GlobalConfigService } from \"../../../core/global-config.service\";\nimport { ToastNotificationClass } from \"../core/model\";\nimport { WrapperAbstraction } from \"../core/wrapper-abstraction\";\n\n@Component({\n  selector: \"app-toast-notification-wrapper\",\n  templateUrl: \"./toast-notification-wrapper.component.html\",\n  styleUrls: [\"./toast-notification-wrapper.component.scss\"],\n  animations: [fadeInOut(0, 1)],\n})\nexport class ToastNotificationWrapperComponent\n  extends WrapperAbstraction\n  implements AfterViewInit {\n  constructor(\n    public gConfig: GlobalConfigService,\n    public toastNotificationBelonging: ToastNotificationClass.ToastNotificationBelonging,\n    private cd: ChangeDetectorRef\n  ) {\n    super(toastNotificationBelonging);\n  }\n\n  ngAfterViewInit(): void {\n    this.setResponse(false);\n    this.cd.detectChanges();\n    this.autoClose();\n  }\n}\n","import {\n  ApplicationRef,\n  ComponentFactoryResolver,\n  ComponentRef,\n  EmbeddedViewRef,\n  Injectable,\n  Injector,\n  Type,\n} from \"@angular/core\";\nimport { Observable } from \"rxjs\";\nimport { map } from \"rxjs/operators\";\nimport { DialogInjector } from \"../../../core/dialog-injector\";\nimport { GlobalConfigService } from \"../../../core/global-config.service\";\nimport { ToastNotificationSimpleWrapperComponent } from \"../toast-notification-simple-wrapper/toast-notification-simple-wrapper.component\";\nimport { ToastNotificationWrapperComponent } from \"../toast-notification-wrapper/toast-notification-wrapper.component\";\nimport {\n  ToastNotificationClass,\n  ToastNotificationInterface,\n  ToastPositionEnum,\n  ToastUserViewTypeEnum,\n} from \"./model\";\nimport { ToastNotificationConfigService } from \"./toast-notification-config.service\";\n\n@Injectable({\n  providedIn: \"root\",\n})\nexport class ToastNotificationService {\n  // toastComponentRefList: ComponentRef<ToastNotificationWrapperComponent>[]    = [];\n  toastComponentRefList: ComponentRef<any>[] = [];\n  bufferToastRawList: ToastNotificationInterface.IToastNotificationRawState[] = [];\n  bufferCheckingIntervalIsReady: boolean = true;\n\n  constructor(\n    private componentFactoryResolver: ComponentFactoryResolver,\n    private injector: Injector,\n    private appRef: ApplicationRef,\n    private toastConfig: ToastNotificationConfigService,\n    private gConfigService: GlobalConfigService\n  ) {}\n\n  openToast$(\n    _ToastNotificationBelonging: ToastNotificationClass.ToastNotificationBelonging\n  ): Observable<ToastNotificationInterface.IPrivateResponseMerged> {\n    let eventController = _ToastNotificationBelonging.EventsController;\n    // console.log(`%c ${_ToastNotificationBelonging.EntityUniqueID} `, `background: #339933; color: #fff`);\n\n    const toastRawInstance = this.prepareRawToast(\n      eventController,\n      _ToastNotificationBelonging\n    );\n    this.listeners(eventController);\n    this.internalRouting(toastRawInstance);\n    return eventController.afterClosed$;\n  }\n\n  internalRouting(\n    _ToastRawInstance: ToastNotificationInterface.IToastNotificationRawState\n  ): boolean {\n    if (this.isRefListAvailable()) {\n      this.sendToProduction(_ToastRawInstance);\n      return true;\n    } else {\n      this.sendToBuffer(_ToastRawInstance);\n      return false;\n    }\n  }\n\n  sendToBuffer(\n    _ToastRawInstance: ToastNotificationInterface.IToastNotificationRawState\n  ) {\n    this.bufferToastRawList.push(_ToastRawInstance);\n  }\n\n  sendToProduction(\n    _ToastRawInstance: ToastNotificationInterface.IToastNotificationRawState\n  ): void {\n    const componentRef = this.getComponentRef(_ToastRawInstance);\n    if (componentRef) {\n      this.toastComponentRefList.push(componentRef);\n      componentRef.instance.toastNotificationBelonging =\n        _ToastRawInstance.ToastBelonging;\n      this.appendToBodyParentComponent(componentRef);\n    }\n  }\n\n  isRefListAvailable(): boolean {\n    return (\n      this.toastComponentRefList.length <\n      this.toastConfig.productionConfig.GlobalSettings\n        .AllowedNotificationsAtOnce\n    );\n  }\n\n  prepareRawToast(\n    _EventsController: ToastNotificationClass.ToastNotificationEventsController,\n    _ToastNotificationBelonging: ToastNotificationClass.ToastNotificationBelonging\n  ): ToastNotificationInterface.IToastNotificationRawState {\n    const weakMap = new WeakMap();\n    weakMap.set(\n      ToastNotificationClass.ToastNotificationEventsController,\n      _EventsController\n    );\n\n    return {\n      WeakMap: weakMap,\n      ToastBelonging: _ToastNotificationBelonging,\n    };\n  }\n\n  getComponentRef(\n    _ToastNotificationRawState: ToastNotificationInterface.IToastNotificationRawState\n  ): ComponentRef<any> | null {\n    const dialogIndex = this.findDialogIndex(\n      _ToastNotificationRawState.ToastBelonging.EntityUniqueID\n    );\n    if (dialogIndex === -1) {\n      let toastUserViewComponent: Type<any> = ToastNotificationWrapperComponent;\n      if (\n        _ToastNotificationRawState.ToastBelonging.ToastCoreConfig\n          .ToastUserViewType === ToastUserViewTypeEnum.SIMPLE\n      ) {\n        toastUserViewComponent = ToastNotificationSimpleWrapperComponent;\n      }\n      const componentFactory = this.componentFactoryResolver.resolveComponentFactory(\n        toastUserViewComponent\n      );\n      return componentFactory.create(\n        new DialogInjector(this.injector, _ToastNotificationRawState.WeakMap)\n      );\n    }\n    return null;\n  }\n\n  listeners(\n    _EventsController: ToastNotificationClass.ToastNotificationEventsController\n  ) {\n    // Listener for closing dialog\n    const closeDialogSubscription = _EventsController.afterClosed$.subscribe(\n      (response) => {\n        // this.removeFromBodyParentComponent(modalIndex);\n        this.removeFromBody(response.toastNotificationBelonging.EntityUniqueID);\n        closeDialogSubscription.unsubscribe();\n      }\n    );\n  }\n\n  appendToBodyParentComponent(_ComponentRef: ComponentRef<any>): void {\n    // attach view to ignite lifecycle hooks\n    this.appRef.attachView(_ComponentRef.hostView);\n\n    const toastPosition: ToastPositionEnum =\n      _ComponentRef.instance.toastNotificationBelonging.ToastCoreConfig\n        .ToastPosition;\n    const openInElementID =\n      _ComponentRef.instance.toastNotificationBelonging.ToastCoreConfig\n        .OpenInElementID;\n    let targetNode: HTMLElement;\n    if (!openInElementID) {\n      this.setToastWrapperNode(\n        _ComponentRef.instance.toastNotificationBelonging.ToastCoreConfig\n          .ToastPosition,\n        this.setToastOverlayNode()\n      );\n      targetNode = document.getElementById(`toast-wrapper-${toastPosition}`);\n    } else {\n      targetNode = document.getElementById(openInElementID);\n    }\n\n    const domElem = (_ComponentRef.hostView as EmbeddedViewRef<any>)\n      .rootNodes[0] as HTMLElement;\n\n    const toastEntity = document.createElement(\"div\");\n    toastEntity.setAttribute(\n      \"id\",\n      _ComponentRef.instance.toastNotificationBelonging.EntityUniqueID\n    );\n    toastEntity.className = \"toast-entity\";\n    const split = toastPosition.split(\"-\");\n    if (split[1] === \"fullwidth\") {\n      toastEntity.style.width = \"93vw\";\n    } else if (openInElementID) {\n      toastEntity.style.width = \"100%\";\n    } else {\n      toastEntity.style.width = \"300px\";\n    }\n    toastEntity.style.margin = \"auto\";\n    toastEntity.prepend(domElem);\n    // targetNode.prepend(toastEntity);\n    setTimeout(() => {\n      targetNode.prepend(toastEntity);\n    }, 200);\n  }\n\n  removeFromBody(_EntityUniqueID: string): void {\n    const modalIndex = this.findDialogIndex(_EntityUniqueID);\n    if (modalIndex > -1) {\n      if (this.bufferToastRawList.length) {\n        this.sendToProduction(this.bufferToastRawList[0]);\n        this.bufferToastRawList.splice(0, 1);\n      }\n\n      this.toastComponentRefList[modalIndex].instance\n        .closeParent$(\"close-fast\")\n        .pipe(\n          map((item) => {\n            const modalIndex = this.findDialogIndex(_EntityUniqueID);\n            if (this.toastComponentRefList[modalIndex]) {\n              const toastEntity = document.getElementById(\n                this.toastComponentRefList[modalIndex].instance\n                  .toastNotificationBelonging.EntityUniqueID\n              );\n              toastEntity.remove();\n              // console.log(`%c ${this.toastComponentRefList[modalIndex].instance.toastNotificationBelonging.EntityUniqueID} `, `background: #cc3333; color: #fff`);\n              this.appRef.detachView(\n                this.toastComponentRefList[modalIndex].hostView\n              );\n              this.toastComponentRefList[modalIndex].destroy();\n              this.toastComponentRefList.splice(modalIndex, 1);\n            }\n          })\n        )\n        .subscribe();\n    }\n  }\n\n  findDialogIndex(_DialogUniqueID: string): number {\n    return this.toastComponentRefList.findIndex((item) => {\n      return (\n        _DialogUniqueID ===\n        item.instance.toastNotificationBelonging.EntityUniqueID\n      );\n    });\n  }\n\n  private setToastOverlayNode(): HTMLElement {\n    const bodyNode = document.body || document.getElementsByTagName(\"body\")[0];\n    if (!bodyNode) {\n      return;\n    }\n    // check the overlay\n    let toastOverlayNode = document.getElementById(\n      \"toast-overlay-container\"\n    ) as HTMLStyleElement;\n\n    if (!toastOverlayNode) {\n      let toastOverlayNode = document.createElement(\"div\");\n      toastOverlayNode.setAttribute(\"id\", \"toast-overlay-container\");\n      toastOverlayNode.appendChild(document.createTextNode(\"\"));\n      toastOverlayNode.style.position = \"fixed\";\n      toastOverlayNode.style.top = \"0\";\n      toastOverlayNode.style.left = \"0\";\n      toastOverlayNode.style.zIndex = \"999999999\";\n      bodyNode.appendChild(toastOverlayNode);\n      return toastOverlayNode;\n    }\n\n    return toastOverlayNode;\n  }\n\n  private setToastWrapperNode(\n    _Position: ToastPositionEnum,\n    _ToastOverlayNode: HTMLElement\n  ) {\n    let toastWrapperNode = document.getElementById(\n      `toast-wrapper-${_Position}`\n    ) as HTMLStyleElement;\n    if (!toastWrapperNode) {\n      const toastWrapper = document.createElement(\"div\");\n      toastWrapper.setAttribute(\"id\", \"toast-wrapper-\" + _Position);\n      toastWrapper.appendChild(document.createTextNode(\"\"));\n      _ToastOverlayNode.prepend(toastWrapper);\n\n      const split = _Position.split(\"-\");\n\n      if (split[1] === \"right\" || split[1] === \"left\") {\n        this.gConfigService\n          .getSheet(\"ngx-awesome-popup-styles\")\n          .addRule(\n            `#toast-wrapper-${_Position}`,\n            `${split[0]}: 20px; ${split[1]}: 20px; position: fixed; z-index: 999999;`\n          );\n      }\n      if (split[1] === \"center\") {\n        this.gConfigService\n          .getSheet(\"ngx-awesome-popup-styles\")\n          .addRule(\n            `#toast-wrapper-${_Position}`,\n            `${split[0]}: 20px; width: 100%; position: fixed; z-index: 999999; pointer-events: none;`\n          );\n      }\n      if (split[1] === \"fullwidth\") {\n        this.gConfigService\n          .getSheet(\"ngx-awesome-popup-styles\")\n          .addRule(\n            `#toast-wrapper-${_Position}`,\n            `${split[0]}: 10px; width: 100%; position: fixed; z-index: 999999; pointer-events: none;`\n          );\n      }\n    }\n  }\n}\n","import { Observable, Subject } from \"rxjs\";\nimport { map, take, tap } from \"rxjs/operators\";\nimport { DialogLayoutDisplay, VerticalPosition } from \"../../../core/enums\";\nimport { GlobalClass, GlobalInterface } from \"../../../core/global\";\nimport { ServiceLocator } from \"../../../locator.service\";\nimport { ToastNotificationConfigService } from \"./toast-notification-config.service\";\nimport { ToastNotificationService } from \"./toast-notification.service\";\n\nexport namespace ToastNotificationInterface {\n  export interface IToastNotificationUserConfig {\n    Buttons?: GlobalInterface.IButton[];\n    ToastCoreConfig?: ToastNotificationInterface.IToastCoreConfig;\n    Dispatch?: GlobalInterface.IDispatch;\n    GlobalSettings?: ToastNotificationInterface.IGlobalToastSettings;\n  }\n\n  export interface IGlobalToastSettings {\n    /** Number of popups allowed on screen, recommend 3-5 */\n    AllowedNotificationsAtOnce: number;\n  }\n\n  export interface IToastCoreConfig {\n    ToastPosition?: ToastPositionEnum;\n    ProgressBar?: ToastProgressBarEnum;\n    ToastUserViewType?: ToastUserViewTypeEnum;\n    OpenInElementID?: string;\n    ButtonPosition?: VerticalPosition;\n    TextPosition?: VerticalPosition;\n    LayoutType?: DialogLayoutDisplay;\n    Dispatch?: GlobalInterface.IDispatch;\n    /** Default confirm button Label */\n    ConfirmLabel?: string;\n    /** Default decline button Label */\n    DeclineLabel?: string;\n    /** Expressed in milliseconds */\n    AutoCloseDelay?: number;\n    DisableIcon?: boolean;\n    AllowHTMLMessage?: boolean;\n  }\n\n  export interface IToastNotificationBelonging {\n    Buttons: GlobalInterface.IButton[];\n    ToastCoreConfig: ToastNotificationInterface.IToastCoreConfig;\n    EntityUniqueID: string;\n    EventsController: ToastNotificationClass.ToastNotificationEventsController;\n  }\n\n  export interface IToastNotificationResponse {\n    setSuccess(_IsSuccess: boolean): void;\n\n    setClickedButtonID(_ClickedButtonID): void;\n  }\n\n  export interface IToastNotificationPublicResponse {\n    Success: boolean;\n    ClickedButtonID: string;\n  }\n\n  export interface IPrivateResponseMerged\n    extends IToastNotificationResponse,\n      GlobalInterface.IPrivateResponse {\n    toastNotificationBelonging: ToastNotificationInterface.IToastNotificationBelonging;\n  }\n\n  export interface IToastNotificationRawState {\n    WeakMap: WeakMap<\n      any,\n      ToastNotificationClass.ToastNotificationEventsController\n    >;\n    ToastBelonging: ToastNotificationClass.ToastNotificationBelonging;\n  }\n}\n\nexport namespace ToastNotificationClass {\n  // region *** Public ***\n  export class ToastNotificationInitializer {\n    private toastNotificationCarrier: ToastNotificationClass.ToastNotificationCarrier = new ToastNotificationClass.ToastNotificationCarrier();\n\n    constructor() {}\n\n    openToastNotification$(): Observable<ToastNotificationInterface.IToastNotificationPublicResponse> {\n      return this.toastNotificationCarrier.openToastNotification$().pipe(\n        map((resp) => {\n          const basicToastNotificationResponse = new ToastNotificationResponse();\n          const dataControl = new GlobalClass.DataControl();\n          dataControl.copyValuesFrom(resp, basicToastNotificationResponse);\n          return basicToastNotificationResponse;\n        }),\n        take(1)\n      );\n    }\n\n    setButtons(_Buttons: GlobalInterface.IButton[]): void {\n      this.toastNotificationCarrier.setButtons(_Buttons);\n    }\n\n    setConfig(\n      _ToastNotificationConfig: ToastNotificationInterface.IToastCoreConfig\n    ) {\n      this.toastNotificationCarrier.setConfig(_ToastNotificationConfig);\n    }\n\n    setDispatch(_Title: string, _Message: string = null): void {\n      this.toastNotificationCarrier.setTitle(_Title);\n      this.toastNotificationCarrier.setMessage(_Message);\n    }\n\n    setTitle(_Title: string): void {\n      this.toastNotificationCarrier.setTitle(_Title);\n    }\n\n    setMessage(_Message: string): void {\n      this.toastNotificationCarrier.setMessage(_Message);\n    }\n\n    setButtonLabels(_Confirm: string, _Decline?: string): void {\n      this.toastNotificationCarrier.setButtonLabels(_Confirm, _Decline);\n    }\n  }\n\n  export class ToastNotificationResponse\n    extends GlobalClass.DataControl\n    implements\n      ToastNotificationInterface.IToastNotificationResponse,\n      ToastNotificationInterface.IToastNotificationPublicResponse {\n    // private Response: DialogPrepareResponse            = new DialogPrepareResponse();\n\n    Success: boolean = null;\n    ClickedButtonID: string = null;\n\n    constructor() {\n      super();\n    }\n\n    setSuccess(_IsSuccess: boolean): void {\n      this.Success = _IsSuccess;\n    }\n\n    setClickedButtonID(_ClickedButtonID): void {\n      this.ClickedButtonID = _ClickedButtonID;\n    }\n  }\n\n  export class ToastNotificationEventsController {\n    defaultResponse: ToastNotificationInterface.IPrivateResponseMerged;\n\n    private readonly _afterClosed: Subject<ToastNotificationInterface.IPrivateResponseMerged> = new Subject<ToastNotificationInterface.IPrivateResponseMerged>();\n    afterClosed$: Observable<ToastNotificationInterface.IPrivateResponseMerged> = this._afterClosed.asObservable();\n    private readonly _onButtonClick: Subject<GlobalInterface.IButton> = new Subject<GlobalInterface.IButton>();\n    onButtonClick$: Observable<GlobalInterface.IButton> = this._onButtonClick.asObservable();\n    private readonly _buttonList: Subject<\n      GlobalInterface.IButton[]\n    > = new Subject<GlobalInterface.IButton[]>();\n    buttonList$: Observable<\n      GlobalInterface.IButton[]\n    > = this._buttonList.asObservable();\n\n    constructor(private EntityUniqueID: string) {}\n\n    close(_Response?: ToastNotificationInterface.IPrivateResponseMerged): void {\n      const response = _Response ? _Response : this.defaultResponse;\n      this._afterClosed.next(response);\n    }\n\n    onButtonClick(_Button: GlobalInterface.IButton): void {\n      this.defaultResponse.setClickedButtonID(_Button.ID);\n      this._onButtonClick.next(_Button);\n    }\n\n    setButtonList(_ButtonList: GlobalInterface.IButton[]): void {\n      this._buttonList.next(_ButtonList);\n    }\n\n    setDefaultResponse(\n      _Response: ToastNotificationInterface.IPrivateResponseMerged\n    ): void {\n      this.defaultResponse = _Response;\n    }\n  }\n\n  // endregion\n\n  export class ToastNotificationDefaultResponse\n    extends ToastNotificationResponse\n    implements ToastNotificationInterface.IPrivateResponseMerged {\n    toastNotificationBelonging: ToastNotificationBelonging = null;\n\n    constructor() {\n      super();\n    }\n\n    setBelonging(_ToastNotificationBelonging): void {\n      this.toastNotificationBelonging = _ToastNotificationBelonging;\n    }\n  }\n\n  export class ToastNotificationCarrier {\n    toastNotificationBelonging: ToastNotificationClass.ToastNotificationBelonging = new ToastNotificationClass.ToastNotificationBelonging();\n\n    constructor() {}\n\n    setButtons(_Buttons: GlobalInterface.IButton[]) {\n      if (_Buttons.length) {\n        this.toastNotificationBelonging.Buttons = _Buttons;\n      }\n    }\n\n    setTitle(_Title: string): void {\n      this.toastNotificationBelonging.Dispatch.Title = _Title;\n    }\n\n    setMessage(_Message: string): void {\n      this.toastNotificationBelonging.Dispatch.Message = _Message;\n    }\n\n    setButtonLabels(_Confirm: string, _Decline: string): void {\n      this.toastNotificationBelonging.ToastCoreConfig.ConfirmLabel = _Confirm;\n      this.toastNotificationBelonging.ToastCoreConfig.DeclineLabel = _Decline;\n    }\n\n    setConfig(\n      _ToastNotificationBelonging: ToastNotificationInterface.IToastCoreConfig\n    ) {\n      // region *** local UserConfig (defined on place where dialog is called) ***\n      const dataControl = new GlobalClass.DataControl();\n      dataControl.copyValuesFrom(\n        _ToastNotificationBelonging,\n        this.toastNotificationBelonging.ToastCoreConfig\n      );\n      // endregion\n    }\n\n    openToastNotification$(): Observable<ToastNotificationInterface.IPrivateResponseMerged> {\n      if (\n        !this.toastNotificationBelonging.Dispatch.Title &&\n        !this.toastNotificationBelonging.Dispatch.Message\n      ) {\n        throw Error(\n          \"Toast notification can not be without both message and title.\"\n        );\n      }\n      const service: ToastNotificationService = ServiceLocator.injector.get(\n        ToastNotificationService\n      );\n      return service.openToast$(this.toastNotificationBelonging);\n    }\n  }\n\n  export class GlobalToastSettings\n    implements ToastNotificationInterface.IGlobalToastSettings {\n    AllowedNotificationsAtOnce: number = null;\n  }\n\n  export class ResetToastGlobalSettings {\n    constructor(\n      globalToastConfig?: ToastNotificationInterface.IGlobalToastSettings\n    ) {\n      const globalToastConfigService: ToastNotificationConfigService = ServiceLocator.injector.get(\n        ToastNotificationConfigService\n      );\n      if (globalToastConfigService) {\n        globalToastConfigService.setResetGlobalToastConfig(globalToastConfig);\n      } else {\n        globalToastConfigService.setResetGlobalToastConfig();\n      }\n    }\n  }\n\n  export class Settings {\n    Buttons: GlobalInterface.IButton[] = [];\n    ToastCoreConfig: ToastNotificationInterface.IToastCoreConfig = new ToastCoreConfig();\n    Dispatch: GlobalInterface.IDispatch = new GlobalClass.Dispatch();\n    GlobalSettings: GlobalToastSettings = new GlobalToastSettings();\n  }\n\n  export class ToastCoreConfig\n    implements ToastNotificationInterface.IToastCoreConfig {\n    ToastPosition: ToastPositionEnum = null;\n    ProgressBar: ToastProgressBarEnum = null;\n    ToastUserViewType: ToastUserViewTypeEnum = null;\n    OpenInElementID: string = null;\n    ButtonPosition: VerticalPosition = null;\n    TextPosition: VerticalPosition = null;\n    LayoutType: DialogLayoutDisplay = null;\n    Dispatch: GlobalInterface.IDispatch = null;\n    ConfirmLabel: string = null;\n    DeclineLabel: string = null;\n    AutoCloseDelay: number = null;\n    DisableIcon: boolean = null;\n    AllowHTMLMessage: boolean = null;\n  }\n\n  export class ToastNotificationBelonging\n    extends ToastNotificationClass.Settings\n    implements ToastNotificationInterface.IToastNotificationBelonging {\n    EntityUniqueID: string = \"T\" + Math.random().toString(36).substr(2, 9);\n    EventsController: ToastNotificationEventsController;\n\n    constructor() {\n      super();\n      this.EventsController = new ToastNotificationEventsController(\n        this.EntityUniqueID\n      );\n      const toastNotificationConfigurator: ToastNotificationConfigService = ServiceLocator.injector.get(\n        ToastNotificationConfigService\n      );\n      const baseSettings = new ToastNotificationClass.Settings();\n      const dataControl = new GlobalClass.DataControl();\n      dataControl.copyValuesFrom(\n        toastNotificationConfigurator.productionConfig.ToastCoreConfig,\n        baseSettings.ToastCoreConfig\n      );\n      this.ToastCoreConfig = baseSettings.ToastCoreConfig;\n      this.Buttons = toastNotificationConfigurator.productionConfig.Buttons.slice();\n    }\n  }\n}\n\nexport enum ToastProgressBarEnum {\n  NONE = 0,\n  INCREASE = 1,\n  DECREASE = 2,\n}\n\nexport enum ToastPositionEnum {\n  TOP_LEFT = \"top-left\",\n  TOP_CENTER = \"top-center\",\n  TOP_RIGHT = \"top-right\",\n  TOP_FULL_WIDTH = \"top-fullwidth\",\n  BOTTOM_LEFT = \"bottom-left\",\n  BOTTOM_CENTER = \"bottom-center\",\n  BOTTOM_RIGHT = \"bottom-right\",\n  BOTTOM_FULL_WIDTH = \"bottom-fullwidth\",\n}\n\nexport enum ToastUserViewTypeEnum {\n  SIMPLE = \"simple\",\n  STANDARD = \"standard\",\n}\n","import { CommonModule } from '@angular/common';\nimport { Injector, ModuleWithProviders, NgModule } from '@angular/core';\nimport { BrowserModule } from '@angular/platform-browser';\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations';\nimport { GlobalInterface } from './core/global';\nimport { GlobalConfigService } from './core/global-config.service';\nimport { InsertionLoaderDirective } from './core/insertion-loader.directive';\nimport { InsertionDirective } from './core/insertion.directive';\nimport { DefaultLoaderComponent } from './default-loader/default-loader.component';\nimport { ServiceLocator } from './locator.service';\nimport { ConfirmBoxWrapperComponent } from './types/confirm-box/confirm-box-wrapper/confirm-box-wrapper.component';\nimport { ConfirmBoxConfigService } from './types/confirm-box/core/confirm-box-config.service';\nimport { ConfirmBoxService } from './types/confirm-box/core/confirm-box-service';\nimport {\n  ConfirmBoxClass,\n  ConfirmBoxInterface\n} from './types/confirm-box/core/model';\nimport { DialogConfigService } from './types/dialog/core/dialog-config.service';\nimport { DialogService } from './types/dialog/core/dialog.service';\nimport { DialogClass, DialogInterface } from './types/dialog/core/model';\nimport { DialogWrapperComponent } from './types/dialog/dialog-wrapper/dialog-wrapper.component';\nimport {\n  ToastNotificationClass,\n  ToastNotificationInterface\n} from './types/toast-notification/core/model';\nimport { ToastNotificationConfigService } from './types/toast-notification/core/toast-notification-config.service';\nimport { ToastNotificationService } from './types/toast-notification/core/toast-notification.service';\nimport { ToastNotificationSimpleWrapperComponent } from './types/toast-notification/toast-notification-simple-wrapper/toast-notification-simple-wrapper.component';\nimport { ToastNotificationWrapperComponent } from './types/toast-notification/toast-notification-wrapper/toast-notification-wrapper.component';\n\n@NgModule({\n  declarations: [\n    DialogWrapperComponent,\n    InsertionDirective,\n    InsertionLoaderDirective,\n    DefaultLoaderComponent,\n    ConfirmBoxWrapperComponent,\n    ToastNotificationWrapperComponent,\n    ToastNotificationSimpleWrapperComponent\n  ],\n  imports: [CommonModule, BrowserModule, BrowserAnimationsModule],\n  providers: [\n    DialogService,\n    ConfirmBoxService,\n    ToastNotificationService,\n    GlobalConfigService,\n    DialogConfigService,\n    ConfirmBoxConfigService,\n    ToastNotificationConfigService,\n    DialogClass.DialogBelonging,\n    ConfirmBoxClass.ConfirmBoxBelonging,\n    ToastNotificationClass.ToastNotificationBelonging\n  ],\n  entryComponents: [\n    DialogWrapperComponent,\n    DefaultLoaderComponent,\n    ConfirmBoxWrapperComponent,\n    ToastNotificationWrapperComponent,\n    ToastNotificationSimpleWrapperComponent\n  ]\n})\nexport class NgxAwesomePopupModule {\n  constructor(\n    private injector: Injector,\n    private gConfigService: GlobalConfigService\n  ) {\n    ServiceLocator.injector = injector;\n  }\n\n  static forRoot(\n    globalConfig?: GlobalInterface.IGlobalUserConfig\n  ): ModuleWithProviders<NgxAwesomePopupModule> {\n    return {\n      ngModule: NgxAwesomePopupModule,\n      providers: [{ provide: GlobalConfigService, useValue: globalConfig }]\n    };\n  }\n}\n\n@NgModule({})\nexport class DialogConfigModule {\n  static forRoot(\n    dialogConfig?: DialogInterface.IDialogUserConfig\n  ): ModuleWithProviders<DialogConfigModule> {\n    return {\n      ngModule: DialogConfigModule,\n      providers: [\n        DialogConfigService,\n        { provide: 'dialogConfig', useValue: dialogConfig, multi: true }\n      ]\n    };\n  }\n}\n// @dynamic\n@NgModule({})\nexport class ConfirmBoxConfigModule {\n  static forRoot(\n    confirmBoxConfig?: ConfirmBoxInterface.IConfirmBoxUserConfig\n  ): ModuleWithProviders<ConfirmBoxConfigModule> {\n    return {\n      ngModule: ConfirmBoxConfigModule,\n      providers: [\n        ConfirmBoxConfigService,\n        { provide: 'confirmBoxConfig', useValue: confirmBoxConfig || {} }\n      ]\n    };\n  }\n}\n\n@NgModule({})\nexport class ToastNotificationConfigModule {\n  static forRoot(\n    toastNotificationConfig?: ToastNotificationInterface.IToastNotificationUserConfig\n  ): ModuleWithProviders<ToastNotificationConfigModule> {\n    return {\n      ngModule: ToastNotificationConfigModule,\n      providers: [\n        ToastNotificationConfigService,\n        {\n          provide: 'toastNotificationConfig',\n          useValue: toastNotificationConfig,\n          multi: true\n        }\n      ]\n    };\n  }\n}\n","import { GlobalClass, GlobalInterface } from \"./ngx-awesome-popup/core/global\";\nimport {\n  ConfirmBoxClass,\n  ConfirmBoxInterface,\n} from \"./ngx-awesome-popup/types/confirm-box/core/model\";\nimport {\n  DialogClass,\n  DialogInterface,\n} from \"./ngx-awesome-popup/types/dialog/core/model\";\nimport {\n  ToastNotificationClass,\n  ToastNotificationInterface,\n  ToastPositionEnum,\n  ToastUserViewTypeEnum,\n} from \"./ngx-awesome-popup/types/toast-notification/core/model\";\nimport ConfirmBoxInitializer = ConfirmBoxClass.ConfirmBoxInitializer;\nimport IConfirmBoxCoreConfig = ConfirmBoxInterface.IConfirmBoxCoreConfig;\n\nimport IConfirmBoxPublicResponse = ConfirmBoxInterface.IConfirmBoxPublicResponse;\nimport IConfirmBoxUserConfig = ConfirmBoxInterface.IConfirmBoxUserConfig;\nimport DialogBelonging = DialogClass.DialogBelonging;\nimport DialogInitializer = DialogClass.DialogInitializer;\nimport IDialogCoreConfig = DialogInterface.IDialogCoreConfig;\n\nimport IDialogEventsController = DialogInterface.IDialogEventsController;\nimport IDialogPublicResponse = DialogInterface.IDialogPublicResponse;\nimport IDialogUserConfig = DialogInterface.IDialogUserConfig;\nimport ButtonMaker = GlobalClass.ButtonMaker;\nimport ResetGlobalConfig = GlobalClass.ResetGlobalConfig;\n\nimport IButton = GlobalInterface.IButton;\nimport IColorTypes = GlobalInterface.IColorTypes;\nimport IDispatch = GlobalInterface.IDispatch;\nimport IGlobalUserConfig = GlobalInterface.IGlobalUserConfig;\nimport ResetToastGlobalSettings = ToastNotificationClass.ResetToastGlobalSettings;\nimport ToastNotificationInitializer = ToastNotificationClass.ToastNotificationInitializer;\nimport IGlobalToastSettings = ToastNotificationInterface.IGlobalToastSettings;\nimport IToastCoreConfig = ToastNotificationInterface.IToastCoreConfig;\n\nimport IToastNotificationPublicResponse = ToastNotificationInterface.IToastNotificationPublicResponse;\nimport IToastNotificationUserConfig = ToastNotificationInterface.IToastNotificationUserConfig;\n\n// region *** Interface ***\nexport { IGlobalUserConfig };\nexport { IButton };\nexport { IDispatch };\nexport { IColorTypes };\n\nexport { IConfirmBoxUserConfig };\nexport { IConfirmBoxCoreConfig };\nexport { IConfirmBoxPublicResponse };\n\nexport { IGlobalToastSettings };\nexport { IToastCoreConfig };\nexport { IToastNotificationUserConfig };\nexport { IToastNotificationPublicResponse };\n\nexport { IDialogUserConfig };\nexport { IDialogCoreConfig };\nexport { IDialogPublicResponse };\nexport { IDialogEventsController };\n// endregion\n\nexport { ButtonLayoutDisplay } from \"./ngx-awesome-popup/core/enums\";\nexport { DialogLayoutDisplay } from \"./ngx-awesome-popup/core/enums\";\nexport { VerticalPosition } from \"./ngx-awesome-popup/core/enums\";\nexport { ToastPositionEnum } from \"./ngx-awesome-popup/types/toast-notification/core/model\";\nexport { ToastProgressBarEnum } from \"./ngx-awesome-popup/types/toast-notification/core/model\";\nexport { ToastUserViewTypeEnum } from \"./ngx-awesome-popup/types/toast-notification/core/model\";\n\n/**\n * @returns It will return custom button object ready to be used in child component layout.\n */\nexport { ButtonMaker };\n\n/**\n *```typescript\n * // Instantiate config object as example below to change global settings on-fly it takes IGlobalUserConfig\n * as the argument.\n * new ResetGlobalConfig({\n *     ColorList: {\n *            Primary  : '#ff9e00', // optional\n *            Secondary: '#989ea5', // optional\n *            Info     : '#2f8ee5', // optional\n *            Success  : '#3caea3', // optional\n *            Warning  : '#ffc107', // optional\n *            Danger   : '#e46464', // optional\n *            Light    : '#fbfbfb', // optional\n *            Dark     : '#343a40'  // optional\n *           }\n * })\n * ```\n */\nexport { ResetGlobalConfig };\n\n/**\n *```typescript\n * // Instantiate toast global config object as example below to change global settings on-fly it takes IGlobalToastSettings\n * as the argument.\n * new ResetToastGlobalSettings({\n *     AllowedNotificationsAtOnce: 2\n * })\n * ```\n */\nexport { ResetToastGlobalSettings };\n\n/**\n * This is the class that needs to be added as DI in the constructor of a child component that will be\n * opened dynamically with {@link DialogInitializer}. It contains various information or\n * event controllers, and listeners that can be used in a child component. Also, there is custom data\n * that is sent from component where the {@link DialogInitializer} is. User can set specific type of\n * custom data that child component will receive by including it as generic type.\n *\n *\n * Example:\n * ```typescript\n *import {DialogBelonging} from 'ngx-awesome-popup';\n *@Component({\n *    selector   : 'app-cup',\n *    templateUrl: './cup.component.html',\n *    styleUrls  : ['./cup.component.scss']\n *})\n * export class CupComponent implements OnInit, OnDestroy {\n *\n *    subscriptions: Subscription[] = [];\n *\n *    constructor(private dialogBelonging: DialogBelonging) {\n *    }\n *\n *    ngOnInit(): void {\n *    console.log(this.dialogBelonging);\n *\n *        this.subscriptions.push(\n *            this.dialogBelonging.EventsController.onButtonClick$.subscribe((_Button) => {\n *            if (_Button.ID === 'ok') {\n *                // Do some logic and close popup.\n *                this.dialogBelonging.EventsController.close();\n *            } else if (_Button.ID === 'cancel') {\n *                // Do some logic and close popup.\n *                this.dialogBelonging.EventsController.close();\n *            }\n *        })\n *        );\n *\n *        setTimeout(() => {\n *            // Close loader after async data is ready.\n *            this.dialogBelonging.EventsController.closeLoader();\n *        }, 1000);\n *    }\n *}\n\n ngOnDestroy(): void {\n        // Close all subscriptions.\n        this.subscriptions.forEach(sub => sub.unsubscribe());\n    }\n * ```\n * @category child dynamic component data & event controller\n */\nexport { DialogBelonging };\n\n// region *** Observable response after closing popup ***\n/**\n * Regular description\n *\n * @category Observable response after closing popup\n */\nexport { IToastNotificationPublicResponse as IToastNotificationResponse };\n/**\n * Regular description\n *\n * @category Observable response after closing popup\n */\nexport { IConfirmBoxPublicResponse as IConfirmBoxResponse };\n/**\n * Regular description\n *\n * @category Observable response after closing popup\n */\nexport { IDialogPublicResponse as IDialogResponse };\n// endregion\n\n// region *** Popup open  ***\n\n/**\n * This is the class that needs to be instantiated to set up and ignite a ToastNotification,\n * its purpose is to show short notification to end-user, or even interact with user.\n * It can be evoked from any angular typescript file.\n *\n * Below is the example with (some optional) user configuration,\n * it will override default configuration from app.module.\n *\n *\n * Example:\n * ```typescript\n * // Create the initializer.\n *const newToastNotification = new ToastNotificationInitializer();\n *\n * // Set desired Title.\n *newToastNotification.setTitle('Warning!');\n *\n * // Set desired Message.\n *newToastNotification.setMessage('Form is not valid!');\n *\n * // Set desired configuration.\n *newToastNotification.setConfig({\n *      LayoutType: DialogLayoutDisplay.WARNING\n *   });\n\n * // Open a ToastNotification.\n * newConfirmBox.openConfirmBox$().subscribe(resp => {\n *   console.log('confirmBox response: ', resp);\n *  });\n * ```\n * * IToastCoreConfig: {@link IToastCoreConfig}\n * * LayoutType: {@link DialogLayoutDisplay}\n * * IToastNotificationPublicResponse: {@link IToastNotificationPublicResponse}\n * @category Popup open\n */\nexport { ToastNotificationInitializer };\n/**\n * This is the class that needs to be instantiated to set up and ignite a ConfirmBox and create content.\n * Its purpose is to get confirmation response from end-user. It can be called from any angular\n * typescript file.\n *\n * Below is example with (some optional) user configuration,\n * it will override default configuration from app.module.\n *\n *\n * Example:\n * ```typescript\n * // Create the initializer.\n *const newConfirmBox = new ConfirmBoxInitializer();\n *\n * // Set desired dispatch: _Title: string, _Message: string.\n *newConfirmBox.setDispatch('Are you sure?', 'That action will delete user!');\n *\n * // Set desired configuration.\n *newConfirmBox.setConfig({\n *      LayoutType: DialogLayoutDisplay.DANGER\n *   });\n *\n * // Set button labels.\n * newConfirmBox.setButtonLabels('YES', 'NO');\n *\n * // Open a ConfirmBox, and get clicked button-id in response.\n * newConfirmBox.openConfirmBox$().subscribe(resp => {\n *   // IConfirmBoxPublicResponse\n *   console.log('confirmBox response: ', resp);\n *  });\n * ```\n * * IConfirmBoxCoreConfig: {@link IConfirmBoxCoreConfig}\n * * LayoutType: {@link DialogLayoutDisplay}\n * * IConfirmBoxPublicResponse: {@link IConfirmBoxPublicResponse}\n * @category Popup open\n */\nexport { ConfirmBoxInitializer };\n/**\n * This is the class that needs to be instantiated to set up and ignite a Dialog and create dynamic component,\n * its purpose is to render any angular component view with specific configuration from any angular typescript file.\n * Dynamic component means that user can evoke the popup from typescript and component view\n * is dynamically created with the Awesome Popup engine. There is no need to call any selector in HTML to create component view.\n *\n * DialogInitializer can send data to child component (dynamic component) where data will be accessible with {@link DialogBelonging}.\n *\n * Below is the example with (some optional) user configuration,\n * it will override default configuration from app.module.\n *\n *\n * Example:\n * ```typescript\n *  import {DialogInitializer, DialogLayoutDisplay, ButtonMaker, ButtonLayoutDisplay} from 'ngx-awesome-popup';<\n *  import {CupComponent} from './cup/cup.component';\n *\n *  const newDialogPopup = new DialogInitializer(CupComponent); // Any Angular component.\n *\n *  // Custom data will be sent to dynamic component available in dialogBelonging object.\n *  newDialogPopup.setCustomData({name: 'John', surname: 'Doe', id: 1});\n *\n *  // Local config settings IDialogCoreConfig.\n *  newDialogPopup.setConfig({\n *      Height: '500px',\n *      LayoutType: DialogLayoutDisplay.INFO,\n *      LoaderComponent: Any Angular component name\n *       });\n *\n *  // Custom buttons, listener is available in child component in dialogBelonging object.\n *  newDialogPopup.setButtons([\n *      new ButtonMaker('Ok', 'ok', ButtonLayoutDisplay.PRIMARY),\n *      new ButtonMaker('Cancel', 'cancel', ButtonLayoutDisplay.SECONDARY)\n *  ]);\n *\n *  // Command to open dialog, it returns observable.\n *  newDialogPopup.openDialog$<any>().subscribe(resp => {\n *           console.log('response: ', resp.Payload);\n *       });\n * ```\n * * IDialogCoreConfig: {@link IDialogCoreConfig}\n * * LayoutType: {@link DialogLayoutDisplay}\n * * ButtonLayoutDisplay: {@link ButtonLayoutDisplay}\n * * ButtonMaker: {@link ButtonMaker}\n * * IDialogPublicResponse: {@link IDialogPublicResponse}\n * @category Popup open\n */\nexport { DialogInitializer };\n// endregion\n\n// region *** Imports for angular app.module ***\n/**\n * This is the main module of the library, it is crucial to be added within angular.app\n * imports as an example with optional argument, look: {@link IGlobalUserConfig}\n *\n * ```typescript\n * // app.module imports:\n * NgxAwesomePopupModule.forRoot({\n *     ColorList: {\n *            Primary  : '#ff9e00', // optional\n *            Secondary: '#989ea5', // optional\n *            Info     : '#2f8ee5', // optional\n *            Success  : '#3caea3', // optional\n *            Warning  : '#ffc107', // optional\n *            Danger   : '#e46464', // optional\n *            Light    : '#fbfbfb', // optional\n *            Dark     : '#343a40'  // optional\n *           }\n * })\n * ```\n * @category Imports for angular app.module\n */\nexport { NgxAwesomePopupModule } from \"./ngx-awesome-popup/ngx-awesome-popup.module\";\n/**\n * This is the module that ignites dynamic dialog modal, its purpose is to load any angular component in\n * dialog window. Dynamic component means that user can evoke any Angular component in the popup just from typescript. Component view\n * is dynamically created with the library engine and there is no need to call any selector in HTML to create component view.\n *\n * It is crucial for user to add this module in angular.app imports.\n * Below is the example with (optional) default user configuration, that is what will be in setup if there is no\n * local config when popup is evoked, that means it can be overridden directly when popup is called.\n * For implementation look: {@link IDialogUserConfig}.\n *\n * Example:\n * ```typescript\n * // app.module imports:\n *DialogConfigModule.forRoot({\n *     DialogCoreConfig: {\n *        Width        : '500px',\n *        ButtonPosition: 'right',\n *        LayoutType: DialogLayoutDisplay.INFO,\n *        LoaderComponent: // Any angular component class name can be included as a loader.\n *     },\n *     Buttons: [\n *        new ButtonMaker('Ok', 'ok', ButtonLayoutDisplay.PRIMARY),\n *        new ButtonMaker('Cancel', 'cancel', ButtonLayoutDisplay.SECONDARY)\n *     ],\n * })\n * ```\n * * DialogCoreConfig.LayoutType: {@link DialogLayoutDisplay}\n * * ButtonLayoutDisplay: {@link ButtonLayoutDisplay}\n * * ButtonMaker: {@link ButtonMaker}\n * @category Imports for angular app.module\n */\nexport { DialogConfigModule } from \"./ngx-awesome-popup/ngx-awesome-popup.module\";\n/**\n * This is the module that ignites Confirm box dialog, its purpose is to show popup in a\n * small dialog window in the middle of the screen. User can provide title, message and include buttons.\n * Confirm box is available in predefined layout types (enums): {@link DialogLayoutDisplay}.\n *\n * It is crucial for user to add this module in angular.app imports.\n * Below is the example with (optional) default user configuration, that's what will be used if there is no\n * local config when popup is evoked, that means it can be overridden directly when popup is evoked.\n * For implementation look: {@link IConfirmBoxUserConfig}.\n *\n * Example:\n * ```typescript\n * // app.module imports:\n *ConfirmBoxConfigModule.forRoot({\n *    ConfirmBoxCoreConfig: {\n *       Width: '700px',\n *       LayoutType: DialogLayoutDisplay.DANGER,\n *       ButtonPosition: 'center'\n *    },\n *    Dispatch: {  // Optional default dispatch object.\n *       Title: 'Default title',\n *       Message: 'Default message'\n *    },\n *    Buttons     : [\n *       new ButtonMaker('Ok', 'ok', ButtonLayoutDisplay.PRIMARY),\n *       new ButtonMaker('Cancel', 'cancel', ButtonLayoutDisplay.SECONDARY)\n *    ]\n * })\n * ```\n * * ConfirmBoxCoreConfig: {@link IConfirmBoxCoreConfig}\n * * Dispatch: {@link IDispatch}\n * * Buttons: {@link IButton}\n * * ButtonMaker: {@link ButtonMaker}\n * @category Imports for angular app.module\n */\nexport { ConfirmBoxConfigModule } from \"./ngx-awesome-popup/ngx-awesome-popup.module\";\n/**\n * This is the module that ignites Toast notifications dialog, its purpose is to show toast popup in a\n * small dialog window in the corner of the screen. User can provide title and message and include buttons, or setup auto disappearing.\n * Toast notifications are available in predefined layout types (enums): {@link DialogLayoutDisplay}.\n *\n * It is crucial for user to add this module in angular.app imports.\n * Below is the example with (optional) default user configuration, that's what will be used if there is no\n * local config when popup is evoked, that means it can be overridden directly when popup is evoked.\n * For implementation look: {@link IToastNotificationUserConfig}.\n *\n * Example:\n * ```typescript\n * // app.module imports:\n *ToastNotificationConfigModule.forRoot({\n *    ToastCoreConfig: {\n *       // Milliseconds it will be ignored if buttons are included.\n *       AutoCloseDelay: 3000\n *    },\n *    GlobalSettings: {\n *       // The number of toast notifications that can be shown at once.\n *       AllowedNotificationsAtOnce: 4\n *    },\n *    // Optional default dispatch object.\n *    Dispatch: {\n *      Title: 'Default title',\n *      Message: 'Default message'\n *   },\n *   Buttons: [\n *      new ButtonMaker('Ok', 'ok', ButtonLayoutDisplay.PRIMARY),\n *      new ButtonMaker('Cancel', 'cancel', ButtonLayoutDisplay.SECONDARY)\n *   ]\n *})\n * ```\n * * ToastCoreConfig: {@link IToastCoreConfig}\n * * GlobalSettings: {@link IGlobalToastSettings}\n * * Dispatch: {@link IDispatch}\n * * Buttons: {@link IButton}\n * * ButtonMaker: {@link ButtonMaker}\n * @category Imports for angular app.module\n */\nexport { ToastNotificationConfigModule } from \"./ngx-awesome-popup/ngx-awesome-popup.module\";\n// endregion\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public_api';\n\nexport {fadeInOut as ɵb} from './ngx-awesome-popup/core/animations';\nexport {GlobalInterface as ɵm} from './ngx-awesome-popup/core/global';\nexport {GlobalConfigService as ɵl} from './ngx-awesome-popup/core/global-config.service';\nexport {InsertionLoaderDirective as ɵd} from './ngx-awesome-popup/core/insertion-loader.directive';\nexport {InsertionDirective as ɵc} from './ngx-awesome-popup/core/insertion.directive';\nexport {DefaultLoaderComponent as ɵf} from './ngx-awesome-popup/default-loader/default-loader.component';\nexport {ConfirmBoxWrapperComponent as ɵg} from './ngx-awesome-popup/types/confirm-box/confirm-box-wrapper/confirm-box-wrapper.component';\nexport {ConfirmBoxConfigService as ɵv} from './ngx-awesome-popup/types/confirm-box/core/confirm-box-config.service';\nexport {ConfirmBoxService as ɵp} from './ngx-awesome-popup/types/confirm-box/core/confirm-box-service';\nexport {ConfirmBoxClass as ɵh,ConfirmBoxInterface as ɵw} from './ngx-awesome-popup/types/confirm-box/core/model';\nexport {DialogConfigService as ɵt} from './ngx-awesome-popup/types/dialog/core/dialog-config.service';\nexport {DialogService as ɵo} from './ngx-awesome-popup/types/dialog/core/dialog.service';\nexport {DialogClass as ɵe,DialogInterface as ɵu} from './ngx-awesome-popup/types/dialog/core/model';\nexport {DialogWrapperComponent as ɵa} from './ngx-awesome-popup/types/dialog/dialog-wrapper/dialog-wrapper.component';\nexport {ToastNotificationClass as ɵk,ToastNotificationInterface as ɵs} from './ngx-awesome-popup/types/toast-notification/core/model';\nexport {ToastNotificationConfigService as ɵr} from './ngx-awesome-popup/types/toast-notification/core/toast-notification-config.service';\nexport {ToastNotificationService as ɵq} from './ngx-awesome-popup/types/toast-notification/core/toast-notification.service';\nexport {WrapperAbstraction as ɵj} from './ngx-awesome-popup/types/toast-notification/core/wrapper-abstraction';\nexport {ToastNotificationSimpleWrapperComponent as ɵn} from './ngx-awesome-popup/types/toast-notification/toast-notification-simple-wrapper/toast-notification-simple-wrapper.component';\nexport {ToastNotificationWrapperComponent as ɵi} from './ngx-awesome-popup/types/toast-notification/toast-notification-wrapper/toast-notification-wrapper.component';"],"names":[],"mappings":"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"}