import { Subject } from 'rxjs';
import { map, take } from 'rxjs/operators';
import { DataControl, Dispatch } from '../../../core/global-classes';
import { ServiceLocator } from '../../../locator.service';
import { ToastNotificationConfigService } from './toast-notification-config.service';
import { ToastNotificationService } from './toast-notification.service';
// region *** Public ***
export class ToastNotificationInitializer {
    constructor() {
        this.toastNotificationCarrier = new ToastNotificationCarrier();
    }
    openToastNotification$() {
        return this.toastNotificationCarrier.openToastNotification$().pipe(map(resp => {
            const basicToastNotificationResponse = new ToastNotificationResponse();
            const dataControl = new DataControl();
            dataControl.copyValuesFrom(resp, basicToastNotificationResponse);
            return basicToastNotificationResponse;
        }), take(1));
    }
    setButtons(_Buttons) {
        this.toastNotificationCarrier.setButtons(_Buttons);
    }
    setConfig(_ToastNotificationConfig) {
        this.toastNotificationCarrier.setConfig(_ToastNotificationConfig);
    }
    setDispatch(_Title, _Message = null) {
        this.toastNotificationCarrier.setTitle(_Title);
        this.toastNotificationCarrier.setMessage(_Message);
    }
    setTitle(_Title) {
        this.toastNotificationCarrier.setTitle(_Title);
    }
    setMessage(_Message) {
        this.toastNotificationCarrier.setMessage(_Message);
    }
    setButtonLabels(_Confirm, _Decline) {
        this.toastNotificationCarrier.setButtonLabels(_Confirm, _Decline);
    }
}
export class ToastNotificationResponse extends DataControl {
    constructor() {
        super();
        // private Response: DialogPrepareResponse            = new DialogPrepareResponse();
        this.Success = null;
        this.ClickedButtonID = null;
    }
    setSuccess(_IsSuccess) {
        this.Success = _IsSuccess;
    }
    setClickedButtonID(_ClickedButtonID) {
        this.ClickedButtonID = _ClickedButtonID;
    }
}
export class ToastNotificationEventsController {
    constructor(EntityUniqueID) {
        this.EntityUniqueID = EntityUniqueID;
        this._afterClosed = new Subject();
        this.afterClosed$ = this._afterClosed.asObservable();
        this._onButtonClick = new Subject();
        this.onButtonClick$ = this._onButtonClick.asObservable();
        this._buttonList = new Subject();
        this.buttonList$ = this._buttonList.asObservable();
    }
    close(_Response) {
        const response = _Response ? _Response : this.defaultResponse;
        this._afterClosed.next(response);
    }
    onButtonClick(_Button) {
        this.defaultResponse.setClickedButtonID(_Button.ID);
        this._onButtonClick.next(_Button);
    }
    setButtonList(_ButtonList) {
        this._buttonList.next(_ButtonList);
    }
    setDefaultResponse(_Response) {
        this.defaultResponse = _Response;
    }
}
// endregion
export class ToastNotificationDefaultResponse extends ToastNotificationResponse {
    constructor() {
        super();
        this.toastNotificationBelonging = null;
    }
    setBelonging(_ToastNotificationBelonging) {
        this.toastNotificationBelonging = _ToastNotificationBelonging;
    }
}
export class ToastNotificationCarrier {
    constructor() {
        this.toastNotificationBelonging = new ToastNotificationBelonging();
    }
    setButtons(_Buttons) {
        if (_Buttons.length) {
            this.toastNotificationBelonging.Buttons = _Buttons;
        }
    }
    setTitle(_Title) {
        this.toastNotificationBelonging.Dispatch.Title = _Title;
    }
    setMessage(_Message) {
        this.toastNotificationBelonging.Dispatch.Message = _Message;
    }
    setButtonLabels(_Confirm, _Decline) {
        this.toastNotificationBelonging.ToastCoreConfig.ConfirmLabel = _Confirm;
        this.toastNotificationBelonging.ToastCoreConfig.DeclineLabel = _Decline;
    }
    setConfig(_ToastNotificationBelonging) {
        // region *** local UserConfig (defined on place where dialog is called) ***
        const dataControl = new DataControl();
        dataControl.copyValuesFrom(_ToastNotificationBelonging, this.toastNotificationBelonging.ToastCoreConfig);
        // endregion
    }
    openToastNotification$() {
        if (!this.toastNotificationBelonging.Dispatch.Title && !this.toastNotificationBelonging.Dispatch.Message) {
            throw Error('Toast notification can not be without both message and title.');
        }
        const service = ServiceLocator.injector.get(ToastNotificationService);
        return service.openToast$(this.toastNotificationBelonging);
    }
}
export class GlobalToastSettings {
    constructor() {
        this.AllowedNotificationsAtOnce = null;
    }
}
export class ResetToastGlobalSettings {
    constructor(globalToastConfig) {
        const globalToastConfigService = ServiceLocator.injector.get(ToastNotificationConfigService);
        if (globalToastConfigService) {
            globalToastConfigService.setResetGlobalToastConfig(globalToastConfig);
        }
        else {
            globalToastConfigService.setResetGlobalToastConfig();
        }
    }
}
export class ToastSettings {
    constructor() {
        this.Buttons = [];
        this.ToastCoreConfig = new ToastCoreConfig();
        this.Dispatch = new Dispatch();
        this.GlobalSettings = new GlobalToastSettings();
    }
}
export class ToastCustomStyles {
    constructor() {
        this.TitleCSS = null;
        this.TextCSS = null;
        this.ButtonSectionCSS = null;
        this.ButtonCSS = null;
    }
}
export class ToastCoreConfig {
    constructor() {
        this.ToastPosition = null;
        this.ProgressBar = null;
        this.ToastUserViewType = null;
        this.OpenInElementID = null;
        this.ButtonPosition = null;
        this.TextPosition = null;
        this.LayoutType = null;
        this.Dispatch = null;
        this.ConfirmLabel = null;
        this.DeclineLabel = null;
        this.AutoCloseDelay = null;
        this.DisableIcon = null;
        this.AllowHTMLMessage = null;
        this.AnimationIn = null;
        this.AnimationOut = null;
        this.CustomStyles = new ToastCustomStyles();
    }
}
export class ToastNotificationBelonging extends ToastSettings {
    constructor() {
        super();
        this.EntityUniqueID = 'T' + Math.random().toString(36).substr(2, 9);
        this.EventsController = new ToastNotificationEventsController(this.EntityUniqueID);
        const toastNotificationConfigurator = ServiceLocator.injector.get(ToastNotificationConfigService);
        const baseSettings = new ToastSettings();
        const dataControl = new DataControl();
        dataControl.copyValuesFrom(toastNotificationConfigurator.productionConfig.ToastCoreConfig, baseSettings.ToastCoreConfig);
        this.ToastCoreConfig = baseSettings.ToastCoreConfig;
        this.Buttons = toastNotificationConfigurator.productionConfig.Buttons.slice();
    }
}
//# sourceMappingURL=data:application/json;base64,