import { Subject } from 'rxjs';
import { map, take } from 'rxjs/operators';
import { DataControl, Dispatch } from '../../../core/global-classes';
import { ServiceLocator } from '../../../locator.service';
import { ToastNotificationConfigService } from './toast-notification-config.service';
import { ToastNotificationService } from './toast-notification.service';
// region *** Public ***
export class ToastNotificationInitializer {
    constructor() {
        this.toastNotificationCarrier = new ToastNotificationCarrier();
    }
    openToastNotification$() {
        return this.toastNotificationCarrier.openToastNotification$().pipe(map(resp => {
            const basicToastNotificationResponse = new ToastNotificationResponse();
            const dataControl = new DataControl();
            dataControl.copyValuesFrom(resp, basicToastNotificationResponse);
            return basicToastNotificationResponse;
        }), take(1));
    }
    setButtons(_Buttons) {
        this.toastNotificationCarrier.setButtons(_Buttons);
    }
    setConfig(_ToastNotificationConfig) {
        this.toastNotificationCarrier.setConfig(_ToastNotificationConfig);
    }
    setDispatch(_Title, _Message = null) {
        this.toastNotificationCarrier.setTitle(_Title);
        this.toastNotificationCarrier.setMessage(_Message);
    }
    setTitle(_Title) {
        this.toastNotificationCarrier.setTitle(_Title);
    }
    setMessage(_Message) {
        this.toastNotificationCarrier.setMessage(_Message);
    }
    setButtonLabels(_Confirm, _Decline) {
        this.toastNotificationCarrier.setButtonLabels(_Confirm, _Decline);
    }
}
export class ToastNotificationResponse extends DataControl {
    constructor() {
        super();
        // private Response: DialogPrepareResponse            = new DialogPrepareResponse();
        this.Success = null;
        this.ClickedButtonID = null;
    }
    setSuccess(_IsSuccess) {
        this.Success = _IsSuccess;
    }
    setClickedButtonID(_ClickedButtonID) {
        this.ClickedButtonID = _ClickedButtonID;
    }
}
export class ToastNotificationEventsController {
    constructor(EntityUniqueID) {
        this.EntityUniqueID = EntityUniqueID;
        this._afterClosed = new Subject();
        this.afterClosed$ = this._afterClosed.asObservable();
        this._onButtonClick = new Subject();
        this.onButtonClick$ = this._onButtonClick.asObservable();
        this._buttonList = new Subject();
        this.buttonList$ = this._buttonList.asObservable();
    }
    close(_Response) {
        const response = _Response ? _Response : this.defaultResponse;
        this._afterClosed.next(response);
    }
    onButtonClick(_Button) {
        this.defaultResponse.setClickedButtonID(_Button.ID);
        this._onButtonClick.next(_Button);
    }
    setButtonList(_ButtonList) {
        this._buttonList.next(_ButtonList);
    }
    setDefaultResponse(_Response) {
        this.defaultResponse = _Response;
    }
}
// endregion
export class ToastNotificationDefaultResponse extends ToastNotificationResponse {
    constructor() {
        super();
        this.toastNotificationBelonging = null;
    }
    setBelonging(_ToastNotificationBelonging) {
        this.toastNotificationBelonging = _ToastNotificationBelonging;
    }
}
export class ToastNotificationCarrier {
    constructor() {
        this.toastNotificationBelonging = new ToastNotificationBelonging();
    }
    setButtons(_Buttons) {
        if (_Buttons.length) {
            this.toastNotificationBelonging.Buttons = _Buttons;
        }
    }
    setTitle(_Title) {
        this.toastNotificationBelonging.Dispatch.Title = _Title;
    }
    setMessage(_Message) {
        this.toastNotificationBelonging.Dispatch.Message = _Message;
    }
    setButtonLabels(_Confirm, _Decline) {
        this.toastNotificationBelonging.ToastCoreConfig.ConfirmLabel = _Confirm;
        this.toastNotificationBelonging.ToastCoreConfig.DeclineLabel = _Decline;
    }
    setConfig(_ToastNotificationBelonging) {
        // region *** local UserConfig (defined on place where dialog is called) ***
        const dataControl = new DataControl();
        dataControl.copyValuesFrom(_ToastNotificationBelonging, this.toastNotificationBelonging.ToastCoreConfig);
        // endregion
    }
    openToastNotification$() {
        if (!this.toastNotificationBelonging.Dispatch.Title &&
            !this.toastNotificationBelonging.Dispatch.Message) {
            throw Error('Toast notification can not be without both message and title.');
        }
        const service = ServiceLocator.injector.get(ToastNotificationService);
        return service.openToast$(this.toastNotificationBelonging);
    }
}
export class GlobalToastSettings {
    constructor() {
        this.AllowedNotificationsAtOnce = null;
    }
}
export class ResetToastGlobalSettings {
    constructor(globalToastConfig) {
        const globalToastConfigService = ServiceLocator.injector.get(ToastNotificationConfigService);
        if (globalToastConfigService) {
            globalToastConfigService.setResetGlobalToastConfig(globalToastConfig);
        }
        else {
            globalToastConfigService.setResetGlobalToastConfig();
        }
    }
}
export class ToastSettings {
    constructor() {
        this.Buttons = [];
        this.ToastCoreConfig = new ToastCoreConfig();
        this.Dispatch = new Dispatch();
        this.GlobalSettings = new GlobalToastSettings();
    }
}
export class ToastCoreConfig {
    constructor() {
        this.ToastPosition = null;
        this.ProgressBar = null;
        this.ToastUserViewType = null;
        this.OpenInElementID = null;
        this.ButtonPosition = null;
        this.TextPosition = null;
        this.LayoutType = null;
        this.Dispatch = null;
        this.ConfirmLabel = null;
        this.DeclineLabel = null;
        this.AutoCloseDelay = null;
        this.DisableIcon = null;
        this.AllowHTMLMessage = null;
    }
}
export class ToastNotificationBelonging extends ToastSettings {
    constructor() {
        super();
        this.EntityUniqueID = 'T' + Math.random().toString(36).substr(2, 9);
        this.EventsController = new ToastNotificationEventsController(this.EntityUniqueID);
        const toastNotificationConfigurator = ServiceLocator.injector.get(ToastNotificationConfigService);
        const baseSettings = new ToastSettings();
        const dataControl = new DataControl();
        dataControl.copyValuesFrom(toastNotificationConfigurator.productionConfig.ToastCoreConfig, baseSettings.ToastCoreConfig);
        this.ToastCoreConfig = baseSettings.ToastCoreConfig;
        this.Buttons = toastNotificationConfigurator.productionConfig.Buttons.slice();
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2xhc3Nlcy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uL25neC1hd2Vzb21lLXBvcHVwL3R5cGVzL3RvYXN0LW5vdGlmaWNhdGlvbi9jb3JlL2NsYXNzZXMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFjLE9BQU8sRUFBRSxNQUFNLE1BQU0sQ0FBQztBQUMzQyxPQUFPLEVBQUUsR0FBRyxFQUFFLElBQUksRUFBRSxNQUFNLGdCQUFnQixDQUFDO0FBRTNDLE9BQU8sRUFBRSxXQUFXLEVBQUUsUUFBUSxFQUFFLE1BQU0sOEJBQThCLENBQUM7QUFFckUsT0FBTyxFQUFFLGNBQWMsRUFBRSxNQUFNLDBCQUEwQixDQUFDO0FBYzFELE9BQU8sRUFBRSw4QkFBOEIsRUFBRSxNQUFNLHFDQUFxQyxDQUFDO0FBQ3JGLE9BQU8sRUFBRSx3QkFBd0IsRUFBRSxNQUFNLDhCQUE4QixDQUFDO0FBRXhFLHdCQUF3QjtBQUN4QixNQUFNLE9BQU8sNEJBQTRCO0lBR3ZDO1FBRlEsNkJBQXdCLEdBQTZCLElBQUksd0JBQXdCLEVBQUUsQ0FBQztJQUU3RSxDQUFDO0lBRWhCLHNCQUFzQjtRQUNwQixPQUFPLElBQUksQ0FBQyx3QkFBd0IsQ0FBQyxzQkFBc0IsRUFBRSxDQUFDLElBQUksQ0FDaEUsR0FBRyxDQUFDLElBQUksQ0FBQyxFQUFFO1lBQ1QsTUFBTSw4QkFBOEIsR0FBRyxJQUFJLHlCQUF5QixFQUFFLENBQUM7WUFDdkUsTUFBTSxXQUFXLEdBQUcsSUFBSSxXQUFXLEVBQUUsQ0FBQztZQUN0QyxXQUFXLENBQUMsY0FBYyxDQUFDLElBQUksRUFBRSw4QkFBOEIsQ0FBQyxDQUFDO1lBQ2pFLE9BQU8sOEJBQThCLENBQUM7UUFDeEMsQ0FBQyxDQUFDLEVBQ0YsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUNSLENBQUM7SUFDSixDQUFDO0lBRUQsVUFBVSxDQUFDLFFBQW1CO1FBQzVCLElBQUksQ0FBQyx3QkFBd0IsQ0FBQyxVQUFVLENBQUMsUUFBUSxDQUFDLENBQUM7SUFDckQsQ0FBQztJQUVELFNBQVMsQ0FBQyx3QkFBMEM7UUFDbEQsSUFBSSxDQUFDLHdCQUF3QixDQUFDLFNBQVMsQ0FBQyx3QkFBd0IsQ0FBQyxDQUFDO0lBQ3BFLENBQUM7SUFFRCxXQUFXLENBQUMsTUFBYyxFQUFFLFdBQW1CLElBQUk7UUFDakQsSUFBSSxDQUFDLHdCQUF3QixDQUFDLFFBQVEsQ0FBQyxNQUFNLENBQUMsQ0FBQztRQUMvQyxJQUFJLENBQUMsd0JBQXdCLENBQUMsVUFBVSxDQUFDLFFBQVEsQ0FBQyxDQUFDO0lBQ3JELENBQUM7SUFFRCxRQUFRLENBQUMsTUFBYztRQUNyQixJQUFJLENBQUMsd0JBQXdCLENBQUMsUUFBUSxDQUFDLE1BQU0sQ0FBQyxDQUFDO0lBQ2pELENBQUM7SUFFRCxVQUFVLENBQUMsUUFBZ0I7UUFDekIsSUFBSSxDQUFDLHdCQUF3QixDQUFDLFVBQVUsQ0FBQyxRQUFRLENBQUMsQ0FBQztJQUNyRCxDQUFDO0lBRUQsZUFBZSxDQUFDLFFBQWdCLEVBQUUsUUFBaUI7UUFDakQsSUFBSSxDQUFDLHdCQUF3QixDQUFDLGVBQWUsQ0FBQyxRQUFRLEVBQUUsUUFBUSxDQUFDLENBQUM7SUFDcEUsQ0FBQztDQUNGO0FBRUQsTUFBTSxPQUFPLHlCQUNYLFNBQVEsV0FBVztJQU9uQjtRQUNFLEtBQUssRUFBRSxDQUFDO1FBTlYsb0ZBQW9GO1FBRXBGLFlBQU8sR0FBWSxJQUFJLENBQUM7UUFDeEIsb0JBQWUsR0FBVyxJQUFJLENBQUM7SUFJL0IsQ0FBQztJQUVELFVBQVUsQ0FBQyxVQUFtQjtRQUM1QixJQUFJLENBQUMsT0FBTyxHQUFHLFVBQVUsQ0FBQztJQUM1QixDQUFDO0lBRUQsa0JBQWtCLENBQUMsZ0JBQWdCO1FBQ2pDLElBQUksQ0FBQyxlQUFlLEdBQUcsZ0JBQWdCLENBQUM7SUFDMUMsQ0FBQztDQUNGO0FBRUQsTUFBTSxPQUFPLGlDQUFpQztJQVU1QyxZQUFvQixjQUFzQjtRQUF0QixtQkFBYyxHQUFkLGNBQWMsQ0FBUTtRQVB6QixpQkFBWSxHQUFvQyxJQUFJLE9BQU8sRUFBMEIsQ0FBQztRQUN2RyxpQkFBWSxHQUF1QyxJQUFJLENBQUMsWUFBWSxDQUFDLFlBQVksRUFBRSxDQUFDO1FBQ25FLG1CQUFjLEdBQXFCLElBQUksT0FBTyxFQUFXLENBQUM7UUFDM0UsbUJBQWMsR0FBd0IsSUFBSSxDQUFDLGNBQWMsQ0FBQyxZQUFZLEVBQUUsQ0FBQztRQUN4RCxnQkFBVyxHQUF1QixJQUFJLE9BQU8sRUFBYSxDQUFDO1FBQzVFLGdCQUFXLEdBQTBCLElBQUksQ0FBQyxXQUFXLENBQUMsWUFBWSxFQUFFLENBQUM7SUFFeEIsQ0FBQztJQUU5QyxLQUFLLENBQUMsU0FBa0M7UUFDdEMsTUFBTSxRQUFRLEdBQUcsU0FBUyxDQUFDLENBQUMsQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxlQUFlLENBQUM7UUFDOUQsSUFBSSxDQUFDLFlBQVksQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUM7SUFDbkMsQ0FBQztJQUVELGFBQWEsQ0FBQyxPQUFnQjtRQUM1QixJQUFJLENBQUMsZUFBZSxDQUFDLGtCQUFrQixDQUFDLE9BQU8sQ0FBQyxFQUFFLENBQUMsQ0FBQztRQUNwRCxJQUFJLENBQUMsY0FBYyxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQztJQUNwQyxDQUFDO0lBRUQsYUFBYSxDQUFDLFdBQXNCO1FBQ2xDLElBQUksQ0FBQyxXQUFXLENBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxDQUFDO0lBQ3JDLENBQUM7SUFFRCxrQkFBa0IsQ0FBQyxTQUFpQztRQUNsRCxJQUFJLENBQUMsZUFBZSxHQUFHLFNBQVMsQ0FBQztJQUNuQyxDQUFDO0NBQ0Y7QUFFRCxZQUFZO0FBRVosTUFBTSxPQUFPLGdDQUNYLFNBQVEseUJBQXlCO0lBSWpDO1FBQ0UsS0FBSyxFQUFFLENBQUM7UUFIViwrQkFBMEIsR0FBK0IsSUFBSSxDQUFDO0lBSTlELENBQUM7SUFFRCxZQUFZLENBQUMsMkJBQTJCO1FBQ3RDLElBQUksQ0FBQywwQkFBMEIsR0FBRywyQkFBMkIsQ0FBQztJQUNoRSxDQUFDO0NBQ0Y7QUFFRCxNQUFNLE9BQU8sd0JBQXdCO0lBR25DO1FBRkEsK0JBQTBCLEdBQStCLElBQUksMEJBQTBCLEVBQUUsQ0FBQztJQUUzRSxDQUFDO0lBRWhCLFVBQVUsQ0FBQyxRQUFtQjtRQUM1QixJQUFJLFFBQVEsQ0FBQyxNQUFNLEVBQUU7WUFDbkIsSUFBSSxDQUFDLDBCQUEwQixDQUFDLE9BQU8sR0FBRyxRQUFRLENBQUM7U0FDcEQ7SUFDSCxDQUFDO0lBRUQsUUFBUSxDQUFDLE1BQWM7UUFDckIsSUFBSSxDQUFDLDBCQUEwQixDQUFDLFFBQVEsQ0FBQyxLQUFLLEdBQUcsTUFBTSxDQUFDO0lBQzFELENBQUM7SUFFRCxVQUFVLENBQUMsUUFBZ0I7UUFDekIsSUFBSSxDQUFDLDBCQUEwQixDQUFDLFFBQVEsQ0FBQyxPQUFPLEdBQUcsUUFBUSxDQUFDO0lBQzlELENBQUM7SUFFRCxlQUFlLENBQUMsUUFBZ0IsRUFBRSxRQUFnQjtRQUNoRCxJQUFJLENBQUMsMEJBQTBCLENBQUMsZUFBZSxDQUFDLFlBQVksR0FBRyxRQUFRLENBQUM7UUFDeEUsSUFBSSxDQUFDLDBCQUEwQixDQUFDLGVBQWUsQ0FBQyxZQUFZLEdBQUcsUUFBUSxDQUFDO0lBQzFFLENBQUM7SUFFRCxTQUFTLENBQUMsMkJBQTZDO1FBQ3JELDRFQUE0RTtRQUM1RSxNQUFNLFdBQVcsR0FBRyxJQUFJLFdBQVcsRUFBRSxDQUFDO1FBQ3RDLFdBQVcsQ0FBQyxjQUFjLENBQ3hCLDJCQUEyQixFQUMzQixJQUFJLENBQUMsMEJBQTBCLENBQUMsZUFBZSxDQUNoRCxDQUFDO1FBQ0YsWUFBWTtJQUNkLENBQUM7SUFFRCxzQkFBc0I7UUFDcEIsSUFDRSxDQUFDLElBQUksQ0FBQywwQkFBMEIsQ0FBQyxRQUFRLENBQUMsS0FBSztZQUMvQyxDQUFDLElBQUksQ0FBQywwQkFBMEIsQ0FBQyxRQUFRLENBQUMsT0FBTyxFQUNqRDtZQUNBLE1BQU0sS0FBSyxDQUNULCtEQUErRCxDQUNoRSxDQUFDO1NBQ0g7UUFDRCxNQUFNLE9BQU8sR0FBNkIsY0FBYyxDQUFDLFFBQVEsQ0FBQyxHQUFHLENBQ25FLHdCQUF3QixDQUN6QixDQUFDO1FBQ0YsT0FBTyxPQUFPLENBQUMsVUFBVSxDQUFDLElBQUksQ0FBQywwQkFBMEIsQ0FBQyxDQUFDO0lBQzdELENBQUM7Q0FDRjtBQUVELE1BQU0sT0FBTyxtQkFBbUI7SUFBaEM7UUFDRSwrQkFBMEIsR0FBVyxJQUFJLENBQUM7SUFDNUMsQ0FBQztDQUFBO0FBRUQsTUFBTSxPQUFPLHdCQUF3QjtJQUNuQyxZQUFZLGlCQUF3QztRQUNsRCxNQUFNLHdCQUF3QixHQUFtQyxjQUFjLENBQUMsUUFBUSxDQUFDLEdBQUcsQ0FDMUYsOEJBQThCLENBQy9CLENBQUM7UUFDRixJQUFJLHdCQUF3QixFQUFFO1lBQzVCLHdCQUF3QixDQUFDLHlCQUF5QixDQUFDLGlCQUFpQixDQUFDLENBQUM7U0FDdkU7YUFBTTtZQUNMLHdCQUF3QixDQUFDLHlCQUF5QixFQUFFLENBQUM7U0FDdEQ7SUFDSCxDQUFDO0NBQ0Y7QUFFRCxNQUFNLE9BQU8sYUFBYTtJQUExQjtRQUNFLFlBQU8sR0FBYyxFQUFFLENBQUM7UUFDeEIsb0JBQWUsR0FBcUIsSUFBSSxlQUFlLEVBQUUsQ0FBQztRQUMxRCxhQUFRLEdBQWMsSUFBSSxRQUFRLEVBQUUsQ0FBQztRQUNyQyxtQkFBYyxHQUF3QixJQUFJLG1CQUFtQixFQUFFLENBQUM7SUFDbEUsQ0FBQztDQUFBO0FBRUQsTUFBTSxPQUFPLGVBQWU7SUFBNUI7UUFDRSxrQkFBYSxHQUFzQixJQUFJLENBQUM7UUFDeEMsZ0JBQVcsR0FBeUIsSUFBSSxDQUFDO1FBQ3pDLHNCQUFpQixHQUEwQixJQUFJLENBQUM7UUFDaEQsb0JBQWUsR0FBVyxJQUFJLENBQUM7UUFDL0IsbUJBQWMsR0FBcUIsSUFBSSxDQUFDO1FBQ3hDLGlCQUFZLEdBQXFCLElBQUksQ0FBQztRQUN0QyxlQUFVLEdBQXdCLElBQUksQ0FBQztRQUN2QyxhQUFRLEdBQWMsSUFBSSxDQUFDO1FBQzNCLGlCQUFZLEdBQVcsSUFBSSxDQUFDO1FBQzVCLGlCQUFZLEdBQVcsSUFBSSxDQUFDO1FBQzVCLG1CQUFjLEdBQVcsSUFBSSxDQUFDO1FBQzlCLGdCQUFXLEdBQVksSUFBSSxDQUFDO1FBQzVCLHFCQUFnQixHQUFZLElBQUksQ0FBQztJQUNuQyxDQUFDO0NBQUE7QUFFRCxNQUFNLE9BQU8sMEJBQ1gsU0FBUSxhQUFhO0lBS3JCO1FBQ0UsS0FBSyxFQUFFLENBQUM7UUFKVixtQkFBYyxHQUFXLEdBQUcsR0FBRyxJQUFJLENBQUMsTUFBTSxFQUFFLENBQUMsUUFBUSxDQUFDLEVBQUUsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUM7UUFLckUsSUFBSSxDQUFDLGdCQUFnQixHQUFHLElBQUksaUNBQWlDLENBQzNELElBQUksQ0FBQyxjQUFjLENBQ3BCLENBQUM7UUFDRixNQUFNLDZCQUE2QixHQUFtQyxjQUFjLENBQUMsUUFBUSxDQUFDLEdBQUcsQ0FDL0YsOEJBQThCLENBQy9CLENBQUM7UUFDRixNQUFNLFlBQVksR0FBRyxJQUFJLGFBQWEsRUFBRSxDQUFDO1FBQ3pDLE1BQU0sV0FBVyxHQUFHLElBQUksV0FBVyxFQUFFLENBQUM7UUFDdEMsV0FBVyxDQUFDLGNBQWMsQ0FDeEIsNkJBQTZCLENBQUMsZ0JBQWdCLENBQUMsZUFBZSxFQUM5RCxZQUFZLENBQUMsZUFBZSxDQUM3QixDQUFDO1FBQ0YsSUFBSSxDQUFDLGVBQWUsR0FBRyxZQUFZLENBQUMsZUFBZSxDQUFDO1FBQ3BELElBQUksQ0FBQyxPQUFPLEdBQUcsNkJBQTZCLENBQUMsZ0JBQWdCLENBQUMsT0FBTyxDQUFDLEtBQUssRUFBRSxDQUFDO0lBQ2hGLENBQUM7Q0FDRiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE9ic2VydmFibGUsIFN1YmplY3QgfSBmcm9tICdyeGpzJztcbmltcG9ydCB7IG1hcCwgdGFrZSB9IGZyb20gJ3J4anMvb3BlcmF0b3JzJztcbmltcG9ydCB7IERpYWxvZ0xheW91dERpc3BsYXksIFZlcnRpY2FsUG9zaXRpb24gfSBmcm9tICcuLi8uLi8uLi9jb3JlL2VudW1zJztcbmltcG9ydCB7IERhdGFDb250cm9sLCBEaXNwYXRjaCB9IGZyb20gJy4uLy4uLy4uL2NvcmUvZ2xvYmFsLWNsYXNzZXMnO1xuaW1wb3J0IHsgSUJ1dHRvbiwgSURpc3BhdGNoIH0gZnJvbSAnLi4vLi4vLi4vY29yZS9nbG9iYWwtaW50ZXJmYWNlcyc7XG5pbXBvcnQgeyBTZXJ2aWNlTG9jYXRvciB9IGZyb20gJy4uLy4uLy4uL2xvY2F0b3Iuc2VydmljZSc7XG5pbXBvcnQge1xuICBUb2FzdFBvc2l0aW9uRW51bSxcbiAgVG9hc3RQcm9ncmVzc0JhckVudW0sXG4gIFRvYXN0VXNlclZpZXdUeXBlRW51bVxufSBmcm9tICcuL2VudW1zJztcbmltcG9ydCB7XG4gIElHbG9iYWxUb2FzdFNldHRpbmdzLFxuICBJUHJpdmF0ZVJlc3BvbnNlTWVyZ2VkLFxuICBJVG9hc3RDb3JlQ29uZmlnLFxuICBJVG9hc3ROb3RpZmljYXRpb25CZWxvbmdpbmcsXG4gIElUb2FzdE5vdGlmaWNhdGlvblB1YmxpY1Jlc3BvbnNlLFxuICBJVG9hc3ROb3RpZmljYXRpb25SZXNwb25zZVxufSBmcm9tICcuL2ludGVyZmFjZXMnO1xuaW1wb3J0IHsgVG9hc3ROb3RpZmljYXRpb25Db25maWdTZXJ2aWNlIH0gZnJvbSAnLi90b2FzdC1ub3RpZmljYXRpb24tY29uZmlnLnNlcnZpY2UnO1xuaW1wb3J0IHsgVG9hc3ROb3RpZmljYXRpb25TZXJ2aWNlIH0gZnJvbSAnLi90b2FzdC1ub3RpZmljYXRpb24uc2VydmljZSc7XG5cbi8vIHJlZ2lvbiAqKiogUHVibGljICoqKlxuZXhwb3J0IGNsYXNzIFRvYXN0Tm90aWZpY2F0aW9uSW5pdGlhbGl6ZXIge1xuICBwcml2YXRlIHRvYXN0Tm90aWZpY2F0aW9uQ2FycmllcjogVG9hc3ROb3RpZmljYXRpb25DYXJyaWVyID0gbmV3IFRvYXN0Tm90aWZpY2F0aW9uQ2FycmllcigpO1xuXG4gIGNvbnN0cnVjdG9yKCkge31cblxuICBvcGVuVG9hc3ROb3RpZmljYXRpb24kKCk6IE9ic2VydmFibGU8SVRvYXN0Tm90aWZpY2F0aW9uUHVibGljUmVzcG9uc2U+IHtcbiAgICByZXR1cm4gdGhpcy50b2FzdE5vdGlmaWNhdGlvbkNhcnJpZXIub3BlblRvYXN0Tm90aWZpY2F0aW9uJCgpLnBpcGUoXG4gICAgICBtYXAocmVzcCA9PiB7XG4gICAgICAgIGNvbnN0IGJhc2ljVG9hc3ROb3RpZmljYXRpb25SZXNwb25zZSA9IG5ldyBUb2FzdE5vdGlmaWNhdGlvblJlc3BvbnNlKCk7XG4gICAgICAgIGNvbnN0IGRhdGFDb250cm9sID0gbmV3IERhdGFDb250cm9sKCk7XG4gICAgICAgIGRhdGFDb250cm9sLmNvcHlWYWx1ZXNGcm9tKHJlc3AsIGJhc2ljVG9hc3ROb3RpZmljYXRpb25SZXNwb25zZSk7XG4gICAgICAgIHJldHVybiBiYXNpY1RvYXN0Tm90aWZpY2F0aW9uUmVzcG9uc2U7XG4gICAgICB9KSxcbiAgICAgIHRha2UoMSlcbiAgICApO1xuICB9XG5cbiAgc2V0QnV0dG9ucyhfQnV0dG9uczogSUJ1dHRvbltdKTogdm9pZCB7XG4gICAgdGhpcy50b2FzdE5vdGlmaWNhdGlvbkNhcnJpZXIuc2V0QnV0dG9ucyhfQnV0dG9ucyk7XG4gIH1cblxuICBzZXRDb25maWcoX1RvYXN0Tm90aWZpY2F0aW9uQ29uZmlnOiBJVG9hc3RDb3JlQ29uZmlnKSB7XG4gICAgdGhpcy50b2FzdE5vdGlmaWNhdGlvbkNhcnJpZXIuc2V0Q29uZmlnKF9Ub2FzdE5vdGlmaWNhdGlvbkNvbmZpZyk7XG4gIH1cblxuICBzZXREaXNwYXRjaChfVGl0bGU6IHN0cmluZywgX01lc3NhZ2U6IHN0cmluZyA9IG51bGwpOiB2b2lkIHtcbiAgICB0aGlzLnRvYXN0Tm90aWZpY2F0aW9uQ2Fycmllci5zZXRUaXRsZShfVGl0bGUpO1xuICAgIHRoaXMudG9hc3ROb3RpZmljYXRpb25DYXJyaWVyLnNldE1lc3NhZ2UoX01lc3NhZ2UpO1xuICB9XG5cbiAgc2V0VGl0bGUoX1RpdGxlOiBzdHJpbmcpOiB2b2lkIHtcbiAgICB0aGlzLnRvYXN0Tm90aWZpY2F0aW9uQ2Fycmllci5zZXRUaXRsZShfVGl0bGUpO1xuICB9XG5cbiAgc2V0TWVzc2FnZShfTWVzc2FnZTogc3RyaW5nKTogdm9pZCB7XG4gICAgdGhpcy50b2FzdE5vdGlmaWNhdGlvbkNhcnJpZXIuc2V0TWVzc2FnZShfTWVzc2FnZSk7XG4gIH1cblxuICBzZXRCdXR0b25MYWJlbHMoX0NvbmZpcm06IHN0cmluZywgX0RlY2xpbmU/OiBzdHJpbmcpOiB2b2lkIHtcbiAgICB0aGlzLnRvYXN0Tm90aWZpY2F0aW9uQ2Fycmllci5zZXRCdXR0b25MYWJlbHMoX0NvbmZpcm0sIF9EZWNsaW5lKTtcbiAgfVxufVxuXG5leHBvcnQgY2xhc3MgVG9hc3ROb3RpZmljYXRpb25SZXNwb25zZVxuICBleHRlbmRzIERhdGFDb250cm9sXG4gIGltcGxlbWVudHMgSVRvYXN0Tm90aWZpY2F0aW9uUmVzcG9uc2UsIElUb2FzdE5vdGlmaWNhdGlvblB1YmxpY1Jlc3BvbnNlIHtcbiAgLy8gcHJpdmF0ZSBSZXNwb25zZTogRGlhbG9nUHJlcGFyZVJlc3BvbnNlICAgICAgICAgICAgPSBuZXcgRGlhbG9nUHJlcGFyZVJlc3BvbnNlKCk7XG5cbiAgU3VjY2VzczogYm9vbGVhbiA9IG51bGw7XG4gIENsaWNrZWRCdXR0b25JRDogc3RyaW5nID0gbnVsbDtcblxuICBjb25zdHJ1Y3RvcigpIHtcbiAgICBzdXBlcigpO1xuICB9XG5cbiAgc2V0U3VjY2VzcyhfSXNTdWNjZXNzOiBib29sZWFuKTogdm9pZCB7XG4gICAgdGhpcy5TdWNjZXNzID0gX0lzU3VjY2VzcztcbiAgfVxuXG4gIHNldENsaWNrZWRCdXR0b25JRChfQ2xpY2tlZEJ1dHRvbklEKTogdm9pZCB7XG4gICAgdGhpcy5DbGlja2VkQnV0dG9uSUQgPSBfQ2xpY2tlZEJ1dHRvbklEO1xuICB9XG59XG5cbmV4cG9ydCBjbGFzcyBUb2FzdE5vdGlmaWNhdGlvbkV2ZW50c0NvbnRyb2xsZXIge1xuICBkZWZhdWx0UmVzcG9uc2U6IElQcml2YXRlUmVzcG9uc2VNZXJnZWQ7XG5cbiAgcHJpdmF0ZSByZWFkb25seSBfYWZ0ZXJDbG9zZWQ6IFN1YmplY3Q8SVByaXZhdGVSZXNwb25zZU1lcmdlZD4gPSBuZXcgU3ViamVjdDxJUHJpdmF0ZVJlc3BvbnNlTWVyZ2VkPigpO1xuICBhZnRlckNsb3NlZCQ6IE9ic2VydmFibGU8SVByaXZhdGVSZXNwb25zZU1lcmdlZD4gPSB0aGlzLl9hZnRlckNsb3NlZC5hc09ic2VydmFibGUoKTtcbiAgcHJpdmF0ZSByZWFkb25seSBfb25CdXR0b25DbGljazogU3ViamVjdDxJQnV0dG9uPiA9IG5ldyBTdWJqZWN0PElCdXR0b24+KCk7XG4gIG9uQnV0dG9uQ2xpY2skOiBPYnNlcnZhYmxlPElCdXR0b24+ID0gdGhpcy5fb25CdXR0b25DbGljay5hc09ic2VydmFibGUoKTtcbiAgcHJpdmF0ZSByZWFkb25seSBfYnV0dG9uTGlzdDogU3ViamVjdDxJQnV0dG9uW10+ID0gbmV3IFN1YmplY3Q8SUJ1dHRvbltdPigpO1xuICBidXR0b25MaXN0JDogT2JzZXJ2YWJsZTxJQnV0dG9uW10+ID0gdGhpcy5fYnV0dG9uTGlzdC5hc09ic2VydmFibGUoKTtcblxuICBjb25zdHJ1Y3Rvcihwcml2YXRlIEVudGl0eVVuaXF1ZUlEOiBzdHJpbmcpIHt9XG5cbiAgY2xvc2UoX1Jlc3BvbnNlPzogSVByaXZhdGVSZXNwb25zZU1lcmdlZCk6IHZvaWQge1xuICAgIGNvbnN0IHJlc3BvbnNlID0gX1Jlc3BvbnNlID8gX1Jlc3BvbnNlIDogdGhpcy5kZWZhdWx0UmVzcG9uc2U7XG4gICAgdGhpcy5fYWZ0ZXJDbG9zZWQubmV4dChyZXNwb25zZSk7XG4gIH1cblxuICBvbkJ1dHRvbkNsaWNrKF9CdXR0b246IElCdXR0b24pOiB2b2lkIHtcbiAgICB0aGlzLmRlZmF1bHRSZXNwb25zZS5zZXRDbGlja2VkQnV0dG9uSUQoX0J1dHRvbi5JRCk7XG4gICAgdGhpcy5fb25CdXR0b25DbGljay5uZXh0KF9CdXR0b24pO1xuICB9XG5cbiAgc2V0QnV0dG9uTGlzdChfQnV0dG9uTGlzdDogSUJ1dHRvbltdKTogdm9pZCB7XG4gICAgdGhpcy5fYnV0dG9uTGlzdC5uZXh0KF9CdXR0b25MaXN0KTtcbiAgfVxuXG4gIHNldERlZmF1bHRSZXNwb25zZShfUmVzcG9uc2U6IElQcml2YXRlUmVzcG9uc2VNZXJnZWQpOiB2b2lkIHtcbiAgICB0aGlzLmRlZmF1bHRSZXNwb25zZSA9IF9SZXNwb25zZTtcbiAgfVxufVxuXG4vLyBlbmRyZWdpb25cblxuZXhwb3J0IGNsYXNzIFRvYXN0Tm90aWZpY2F0aW9uRGVmYXVsdFJlc3BvbnNlXG4gIGV4dGVuZHMgVG9hc3ROb3RpZmljYXRpb25SZXNwb25zZVxuICBpbXBsZW1lbnRzIElQcml2YXRlUmVzcG9uc2VNZXJnZWQge1xuICB0b2FzdE5vdGlmaWNhdGlvbkJlbG9uZ2luZzogVG9hc3ROb3RpZmljYXRpb25CZWxvbmdpbmcgPSBudWxsO1xuXG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHN1cGVyKCk7XG4gIH1cblxuICBzZXRCZWxvbmdpbmcoX1RvYXN0Tm90aWZpY2F0aW9uQmVsb25naW5nKTogdm9pZCB7XG4gICAgdGhpcy50b2FzdE5vdGlmaWNhdGlvbkJlbG9uZ2luZyA9IF9Ub2FzdE5vdGlmaWNhdGlvbkJlbG9uZ2luZztcbiAgfVxufVxuXG5leHBvcnQgY2xhc3MgVG9hc3ROb3RpZmljYXRpb25DYXJyaWVyIHtcbiAgdG9hc3ROb3RpZmljYXRpb25CZWxvbmdpbmc6IFRvYXN0Tm90aWZpY2F0aW9uQmVsb25naW5nID0gbmV3IFRvYXN0Tm90aWZpY2F0aW9uQmVsb25naW5nKCk7XG5cbiAgY29uc3RydWN0b3IoKSB7fVxuXG4gIHNldEJ1dHRvbnMoX0J1dHRvbnM6IElCdXR0b25bXSkge1xuICAgIGlmIChfQnV0dG9ucy5sZW5ndGgpIHtcbiAgICAgIHRoaXMudG9hc3ROb3RpZmljYXRpb25CZWxvbmdpbmcuQnV0dG9ucyA9IF9CdXR0b25zO1xuICAgIH1cbiAgfVxuXG4gIHNldFRpdGxlKF9UaXRsZTogc3RyaW5nKTogdm9pZCB7XG4gICAgdGhpcy50b2FzdE5vdGlmaWNhdGlvbkJlbG9uZ2luZy5EaXNwYXRjaC5UaXRsZSA9IF9UaXRsZTtcbiAgfVxuXG4gIHNldE1lc3NhZ2UoX01lc3NhZ2U6IHN0cmluZyk6IHZvaWQge1xuICAgIHRoaXMudG9hc3ROb3RpZmljYXRpb25CZWxvbmdpbmcuRGlzcGF0Y2guTWVzc2FnZSA9IF9NZXNzYWdlO1xuICB9XG5cbiAgc2V0QnV0dG9uTGFiZWxzKF9Db25maXJtOiBzdHJpbmcsIF9EZWNsaW5lOiBzdHJpbmcpOiB2b2lkIHtcbiAgICB0aGlzLnRvYXN0Tm90aWZpY2F0aW9uQmVsb25naW5nLlRvYXN0Q29yZUNvbmZpZy5Db25maXJtTGFiZWwgPSBfQ29uZmlybTtcbiAgICB0aGlzLnRvYXN0Tm90aWZpY2F0aW9uQmVsb25naW5nLlRvYXN0Q29yZUNvbmZpZy5EZWNsaW5lTGFiZWwgPSBfRGVjbGluZTtcbiAgfVxuXG4gIHNldENvbmZpZyhfVG9hc3ROb3RpZmljYXRpb25CZWxvbmdpbmc6IElUb2FzdENvcmVDb25maWcpIHtcbiAgICAvLyByZWdpb24gKioqIGxvY2FsIFVzZXJDb25maWcgKGRlZmluZWQgb24gcGxhY2Ugd2hlcmUgZGlhbG9nIGlzIGNhbGxlZCkgKioqXG4gICAgY29uc3QgZGF0YUNvbnRyb2wgPSBuZXcgRGF0YUNvbnRyb2woKTtcbiAgICBkYXRhQ29udHJvbC5jb3B5VmFsdWVzRnJvbShcbiAgICAgIF9Ub2FzdE5vdGlmaWNhdGlvbkJlbG9uZ2luZyxcbiAgICAgIHRoaXMudG9hc3ROb3RpZmljYXRpb25CZWxvbmdpbmcuVG9hc3RDb3JlQ29uZmlnXG4gICAgKTtcbiAgICAvLyBlbmRyZWdpb25cbiAgfVxuXG4gIG9wZW5Ub2FzdE5vdGlmaWNhdGlvbiQoKTogT2JzZXJ2YWJsZTxJUHJpdmF0ZVJlc3BvbnNlTWVyZ2VkPiB7XG4gICAgaWYgKFxuICAgICAgIXRoaXMudG9hc3ROb3RpZmljYXRpb25CZWxvbmdpbmcuRGlzcGF0Y2guVGl0bGUgJiZcbiAgICAgICF0aGlzLnRvYXN0Tm90aWZpY2F0aW9uQmVsb25naW5nLkRpc3BhdGNoLk1lc3NhZ2VcbiAgICApIHtcbiAgICAgIHRocm93IEVycm9yKFxuICAgICAgICAnVG9hc3Qgbm90aWZpY2F0aW9uIGNhbiBub3QgYmUgd2l0aG91dCBib3RoIG1lc3NhZ2UgYW5kIHRpdGxlLidcbiAgICAgICk7XG4gICAgfVxuICAgIGNvbnN0IHNlcnZpY2U6IFRvYXN0Tm90aWZpY2F0aW9uU2VydmljZSA9IFNlcnZpY2VMb2NhdG9yLmluamVjdG9yLmdldChcbiAgICAgIFRvYXN0Tm90aWZpY2F0aW9uU2VydmljZVxuICAgICk7XG4gICAgcmV0dXJuIHNlcnZpY2Uub3BlblRvYXN0JCh0aGlzLnRvYXN0Tm90aWZpY2F0aW9uQmVsb25naW5nKTtcbiAgfVxufVxuXG5leHBvcnQgY2xhc3MgR2xvYmFsVG9hc3RTZXR0aW5ncyBpbXBsZW1lbnRzIElHbG9iYWxUb2FzdFNldHRpbmdzIHtcbiAgQWxsb3dlZE5vdGlmaWNhdGlvbnNBdE9uY2U6IG51bWJlciA9IG51bGw7XG59XG5cbmV4cG9ydCBjbGFzcyBSZXNldFRvYXN0R2xvYmFsU2V0dGluZ3Mge1xuICBjb25zdHJ1Y3RvcihnbG9iYWxUb2FzdENvbmZpZz86IElHbG9iYWxUb2FzdFNldHRpbmdzKSB7XG4gICAgY29uc3QgZ2xvYmFsVG9hc3RDb25maWdTZXJ2aWNlOiBUb2FzdE5vdGlmaWNhdGlvbkNvbmZpZ1NlcnZpY2UgPSBTZXJ2aWNlTG9jYXRvci5pbmplY3Rvci5nZXQoXG4gICAgICBUb2FzdE5vdGlmaWNhdGlvbkNvbmZpZ1NlcnZpY2VcbiAgICApO1xuICAgIGlmIChnbG9iYWxUb2FzdENvbmZpZ1NlcnZpY2UpIHtcbiAgICAgIGdsb2JhbFRvYXN0Q29uZmlnU2VydmljZS5zZXRSZXNldEdsb2JhbFRvYXN0Q29uZmlnKGdsb2JhbFRvYXN0Q29uZmlnKTtcbiAgICB9IGVsc2Uge1xuICAgICAgZ2xvYmFsVG9hc3RDb25maWdTZXJ2aWNlLnNldFJlc2V0R2xvYmFsVG9hc3RDb25maWcoKTtcbiAgICB9XG4gIH1cbn1cblxuZXhwb3J0IGNsYXNzIFRvYXN0U2V0dGluZ3Mge1xuICBCdXR0b25zOiBJQnV0dG9uW10gPSBbXTtcbiAgVG9hc3RDb3JlQ29uZmlnOiBJVG9hc3RDb3JlQ29uZmlnID0gbmV3IFRvYXN0Q29yZUNvbmZpZygpO1xuICBEaXNwYXRjaDogSURpc3BhdGNoID0gbmV3IERpc3BhdGNoKCk7XG4gIEdsb2JhbFNldHRpbmdzOiBHbG9iYWxUb2FzdFNldHRpbmdzID0gbmV3IEdsb2JhbFRvYXN0U2V0dGluZ3MoKTtcbn1cblxuZXhwb3J0IGNsYXNzIFRvYXN0Q29yZUNvbmZpZyBpbXBsZW1lbnRzIElUb2FzdENvcmVDb25maWcge1xuICBUb2FzdFBvc2l0aW9uOiBUb2FzdFBvc2l0aW9uRW51bSA9IG51bGw7XG4gIFByb2dyZXNzQmFyOiBUb2FzdFByb2dyZXNzQmFyRW51bSA9IG51bGw7XG4gIFRvYXN0VXNlclZpZXdUeXBlOiBUb2FzdFVzZXJWaWV3VHlwZUVudW0gPSBudWxsO1xuICBPcGVuSW5FbGVtZW50SUQ6IHN0cmluZyA9IG51bGw7XG4gIEJ1dHRvblBvc2l0aW9uOiBWZXJ0aWNhbFBvc2l0aW9uID0gbnVsbDtcbiAgVGV4dFBvc2l0aW9uOiBWZXJ0aWNhbFBvc2l0aW9uID0gbnVsbDtcbiAgTGF5b3V0VHlwZTogRGlhbG9nTGF5b3V0RGlzcGxheSA9IG51bGw7XG4gIERpc3BhdGNoOiBJRGlzcGF0Y2ggPSBudWxsO1xuICBDb25maXJtTGFiZWw6IHN0cmluZyA9IG51bGw7XG4gIERlY2xpbmVMYWJlbDogc3RyaW5nID0gbnVsbDtcbiAgQXV0b0Nsb3NlRGVsYXk6IG51bWJlciA9IG51bGw7XG4gIERpc2FibGVJY29uOiBib29sZWFuID0gbnVsbDtcbiAgQWxsb3dIVE1MTWVzc2FnZTogYm9vbGVhbiA9IG51bGw7XG59XG5cbmV4cG9ydCBjbGFzcyBUb2FzdE5vdGlmaWNhdGlvbkJlbG9uZ2luZ1xuICBleHRlbmRzIFRvYXN0U2V0dGluZ3NcbiAgaW1wbGVtZW50cyBJVG9hc3ROb3RpZmljYXRpb25CZWxvbmdpbmcge1xuICBFbnRpdHlVbmlxdWVJRDogc3RyaW5nID0gJ1QnICsgTWF0aC5yYW5kb20oKS50b1N0cmluZygzNikuc3Vic3RyKDIsIDkpO1xuICBFdmVudHNDb250cm9sbGVyOiBUb2FzdE5vdGlmaWNhdGlvbkV2ZW50c0NvbnRyb2xsZXI7XG5cbiAgY29uc3RydWN0b3IoKSB7XG4gICAgc3VwZXIoKTtcbiAgICB0aGlzLkV2ZW50c0NvbnRyb2xsZXIgPSBuZXcgVG9hc3ROb3RpZmljYXRpb25FdmVudHNDb250cm9sbGVyKFxuICAgICAgdGhpcy5FbnRpdHlVbmlxdWVJRFxuICAgICk7XG4gICAgY29uc3QgdG9hc3ROb3RpZmljYXRpb25Db25maWd1cmF0b3I6IFRvYXN0Tm90aWZpY2F0aW9uQ29uZmlnU2VydmljZSA9IFNlcnZpY2VMb2NhdG9yLmluamVjdG9yLmdldChcbiAgICAgIFRvYXN0Tm90aWZpY2F0aW9uQ29uZmlnU2VydmljZVxuICAgICk7XG4gICAgY29uc3QgYmFzZVNldHRpbmdzID0gbmV3IFRvYXN0U2V0dGluZ3MoKTtcbiAgICBjb25zdCBkYXRhQ29udHJvbCA9IG5ldyBEYXRhQ29udHJvbCgpO1xuICAgIGRhdGFDb250cm9sLmNvcHlWYWx1ZXNGcm9tKFxuICAgICAgdG9hc3ROb3RpZmljYXRpb25Db25maWd1cmF0b3IucHJvZHVjdGlvbkNvbmZpZy5Ub2FzdENvcmVDb25maWcsXG4gICAgICBiYXNlU2V0dGluZ3MuVG9hc3RDb3JlQ29uZmlnXG4gICAgKTtcbiAgICB0aGlzLlRvYXN0Q29yZUNvbmZpZyA9IGJhc2VTZXR0aW5ncy5Ub2FzdENvcmVDb25maWc7XG4gICAgdGhpcy5CdXR0b25zID0gdG9hc3ROb3RpZmljYXRpb25Db25maWd1cmF0b3IucHJvZHVjdGlvbkNvbmZpZy5CdXR0b25zLnNsaWNlKCk7XG4gIH1cbn1cbiJdfQ==