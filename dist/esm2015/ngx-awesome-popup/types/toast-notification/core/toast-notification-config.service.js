import { Inject, Injectable } from '@angular/core';
import { DialogLayoutDisplay } from '../../../core/enums';
import { DataControl } from '../../../core/global-classes';
import { ToastSettings } from './classes';
import { ToastPositionEnum, ToastProgressBarEnum, ToastUserViewTypeEnum } from './enums';
import * as i0 from "@angular/core";
export class ToastNotificationConfigService {
    constructor(userConfig = {}) {
        this.userConfig = userConfig;
        this.authorConfig = new ToastSettings();
        this.productionConfig = new ToastSettings();
        this.dataControl = new DataControl();
        // region *** toastNotification userConfig (user input app-module) ***
        const userConfigBase = new ToastSettings();
        this.dataControl.copyValuesFrom(userConfig.ToastCoreConfig, userConfigBase.ToastCoreConfig); // this will make sure that object has right properties
        userConfig.ToastCoreConfig = userConfigBase.ToastCoreConfig;
        // endregion
        // region *** author default config values (if there is no user input) ***
        this.authorConfig.ToastCoreConfig.ButtonPosition = 'right';
        this.authorConfig.ToastCoreConfig.TextPosition = 'left';
        this.authorConfig.ToastCoreConfig.ToastPosition =
            ToastPositionEnum.TOP_RIGHT;
        this.authorConfig.ToastCoreConfig.ProgressBar =
            ToastProgressBarEnum.INCREASE;
        this.authorConfig.ToastCoreConfig.ToastUserViewType =
            ToastUserViewTypeEnum.SIMPLE;
        this.authorConfig.ToastCoreConfig.AutoCloseDelay = 2500;
        this.authorConfig.ToastCoreConfig.DisableIcon = false;
        this.authorConfig.ToastCoreConfig.AllowHTMLMessage = true;
        this.authorConfig.ToastCoreConfig.LayoutType = DialogLayoutDisplay.NONE;
        this.authorConfig.GlobalSettings.AllowedNotificationsAtOnce = 5;
        // endregion
        // region *** Production setup ***
        this.setResetGlobalToastConfig();
        this.dataControl.copyValuesFrom(this.authorConfig.ToastCoreConfig, this.productionConfig.ToastCoreConfig);
        this.dataControl.copyValuesFrom(this.userConfig.ToastCoreConfig, this.productionConfig.ToastCoreConfig);
        // endregion
    }
    setResetGlobalToastConfig(globalToastConfig) {
        this.dataControl.copyValuesFrom(this.authorConfig.GlobalSettings, this.productionConfig.GlobalSettings);
        this.dataControl.copyValuesFrom(globalToastConfig ? globalToastConfig : this.userConfig.GlobalSettings, this.productionConfig.GlobalSettings);
    }
}
ToastNotificationConfigService.ɵprov = i0.ɵɵdefineInjectable({ factory: function ToastNotificationConfigService_Factory() { return new ToastNotificationConfigService(i0.ɵɵinject("toastNotificationConfig")); }, token: ToastNotificationConfigService, providedIn: "root" });
ToastNotificationConfigService.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root'
            },] }
];
ToastNotificationConfigService.ctorParameters = () => [
    { type: undefined, decorators: [{ type: Inject, args: ['toastNotificationConfig',] }] }
];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidG9hc3Qtbm90aWZpY2F0aW9uLWNvbmZpZy5zZXJ2aWNlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vbmd4LWF3ZXNvbWUtcG9wdXAvdHlwZXMvdG9hc3Qtbm90aWZpY2F0aW9uL2NvcmUvdG9hc3Qtbm90aWZpY2F0aW9uLWNvbmZpZy5zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxNQUFNLEVBQUUsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQ25ELE9BQU8sRUFBRSxtQkFBbUIsRUFBRSxNQUFNLHFCQUFxQixDQUFDO0FBQzFELE9BQU8sRUFBRSxXQUFXLEVBQUUsTUFBTSw4QkFBOEIsQ0FBQztBQUMzRCxPQUFPLEVBQUUsYUFBYSxFQUFFLE1BQU0sV0FBVyxDQUFDO0FBQzFDLE9BQU8sRUFDTCxpQkFBaUIsRUFDakIsb0JBQW9CLEVBQ3BCLHFCQUFxQixFQUN0QixNQUFNLFNBQVMsQ0FBQzs7QUFTakIsTUFBTSxPQUFPLDhCQUE4QjtJQUt6QyxZQUVVLGFBQTJDLEVBQUU7UUFBN0MsZUFBVSxHQUFWLFVBQVUsQ0FBbUM7UUFOdkQsaUJBQVksR0FBaUMsSUFBSSxhQUFhLEVBQUUsQ0FBQztRQUNqRSxxQkFBZ0IsR0FBaUMsSUFBSSxhQUFhLEVBQUUsQ0FBQztRQUM3RCxnQkFBVyxHQUFHLElBQUksV0FBVyxFQUFFLENBQUM7UUFNdEMsc0VBQXNFO1FBQ3RFLE1BQU0sY0FBYyxHQUFHLElBQUksYUFBYSxFQUFFLENBQUM7UUFFM0MsSUFBSSxDQUFDLFdBQVcsQ0FBQyxjQUFjLENBQzdCLFVBQVUsQ0FBQyxlQUFlLEVBQzFCLGNBQWMsQ0FBQyxlQUFlLENBQy9CLENBQUMsQ0FBQyx1REFBdUQ7UUFFMUQsVUFBVSxDQUFDLGVBQWUsR0FBRyxjQUFjLENBQUMsZUFBZSxDQUFDO1FBQzVELFlBQVk7UUFFWiwwRUFBMEU7UUFDMUUsSUFBSSxDQUFDLFlBQVksQ0FBQyxlQUFlLENBQUMsY0FBYyxHQUFHLE9BQU8sQ0FBQztRQUMzRCxJQUFJLENBQUMsWUFBWSxDQUFDLGVBQWUsQ0FBQyxZQUFZLEdBQUcsTUFBTSxDQUFDO1FBQ3hELElBQUksQ0FBQyxZQUFZLENBQUMsZUFBZSxDQUFDLGFBQWE7WUFDN0MsaUJBQWlCLENBQUMsU0FBUyxDQUFDO1FBQzlCLElBQUksQ0FBQyxZQUFZLENBQUMsZUFBZSxDQUFDLFdBQVc7WUFDM0Msb0JBQW9CLENBQUMsUUFBUSxDQUFDO1FBQ2hDLElBQUksQ0FBQyxZQUFZLENBQUMsZUFBZSxDQUFDLGlCQUFpQjtZQUNqRCxxQkFBcUIsQ0FBQyxNQUFNLENBQUM7UUFDL0IsSUFBSSxDQUFDLFlBQVksQ0FBQyxlQUFlLENBQUMsY0FBYyxHQUFHLElBQUksQ0FBQztRQUN4RCxJQUFJLENBQUMsWUFBWSxDQUFDLGVBQWUsQ0FBQyxXQUFXLEdBQUcsS0FBSyxDQUFDO1FBQ3RELElBQUksQ0FBQyxZQUFZLENBQUMsZUFBZSxDQUFDLGdCQUFnQixHQUFHLElBQUksQ0FBQztRQUMxRCxJQUFJLENBQUMsWUFBWSxDQUFDLGVBQWUsQ0FBQyxVQUFVLEdBQUcsbUJBQW1CLENBQUMsSUFBSSxDQUFDO1FBQ3hFLElBQUksQ0FBQyxZQUFZLENBQUMsY0FBYyxDQUFDLDBCQUEwQixHQUFHLENBQUMsQ0FBQztRQUVoRSxZQUFZO1FBRVosa0NBQWtDO1FBRWxDLElBQUksQ0FBQyx5QkFBeUIsRUFBRSxDQUFDO1FBQ2pDLElBQUksQ0FBQyxXQUFXLENBQUMsY0FBYyxDQUM3QixJQUFJLENBQUMsWUFBWSxDQUFDLGVBQWUsRUFDakMsSUFBSSxDQUFDLGdCQUFnQixDQUFDLGVBQWUsQ0FDdEMsQ0FBQztRQUNGLElBQUksQ0FBQyxXQUFXLENBQUMsY0FBYyxDQUM3QixJQUFJLENBQUMsVUFBVSxDQUFDLGVBQWUsRUFDL0IsSUFBSSxDQUFDLGdCQUFnQixDQUFDLGVBQWUsQ0FDdEMsQ0FBQztRQUNGLFlBQVk7SUFDZCxDQUFDO0lBRUQseUJBQXlCLENBQUMsaUJBQXdDO1FBQ2hFLElBQUksQ0FBQyxXQUFXLENBQUMsY0FBYyxDQUM3QixJQUFJLENBQUMsWUFBWSxDQUFDLGNBQWMsRUFDaEMsSUFBSSxDQUFDLGdCQUFnQixDQUFDLGNBQWMsQ0FDckMsQ0FBQztRQUNGLElBQUksQ0FBQyxXQUFXLENBQUMsY0FBYyxDQUM3QixpQkFBaUIsQ0FBQyxDQUFDLENBQUMsaUJBQWlCLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsY0FBYyxFQUN0RSxJQUFJLENBQUMsZ0JBQWdCLENBQUMsY0FBYyxDQUNyQyxDQUFDO0lBQ0osQ0FBQzs7OztZQS9ERixVQUFVLFNBQUM7Z0JBQ1YsVUFBVSxFQUFFLE1BQU07YUFDbkI7Ozs0Q0FPSSxNQUFNLFNBQUMseUJBQXlCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0LCBJbmplY3RhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBEaWFsb2dMYXlvdXREaXNwbGF5IH0gZnJvbSAnLi4vLi4vLi4vY29yZS9lbnVtcyc7XG5pbXBvcnQgeyBEYXRhQ29udHJvbCB9IGZyb20gJy4uLy4uLy4uL2NvcmUvZ2xvYmFsLWNsYXNzZXMnO1xuaW1wb3J0IHsgVG9hc3RTZXR0aW5ncyB9IGZyb20gJy4vY2xhc3Nlcyc7XG5pbXBvcnQge1xuICBUb2FzdFBvc2l0aW9uRW51bSxcbiAgVG9hc3RQcm9ncmVzc0JhckVudW0sXG4gIFRvYXN0VXNlclZpZXdUeXBlRW51bVxufSBmcm9tICcuL2VudW1zJztcbmltcG9ydCB7XG4gIElHbG9iYWxUb2FzdFNldHRpbmdzLFxuICBJVG9hc3ROb3RpZmljYXRpb25Vc2VyQ29uZmlnXG59IGZyb20gJy4vaW50ZXJmYWNlcyc7XG5cbkBJbmplY3RhYmxlKHtcbiAgcHJvdmlkZWRJbjogJ3Jvb3QnXG59KVxuZXhwb3J0IGNsYXNzIFRvYXN0Tm90aWZpY2F0aW9uQ29uZmlnU2VydmljZSB7XG4gIGF1dGhvckNvbmZpZzogSVRvYXN0Tm90aWZpY2F0aW9uVXNlckNvbmZpZyA9IG5ldyBUb2FzdFNldHRpbmdzKCk7XG4gIHByb2R1Y3Rpb25Db25maWc6IElUb2FzdE5vdGlmaWNhdGlvblVzZXJDb25maWcgPSBuZXcgVG9hc3RTZXR0aW5ncygpO1xuICBwcml2YXRlIGRhdGFDb250cm9sID0gbmV3IERhdGFDb250cm9sKCk7XG5cbiAgY29uc3RydWN0b3IoXG4gICAgQEluamVjdCgndG9hc3ROb3RpZmljYXRpb25Db25maWcnKVxuICAgIHByaXZhdGUgdXNlckNvbmZpZzogSVRvYXN0Tm90aWZpY2F0aW9uVXNlckNvbmZpZyA9IHt9XG4gICkge1xuICAgIC8vIHJlZ2lvbiAqKiogdG9hc3ROb3RpZmljYXRpb24gdXNlckNvbmZpZyAodXNlciBpbnB1dCBhcHAtbW9kdWxlKSAqKipcbiAgICBjb25zdCB1c2VyQ29uZmlnQmFzZSA9IG5ldyBUb2FzdFNldHRpbmdzKCk7XG5cbiAgICB0aGlzLmRhdGFDb250cm9sLmNvcHlWYWx1ZXNGcm9tKFxuICAgICAgdXNlckNvbmZpZy5Ub2FzdENvcmVDb25maWcsXG4gICAgICB1c2VyQ29uZmlnQmFzZS5Ub2FzdENvcmVDb25maWdcbiAgICApOyAvLyB0aGlzIHdpbGwgbWFrZSBzdXJlIHRoYXQgb2JqZWN0IGhhcyByaWdodCBwcm9wZXJ0aWVzXG5cbiAgICB1c2VyQ29uZmlnLlRvYXN0Q29yZUNvbmZpZyA9IHVzZXJDb25maWdCYXNlLlRvYXN0Q29yZUNvbmZpZztcbiAgICAvLyBlbmRyZWdpb25cblxuICAgIC8vIHJlZ2lvbiAqKiogYXV0aG9yIGRlZmF1bHQgY29uZmlnIHZhbHVlcyAoaWYgdGhlcmUgaXMgbm8gdXNlciBpbnB1dCkgKioqXG4gICAgdGhpcy5hdXRob3JDb25maWcuVG9hc3RDb3JlQ29uZmlnLkJ1dHRvblBvc2l0aW9uID0gJ3JpZ2h0JztcbiAgICB0aGlzLmF1dGhvckNvbmZpZy5Ub2FzdENvcmVDb25maWcuVGV4dFBvc2l0aW9uID0gJ2xlZnQnO1xuICAgIHRoaXMuYXV0aG9yQ29uZmlnLlRvYXN0Q29yZUNvbmZpZy5Ub2FzdFBvc2l0aW9uID1cbiAgICAgIFRvYXN0UG9zaXRpb25FbnVtLlRPUF9SSUdIVDtcbiAgICB0aGlzLmF1dGhvckNvbmZpZy5Ub2FzdENvcmVDb25maWcuUHJvZ3Jlc3NCYXIgPVxuICAgICAgVG9hc3RQcm9ncmVzc0JhckVudW0uSU5DUkVBU0U7XG4gICAgdGhpcy5hdXRob3JDb25maWcuVG9hc3RDb3JlQ29uZmlnLlRvYXN0VXNlclZpZXdUeXBlID1cbiAgICAgIFRvYXN0VXNlclZpZXdUeXBlRW51bS5TSU1QTEU7XG4gICAgdGhpcy5hdXRob3JDb25maWcuVG9hc3RDb3JlQ29uZmlnLkF1dG9DbG9zZURlbGF5ID0gMjUwMDtcbiAgICB0aGlzLmF1dGhvckNvbmZpZy5Ub2FzdENvcmVDb25maWcuRGlzYWJsZUljb24gPSBmYWxzZTtcbiAgICB0aGlzLmF1dGhvckNvbmZpZy5Ub2FzdENvcmVDb25maWcuQWxsb3dIVE1MTWVzc2FnZSA9IHRydWU7XG4gICAgdGhpcy5hdXRob3JDb25maWcuVG9hc3RDb3JlQ29uZmlnLkxheW91dFR5cGUgPSBEaWFsb2dMYXlvdXREaXNwbGF5Lk5PTkU7XG4gICAgdGhpcy5hdXRob3JDb25maWcuR2xvYmFsU2V0dGluZ3MuQWxsb3dlZE5vdGlmaWNhdGlvbnNBdE9uY2UgPSA1O1xuXG4gICAgLy8gZW5kcmVnaW9uXG5cbiAgICAvLyByZWdpb24gKioqIFByb2R1Y3Rpb24gc2V0dXAgKioqXG5cbiAgICB0aGlzLnNldFJlc2V0R2xvYmFsVG9hc3RDb25maWcoKTtcbiAgICB0aGlzLmRhdGFDb250cm9sLmNvcHlWYWx1ZXNGcm9tKFxuICAgICAgdGhpcy5hdXRob3JDb25maWcuVG9hc3RDb3JlQ29uZmlnLFxuICAgICAgdGhpcy5wcm9kdWN0aW9uQ29uZmlnLlRvYXN0Q29yZUNvbmZpZ1xuICAgICk7XG4gICAgdGhpcy5kYXRhQ29udHJvbC5jb3B5VmFsdWVzRnJvbShcbiAgICAgIHRoaXMudXNlckNvbmZpZy5Ub2FzdENvcmVDb25maWcsXG4gICAgICB0aGlzLnByb2R1Y3Rpb25Db25maWcuVG9hc3RDb3JlQ29uZmlnXG4gICAgKTtcbiAgICAvLyBlbmRyZWdpb25cbiAgfVxuXG4gIHNldFJlc2V0R2xvYmFsVG9hc3RDb25maWcoZ2xvYmFsVG9hc3RDb25maWc/OiBJR2xvYmFsVG9hc3RTZXR0aW5ncyk6IHZvaWQge1xuICAgIHRoaXMuZGF0YUNvbnRyb2wuY29weVZhbHVlc0Zyb20oXG4gICAgICB0aGlzLmF1dGhvckNvbmZpZy5HbG9iYWxTZXR0aW5ncyxcbiAgICAgIHRoaXMucHJvZHVjdGlvbkNvbmZpZy5HbG9iYWxTZXR0aW5nc1xuICAgICk7XG4gICAgdGhpcy5kYXRhQ29udHJvbC5jb3B5VmFsdWVzRnJvbShcbiAgICAgIGdsb2JhbFRvYXN0Q29uZmlnID8gZ2xvYmFsVG9hc3RDb25maWcgOiB0aGlzLnVzZXJDb25maWcuR2xvYmFsU2V0dGluZ3MsXG4gICAgICB0aGlzLnByb2R1Y3Rpb25Db25maWcuR2xvYmFsU2V0dGluZ3NcbiAgICApO1xuICB9XG59XG4iXX0=