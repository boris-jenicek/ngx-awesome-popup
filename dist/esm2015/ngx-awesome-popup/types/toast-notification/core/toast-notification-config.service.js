import { Inject, Injectable } from '@angular/core';
import { AppearanceAnimation, DialogLayoutDisplay, DisappearanceAnimation } from '../../../core/enums';
import { DataControl } from '../../../core/global-classes';
import { ToastCustomStyles, ToastSettings } from './classes';
import { ToastPositionEnum, ToastProgressBarEnum, ToastUserViewTypeEnum } from './enums';
import * as i0 from "@angular/core";
export class ToastNotificationConfigService {
    constructor(userConfig = {}) {
        this.userConfig = userConfig;
        this.dataControl = new DataControl();
        this.authorConfig = new ToastSettings();
        this.productionConfig = new ToastSettings();
        // region *** toastNotification userConfig (user input app-module) ***
        const userConfigBase = new ToastSettings();
        this.dataControl.copyValuesFrom(userConfig.toastCoreConfig, userConfigBase.toastCoreConfig); // this will make sure that object has right properties
        userConfig.toastCoreConfig = userConfigBase.toastCoreConfig;
        // endregion
        // region *** author default config values (if there is no user input) ***
        this.authorConfig.toastCoreConfig.buttonPosition = 'right';
        this.authorConfig.toastCoreConfig.textPosition = 'left';
        this.authorConfig.toastCoreConfig.toastPosition = ToastPositionEnum.TOP_RIGHT;
        this.authorConfig.toastCoreConfig.progressBar = ToastProgressBarEnum.INCREASE;
        this.authorConfig.toastCoreConfig.toastUserViewType = ToastUserViewTypeEnum.SIMPLE;
        this.authorConfig.toastCoreConfig.autoCloseDelay = 2500;
        this.authorConfig.toastCoreConfig.disableIcon = false;
        this.authorConfig.toastCoreConfig.allowHtmlMessage = true;
        this.authorConfig.toastCoreConfig.layoutType = DialogLayoutDisplay.NONE;
        this.authorConfig.globalSettings.allowedNotificationsAtOnce = 5;
        this.authorConfig.toastCoreConfig.animationIn = AppearanceAnimation.ZOOM_IN;
        this.authorConfig.toastCoreConfig.animationOut = DisappearanceAnimation.ZOOM_OUT;
        this.authorConfig.toastCoreConfig.customStyles = new ToastCustomStyles();
        this.authorConfig.toastCoreConfig.iconStyleClass = null;
        // endregion
        // region *** Production setup ***
        this.setResetGlobalToastConfig();
        this.dataControl.copyValuesFrom(this.authorConfig.toastCoreConfig, this.productionConfig.toastCoreConfig);
        this.dataControl.copyValuesFrom(this.userConfig.toastCoreConfig, this.productionConfig.toastCoreConfig);
        // endregion
    }
    setResetGlobalToastConfig(globalToastConfig) {
        this.dataControl.copyValuesFrom(this.authorConfig.globalSettings, this.productionConfig.globalSettings);
        this.dataControl.copyValuesFrom(globalToastConfig ? globalToastConfig : this.userConfig.globalSettings, this.productionConfig.globalSettings);
    }
}
ToastNotificationConfigService.ɵprov = i0.ɵɵdefineInjectable({ factory: function ToastNotificationConfigService_Factory() { return new ToastNotificationConfigService(i0.ɵɵinject("toastNotificationConfig")); }, token: ToastNotificationConfigService, providedIn: "root" });
ToastNotificationConfigService.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root'
            },] }
];
ToastNotificationConfigService.ctorParameters = () => [
    { type: undefined, decorators: [{ type: Inject, args: ['toastNotificationConfig',] }] }
];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidG9hc3Qtbm90aWZpY2F0aW9uLWNvbmZpZy5zZXJ2aWNlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vbmd4LWF3ZXNvbWUtcG9wdXAvdHlwZXMvdG9hc3Qtbm90aWZpY2F0aW9uL2NvcmUvdG9hc3Qtbm90aWZpY2F0aW9uLWNvbmZpZy5zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxNQUFNLEVBQUUsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQ25ELE9BQU8sRUFBRSxtQkFBbUIsRUFBRSxtQkFBbUIsRUFBRSxzQkFBc0IsRUFBRSxNQUFNLHFCQUFxQixDQUFDO0FBQ3ZHLE9BQU8sRUFBRSxXQUFXLEVBQUUsTUFBTSw4QkFBOEIsQ0FBQztBQUMzRCxPQUFPLEVBQUUsaUJBQWlCLEVBQUUsYUFBYSxFQUFFLE1BQU0sV0FBVyxDQUFDO0FBQzdELE9BQU8sRUFBRSxpQkFBaUIsRUFBRSxvQkFBb0IsRUFBRSxxQkFBcUIsRUFBRSxNQUFNLFNBQVMsQ0FBQzs7QUFNekYsTUFBTSxPQUFPLDhCQUE4QjtJQUt6QyxZQUVVLGFBQTJDLEVBQUU7UUFBN0MsZUFBVSxHQUFWLFVBQVUsQ0FBbUM7UUFOL0MsZ0JBQVcsR0FBRyxJQUFJLFdBQVcsRUFBRSxDQUFDO1FBQ3hDLGlCQUFZLEdBQWlDLElBQUksYUFBYSxFQUFFLENBQUM7UUFDakUscUJBQWdCLEdBQWlDLElBQUksYUFBYSxFQUFFLENBQUM7UUFNbkUsc0VBQXNFO1FBQ3RFLE1BQU0sY0FBYyxHQUFHLElBQUksYUFBYSxFQUFFLENBQUM7UUFFM0MsSUFBSSxDQUFDLFdBQVcsQ0FBQyxjQUFjLENBQUMsVUFBVSxDQUFDLGVBQWUsRUFBRSxjQUFjLENBQUMsZUFBZSxDQUFDLENBQUMsQ0FBQyx1REFBdUQ7UUFFcEosVUFBVSxDQUFDLGVBQWUsR0FBRyxjQUFjLENBQUMsZUFBZSxDQUFDO1FBQzVELFlBQVk7UUFFWiwwRUFBMEU7UUFDMUUsSUFBSSxDQUFDLFlBQVksQ0FBQyxlQUFlLENBQUMsY0FBYyxHQUFHLE9BQU8sQ0FBQztRQUMzRCxJQUFJLENBQUMsWUFBWSxDQUFDLGVBQWUsQ0FBQyxZQUFZLEdBQUcsTUFBTSxDQUFDO1FBQ3hELElBQUksQ0FBQyxZQUFZLENBQUMsZUFBZSxDQUFDLGFBQWEsR0FBRyxpQkFBaUIsQ0FBQyxTQUFTLENBQUM7UUFDOUUsSUFBSSxDQUFDLFlBQVksQ0FBQyxlQUFlLENBQUMsV0FBVyxHQUFHLG9CQUFvQixDQUFDLFFBQVEsQ0FBQztRQUM5RSxJQUFJLENBQUMsWUFBWSxDQUFDLGVBQWUsQ0FBQyxpQkFBaUIsR0FBRyxxQkFBcUIsQ0FBQyxNQUFNLENBQUM7UUFDbkYsSUFBSSxDQUFDLFlBQVksQ0FBQyxlQUFlLENBQUMsY0FBYyxHQUFHLElBQUksQ0FBQztRQUN4RCxJQUFJLENBQUMsWUFBWSxDQUFDLGVBQWUsQ0FBQyxXQUFXLEdBQUcsS0FBSyxDQUFDO1FBQ3RELElBQUksQ0FBQyxZQUFZLENBQUMsZUFBZSxDQUFDLGdCQUFnQixHQUFHLElBQUksQ0FBQztRQUMxRCxJQUFJLENBQUMsWUFBWSxDQUFDLGVBQWUsQ0FBQyxVQUFVLEdBQUcsbUJBQW1CLENBQUMsSUFBSSxDQUFDO1FBQ3hFLElBQUksQ0FBQyxZQUFZLENBQUMsY0FBYyxDQUFDLDBCQUEwQixHQUFHLENBQUMsQ0FBQztRQUNoRSxJQUFJLENBQUMsWUFBWSxDQUFDLGVBQWUsQ0FBQyxXQUFXLEdBQUcsbUJBQW1CLENBQUMsT0FBTyxDQUFDO1FBQzVFLElBQUksQ0FBQyxZQUFZLENBQUMsZUFBZSxDQUFDLFlBQVksR0FBRyxzQkFBc0IsQ0FBQyxRQUFRLENBQUM7UUFDakYsSUFBSSxDQUFDLFlBQVksQ0FBQyxlQUFlLENBQUMsWUFBWSxHQUFHLElBQUksaUJBQWlCLEVBQUUsQ0FBQztRQUN6RSxJQUFJLENBQUMsWUFBWSxDQUFDLGVBQWUsQ0FBQyxjQUFjLEdBQUcsSUFBSSxDQUFDO1FBRXhELFlBQVk7UUFFWixrQ0FBa0M7UUFFbEMsSUFBSSxDQUFDLHlCQUF5QixFQUFFLENBQUM7UUFDakMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxjQUFjLENBQUMsSUFBSSxDQUFDLFlBQVksQ0FBQyxlQUFlLEVBQUUsSUFBSSxDQUFDLGdCQUFnQixDQUFDLGVBQWUsQ0FBQyxDQUFDO1FBQzFHLElBQUksQ0FBQyxXQUFXLENBQUMsY0FBYyxDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsZUFBZSxFQUFFLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxlQUFlLENBQUMsQ0FBQztRQUN4RyxZQUFZO0lBQ2QsQ0FBQztJQUVELHlCQUF5QixDQUFDLGlCQUF3QztRQUNoRSxJQUFJLENBQUMsV0FBVyxDQUFDLGNBQWMsQ0FBQyxJQUFJLENBQUMsWUFBWSxDQUFDLGNBQWMsRUFBRSxJQUFJLENBQUMsZ0JBQWdCLENBQUMsY0FBYyxDQUFDLENBQUM7UUFDeEcsSUFBSSxDQUFDLFdBQVcsQ0FBQyxjQUFjLENBQzdCLGlCQUFpQixDQUFDLENBQUMsQ0FBQyxpQkFBaUIsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxjQUFjLEVBQ3RFLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxjQUFjLENBQ3JDLENBQUM7SUFDSixDQUFDOzs7O1lBcERGLFVBQVUsU0FBQztnQkFDVixVQUFVLEVBQUUsTUFBTTthQUNuQjs7OzRDQU9JLE1BQU0sU0FBQyx5QkFBeUIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3QsIEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IEFwcGVhcmFuY2VBbmltYXRpb24sIERpYWxvZ0xheW91dERpc3BsYXksIERpc2FwcGVhcmFuY2VBbmltYXRpb24gfSBmcm9tICcuLi8uLi8uLi9jb3JlL2VudW1zJztcbmltcG9ydCB7IERhdGFDb250cm9sIH0gZnJvbSAnLi4vLi4vLi4vY29yZS9nbG9iYWwtY2xhc3Nlcyc7XG5pbXBvcnQgeyBUb2FzdEN1c3RvbVN0eWxlcywgVG9hc3RTZXR0aW5ncyB9IGZyb20gJy4vY2xhc3Nlcyc7XG5pbXBvcnQgeyBUb2FzdFBvc2l0aW9uRW51bSwgVG9hc3RQcm9ncmVzc0JhckVudW0sIFRvYXN0VXNlclZpZXdUeXBlRW51bSB9IGZyb20gJy4vZW51bXMnO1xuaW1wb3J0IHsgSUdsb2JhbFRvYXN0U2V0dGluZ3MsIElUb2FzdE5vdGlmaWNhdGlvblVzZXJDb25maWcgfSBmcm9tICcuL2ludGVyZmFjZXMnO1xuXG5ASW5qZWN0YWJsZSh7XG4gIHByb3ZpZGVkSW46ICdyb290J1xufSlcbmV4cG9ydCBjbGFzcyBUb2FzdE5vdGlmaWNhdGlvbkNvbmZpZ1NlcnZpY2Uge1xuICBwcml2YXRlIGRhdGFDb250cm9sID0gbmV3IERhdGFDb250cm9sKCk7XG4gIGF1dGhvckNvbmZpZzogSVRvYXN0Tm90aWZpY2F0aW9uVXNlckNvbmZpZyA9IG5ldyBUb2FzdFNldHRpbmdzKCk7XG4gIHByb2R1Y3Rpb25Db25maWc6IElUb2FzdE5vdGlmaWNhdGlvblVzZXJDb25maWcgPSBuZXcgVG9hc3RTZXR0aW5ncygpO1xuXG4gIGNvbnN0cnVjdG9yKFxuICAgIEBJbmplY3QoJ3RvYXN0Tm90aWZpY2F0aW9uQ29uZmlnJylcbiAgICBwcml2YXRlIHVzZXJDb25maWc6IElUb2FzdE5vdGlmaWNhdGlvblVzZXJDb25maWcgPSB7fVxuICApIHtcbiAgICAvLyByZWdpb24gKioqIHRvYXN0Tm90aWZpY2F0aW9uIHVzZXJDb25maWcgKHVzZXIgaW5wdXQgYXBwLW1vZHVsZSkgKioqXG4gICAgY29uc3QgdXNlckNvbmZpZ0Jhc2UgPSBuZXcgVG9hc3RTZXR0aW5ncygpO1xuXG4gICAgdGhpcy5kYXRhQ29udHJvbC5jb3B5VmFsdWVzRnJvbSh1c2VyQ29uZmlnLnRvYXN0Q29yZUNvbmZpZywgdXNlckNvbmZpZ0Jhc2UudG9hc3RDb3JlQ29uZmlnKTsgLy8gdGhpcyB3aWxsIG1ha2Ugc3VyZSB0aGF0IG9iamVjdCBoYXMgcmlnaHQgcHJvcGVydGllc1xuXG4gICAgdXNlckNvbmZpZy50b2FzdENvcmVDb25maWcgPSB1c2VyQ29uZmlnQmFzZS50b2FzdENvcmVDb25maWc7XG4gICAgLy8gZW5kcmVnaW9uXG5cbiAgICAvLyByZWdpb24gKioqIGF1dGhvciBkZWZhdWx0IGNvbmZpZyB2YWx1ZXMgKGlmIHRoZXJlIGlzIG5vIHVzZXIgaW5wdXQpICoqKlxuICAgIHRoaXMuYXV0aG9yQ29uZmlnLnRvYXN0Q29yZUNvbmZpZy5idXR0b25Qb3NpdGlvbiA9ICdyaWdodCc7XG4gICAgdGhpcy5hdXRob3JDb25maWcudG9hc3RDb3JlQ29uZmlnLnRleHRQb3NpdGlvbiA9ICdsZWZ0JztcbiAgICB0aGlzLmF1dGhvckNvbmZpZy50b2FzdENvcmVDb25maWcudG9hc3RQb3NpdGlvbiA9IFRvYXN0UG9zaXRpb25FbnVtLlRPUF9SSUdIVDtcbiAgICB0aGlzLmF1dGhvckNvbmZpZy50b2FzdENvcmVDb25maWcucHJvZ3Jlc3NCYXIgPSBUb2FzdFByb2dyZXNzQmFyRW51bS5JTkNSRUFTRTtcbiAgICB0aGlzLmF1dGhvckNvbmZpZy50b2FzdENvcmVDb25maWcudG9hc3RVc2VyVmlld1R5cGUgPSBUb2FzdFVzZXJWaWV3VHlwZUVudW0uU0lNUExFO1xuICAgIHRoaXMuYXV0aG9yQ29uZmlnLnRvYXN0Q29yZUNvbmZpZy5hdXRvQ2xvc2VEZWxheSA9IDI1MDA7XG4gICAgdGhpcy5hdXRob3JDb25maWcudG9hc3RDb3JlQ29uZmlnLmRpc2FibGVJY29uID0gZmFsc2U7XG4gICAgdGhpcy5hdXRob3JDb25maWcudG9hc3RDb3JlQ29uZmlnLmFsbG93SHRtbE1lc3NhZ2UgPSB0cnVlO1xuICAgIHRoaXMuYXV0aG9yQ29uZmlnLnRvYXN0Q29yZUNvbmZpZy5sYXlvdXRUeXBlID0gRGlhbG9nTGF5b3V0RGlzcGxheS5OT05FO1xuICAgIHRoaXMuYXV0aG9yQ29uZmlnLmdsb2JhbFNldHRpbmdzLmFsbG93ZWROb3RpZmljYXRpb25zQXRPbmNlID0gNTtcbiAgICB0aGlzLmF1dGhvckNvbmZpZy50b2FzdENvcmVDb25maWcuYW5pbWF0aW9uSW4gPSBBcHBlYXJhbmNlQW5pbWF0aW9uLlpPT01fSU47XG4gICAgdGhpcy5hdXRob3JDb25maWcudG9hc3RDb3JlQ29uZmlnLmFuaW1hdGlvbk91dCA9IERpc2FwcGVhcmFuY2VBbmltYXRpb24uWk9PTV9PVVQ7XG4gICAgdGhpcy5hdXRob3JDb25maWcudG9hc3RDb3JlQ29uZmlnLmN1c3RvbVN0eWxlcyA9IG5ldyBUb2FzdEN1c3RvbVN0eWxlcygpO1xuICAgIHRoaXMuYXV0aG9yQ29uZmlnLnRvYXN0Q29yZUNvbmZpZy5pY29uU3R5bGVDbGFzcyA9IG51bGw7XG5cbiAgICAvLyBlbmRyZWdpb25cblxuICAgIC8vIHJlZ2lvbiAqKiogUHJvZHVjdGlvbiBzZXR1cCAqKipcblxuICAgIHRoaXMuc2V0UmVzZXRHbG9iYWxUb2FzdENvbmZpZygpO1xuICAgIHRoaXMuZGF0YUNvbnRyb2wuY29weVZhbHVlc0Zyb20odGhpcy5hdXRob3JDb25maWcudG9hc3RDb3JlQ29uZmlnLCB0aGlzLnByb2R1Y3Rpb25Db25maWcudG9hc3RDb3JlQ29uZmlnKTtcbiAgICB0aGlzLmRhdGFDb250cm9sLmNvcHlWYWx1ZXNGcm9tKHRoaXMudXNlckNvbmZpZy50b2FzdENvcmVDb25maWcsIHRoaXMucHJvZHVjdGlvbkNvbmZpZy50b2FzdENvcmVDb25maWcpO1xuICAgIC8vIGVuZHJlZ2lvblxuICB9XG5cbiAgc2V0UmVzZXRHbG9iYWxUb2FzdENvbmZpZyhnbG9iYWxUb2FzdENvbmZpZz86IElHbG9iYWxUb2FzdFNldHRpbmdzKTogdm9pZCB7XG4gICAgdGhpcy5kYXRhQ29udHJvbC5jb3B5VmFsdWVzRnJvbSh0aGlzLmF1dGhvckNvbmZpZy5nbG9iYWxTZXR0aW5ncywgdGhpcy5wcm9kdWN0aW9uQ29uZmlnLmdsb2JhbFNldHRpbmdzKTtcbiAgICB0aGlzLmRhdGFDb250cm9sLmNvcHlWYWx1ZXNGcm9tKFxuICAgICAgZ2xvYmFsVG9hc3RDb25maWcgPyBnbG9iYWxUb2FzdENvbmZpZyA6IHRoaXMudXNlckNvbmZpZy5nbG9iYWxTZXR0aW5ncyxcbiAgICAgIHRoaXMucHJvZHVjdGlvbkNvbmZpZy5nbG9iYWxTZXR0aW5nc1xuICAgICk7XG4gIH1cbn1cbiJdfQ==