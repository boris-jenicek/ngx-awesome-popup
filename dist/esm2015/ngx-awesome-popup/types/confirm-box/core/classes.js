import { Subject } from 'rxjs';
import { map, take } from 'rxjs/operators';
import { DataControl, Dispatch } from '../../../core/global-classes';
import { ServiceLocator } from '../../../locator.service';
import { ConfirmBoxConfigService } from './confirm-box-config.service';
import { ConfirmBoxService } from './confirm-box-service';
export class ConfirmBoxInitializer {
    constructor() {
        /** @internal */
        this.confirmBoxCarrier = new ConfirmBoxCarrier();
    }
    openConfirmBox$() {
        return this.confirmBoxCarrier.openConfirmBox$().pipe(map(resp => {
            const basicConfirmBoxResponse = new ConfirmBoxResponse();
            const dataControl = new DataControl();
            dataControl.copyValuesFrom(resp, basicConfirmBoxResponse);
            return basicConfirmBoxResponse;
        }), take(1));
    }
    setButtons(_Buttons) {
        this.confirmBoxCarrier.setButtons(_Buttons);
    }
    setConfig(_ConfirmBoxCoreConfig) {
        this.confirmBoxCarrier.setConfig(_ConfirmBoxCoreConfig);
    }
    setDispatch(_Title, _Message = null) {
        this.confirmBoxCarrier.setTitle(_Title);
        this.confirmBoxCarrier.setMessage(_Message);
    }
    setTitle(_Title) {
        this.confirmBoxCarrier.setTitle(_Title);
    }
    setMessage(_Message) {
        this.confirmBoxCarrier.setMessage(_Message);
    }
    setButtonLabels(_Confirm, _Decline) {
        this.confirmBoxCarrier.setButtonLabels(_Confirm, _Decline);
    }
}
export class ConfirmBoxResponse extends DataControl {
    constructor() {
        super();
        // private Response: DialogPrepareResponse            = new DialogPrepareResponse();
        this.Success = null;
        this.ClickedButtonID = null;
    }
    setSuccess(_IsSuccess) {
        this.Success = _IsSuccess;
    }
    setClickedButtonID(_ClickedButtonID) {
        this.ClickedButtonID = _ClickedButtonID;
    }
}
export class ConfirmBoxEventsController {
    constructor(EntityUniqueID) {
        this.EntityUniqueID = EntityUniqueID;
        this._afterClosed = new Subject();
        this.afterClosed$ = this._afterClosed.asObservable();
        this._onButtonClick = new Subject();
        this.onButtonClick$ = this._onButtonClick.asObservable();
        this._buttonList = new Subject();
        this.buttonList$ = this._buttonList.asObservable();
    }
    close(_Response) {
        const response = _Response ? _Response : this.defaultResponse;
        this._afterClosed.next(response);
    }
    onButtonClick(_Button) {
        this.defaultResponse.setClickedButtonID(_Button.ID);
        this._onButtonClick.next(_Button);
    }
    setButtonList(_ButtonList) {
        this._buttonList.next(_ButtonList);
    }
    setDefaultResponse(_Response) {
        this.defaultResponse = _Response;
    }
}
// endregion
export class ConfirmBoxDefaultResponse extends ConfirmBoxResponse {
    constructor() {
        super();
        this.confirmBoxBelonging = null;
    }
    setBelonging(_ConfirmBoxBelonging) {
        this.confirmBoxBelonging = _ConfirmBoxBelonging;
    }
}
export class ConfirmBoxCarrier {
    constructor() {
        this.confirmBoxBelonging = new ConfirmBoxBelonging();
    }
    setButtons(_Buttons) {
        if (_Buttons.length) {
            this.confirmBoxBelonging.Buttons = _Buttons;
        }
    }
    setTitle(_Title) {
        this.confirmBoxBelonging.Dispatch.Title = _Title;
    }
    setMessage(_Message) {
        this.confirmBoxBelonging.Dispatch.Message = _Message;
    }
    setButtonLabels(_Confirm, _Decline) {
        this.confirmBoxBelonging.ConfirmBoxCoreConfig.ConfirmLabel = _Confirm;
        this.confirmBoxBelonging.ConfirmBoxCoreConfig.DeclineLabel = _Decline;
    }
    setConfig(_ConfirmBoxBelonging) {
        // region *** local UserConfig (defined on place where dialog is called) ***
        const dataControl = new DataControl();
        dataControl.copyValuesFrom(_ConfirmBoxBelonging, this.confirmBoxBelonging.ConfirmBoxCoreConfig);
        // endregion
    }
    openConfirmBox$() {
        const service = ServiceLocator.injector.get(ConfirmBoxService);
        const confirmBoxController = service.open(this.confirmBoxBelonging);
        return confirmBoxController.afterClosed$;
    }
}
export class ConfirmBoxSettings {
    constructor() {
        this.Buttons = [];
        this.ConfirmBoxCoreConfig = new ConfirmBoxCoreConfig();
        this.Dispatch = new Dispatch();
    }
}
export class ConfirmBoxCustomStyles {
    constructor() {
        this.TitleCSS = null;
        this.TextCSS = null;
        this.ButtonSectionCSS = null;
        this.ButtonCSS = null;
        this.WrapperCSS = null;
    }
}
export class ConfirmBoxCoreConfig {
    constructor() {
        this.Width = null;
        this.Height = null;
        this.ButtonPosition = null;
        this.LayoutType = null;
        this.Dispatch = null;
        this.ConfirmLabel = null;
        this.DeclineLabel = null;
        this.DisableIcon = null;
        this.AllowHTMLMessage = null;
        this.AnimationIn = null;
        this.AnimationOut = null;
        this.CustomStyles = new ConfirmBoxCustomStyles();
    }
}
export class ConfirmBoxBelonging extends ConfirmBoxSettings {
    constructor() {
        super();
        this.EntityUniqueID = 'C' + Math.random().toString(36).substr(2, 9);
        this.EventsController = new ConfirmBoxEventsController(this.EntityUniqueID);
        const ConfirmBoxCoreConfigurator = ServiceLocator.injector.get(ConfirmBoxConfigService);
        const baseSettings = new ConfirmBoxSettings();
        const dataControl = new DataControl();
        dataControl.copyValuesFrom(ConfirmBoxCoreConfigurator.productionConfig.ConfirmBoxCoreConfig, baseSettings.ConfirmBoxCoreConfig);
        this.ConfirmBoxCoreConfig = baseSettings.ConfirmBoxCoreConfig;
        this.Buttons = ConfirmBoxCoreConfigurator.productionConfig.Buttons.slice();
    }
}
//# sourceMappingURL=data:application/json;base64,