import { Subject } from 'rxjs';
import { map, take } from 'rxjs/operators';
import { DataControl, Sizes } from '../../../core/global-classes';
import { ServiceLocator } from '../../../locator.service';
import { DialogConfigService } from './dialog-config.service';
import { DialogService } from './dialog.service';
// region *** Public ***
export class DialogInitializer {
    constructor(component) {
        this.component = component;
        this.dialogCarrier = new DialogCarrier();
        this.dialogCarrier.setComponent(this.component);
    }
    /** Generic method accept expected payload from dynamic child component.*/
    openDialog$() {
        return this.dialogCarrier.openDialog$().pipe(map(resp => {
            const basicDialogResponse = new DialogResponse();
            const dataControl = new DataControl();
            dataControl.copyValuesFrom(resp, basicDialogResponse);
            return basicDialogResponse;
        }), take(1));
    }
    /** It accepts list of custom buttons */
    setButtons(_Buttons) {
        this.dialogCarrier.setButtons(_Buttons);
    }
    setCustomData(_CustomData) {
        this.dialogCarrier.setCustomData(_CustomData);
    }
    setConfig(_DialogConfig) {
        this.dialogCarrier.setConfig(_DialogConfig);
    }
}
export class DialogResponse extends DataControl {
    constructor() {
        super();
        // private Response: DialogPrepareResponse            = new DialogPrepareResponse();
        this.Payload = null;
        this.Success = null;
        this.ClickedButtonID = null;
    }
    /**
     * @ignore
     */
    setPayload(_Payload) {
        this.Payload = _Payload;
    }
    /**
     * @ignore
     */
    setClickedButtonID(_ClickedButtonID) {
        this.ClickedButtonID = _ClickedButtonID;
    }
}
export class DialogEventsController {
    constructor(EntityUniqueID) {
        this.EntityUniqueID = EntityUniqueID;
        this._afterClosed = new Subject();
        this.afterClosed$ = this._afterClosed.asObservable();
        this._afterLoader = new Subject();
        this.afterLoader$ = this._afterLoader.asObservable();
        this._onButtonClick = new Subject();
        this.onButtonClick$ = this._onButtonClick.asObservable();
        this._buttonList = new Subject();
        this.buttonList$ = this._buttonList.asObservable();
    }
    close(_Payload = null) {
        console.log(this.defaultResponse);
        this.defaultResponse.setPayload(_Payload);
        this._afterClosed.next(this.defaultResponse);
    }
    onButtonClick(_Button) {
        this.defaultResponse.setClickedButtonID(_Button.ID);
        this._onButtonClick.next(_Button);
    }
    setButtonList(_ButtonList) {
        this._buttonList.next(_ButtonList);
    }
    closeLoader() {
        setTimeout(() => {
            this._afterLoader.next(this.EntityUniqueID);
        }, 0);
    }
    setDefaultResponse(_Response) {
        this.defaultResponse = _Response;
    }
}
// endregion
export class DialogDefaultResponse extends DialogResponse {
    constructor() {
        super();
        this.DialogBelonging = null;
    }
    setBelonging(_DialogBelonging) {
        this.DialogBelonging = _DialogBelonging;
    }
}
export class DialogCarrier {
    constructor() {
        this.dialogBelonging = new DialogBelonging();
    }
    setComponent(_Component) {
        this.component = _Component;
    }
    setButtons(_Buttons) {
        if (_Buttons.length) {
            this.dialogBelonging.Buttons = _Buttons;
        }
    }
    setCustomData(_CustomData) {
        this.dialogBelonging.CustomData = _CustomData;
    }
    setConfig(_DialogConfig) {
        // region *** local UserConfig (defined on place where dialog is called) ***
        const dataControl = new DataControl();
        dataControl.copyValuesFrom(_DialogConfig, this.dialogBelonging.DialogCoreConfig);
        if (_DialogConfig === null || _DialogConfig === void 0 ? void 0 : _DialogConfig.LoaderComponent) {
            this.dialogBelonging.DialogCoreConfig.DisplayLoader = true;
        }
        // endregion
    }
    openDialog$() {
        const service = ServiceLocator.injector.get(DialogService);
        const dialogController = service.open(this.component, this.dialogBelonging);
        return dialogController.afterClosed$;
    }
}
export class DialogCoreConfig extends Sizes {
    constructor() {
        super(...arguments);
        this.EscapeKeyClose = null;
        this.HideScrollbar = null;
        this.ButtonPosition = null;
        this.LayoutType = null;
        this.DisplayLoader = null;
        this.LoaderComponent = null;
        this.AnimationIn = null;
        this.AnimationOut = null;
    }
}
export class DialogSettings {
    constructor() {
        this.Buttons = [];
        this.DialogCoreConfig = new DialogCoreConfig();
    }
}
export class DialogBelonging extends DialogSettings {
    constructor() {
        super();
        /** @internal */
        this.EntityUniqueID = 'D' + Math.random().toString(36).substr(2, 9);
        this.CustomData = null;
        this.EventsController = new DialogEventsController(this.EntityUniqueID);
        const dialogConfigurator = ServiceLocator.injector.get(DialogConfigService);
        const baseSettings = new DialogSettings();
        const dataControl = new DataControl();
        dataControl.copyValuesFrom(dialogConfigurator.productionConfig.DialogCoreConfig, baseSettings.DialogCoreConfig);
        this.DialogCoreConfig = baseSettings.DialogCoreConfig;
        this.Buttons = dialogConfigurator.productionConfig.Buttons.slice();
    }
}
//# sourceMappingURL=data:application/json;base64,