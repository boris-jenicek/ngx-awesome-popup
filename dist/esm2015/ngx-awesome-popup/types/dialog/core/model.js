import { Subject } from "rxjs";
import { map, take } from "rxjs/operators";
import { GlobalClass } from "../../../core/global";
import { ServiceLocator } from "../../../locator.service";
import { DialogConfigService } from "./dialog-config.service";
import { DialogService } from "./dialog.service";
export var DialogClass;
(function (DialogClass) {
    // region *** Public ***
    class DialogInitializer {
        constructor(component) {
            this.component = component;
            this.dialogCarrier = new DialogClass.DialogCarrier();
            this.dialogCarrier.setComponent(this.component);
        }
        /** Generic method accept expected payload from dynamic child component.*/
        openDialog$() {
            return this.dialogCarrier.openDialog$().pipe(map((resp) => {
                const basicDialogResponse = new DialogResponse();
                const dataControl = new GlobalClass.DataControl();
                dataControl.copyValuesFrom(resp, basicDialogResponse);
                return basicDialogResponse;
            }), take(1));
        }
        /** It accepts list of custom buttons */
        setButtons(_Buttons) {
            this.dialogCarrier.setButtons(_Buttons);
        }
        setCustomData(_CustomData) {
            this.dialogCarrier.setCustomData(_CustomData);
        }
        setConfig(_DialogConfig) {
            this.dialogCarrier.setConfig(_DialogConfig);
        }
    }
    DialogClass.DialogInitializer = DialogInitializer;
    class DialogResponse extends GlobalClass.DataControl {
        constructor() {
            super();
            // private Response: DialogPrepareResponse            = new DialogPrepareResponse();
            this.Payload = null;
            this.Success = null;
            this.ClickedButtonID = null;
        }
        /**
         * @ignore
         */
        setPayload(_Payload) {
            this.Payload = _Payload;
        }
        /**
         * @ignore
         */
        setClickedButtonID(_ClickedButtonID) {
            this.ClickedButtonID = _ClickedButtonID;
        }
    }
    DialogClass.DialogResponse = DialogResponse;
    class DialogEventsController {
        constructor(EntityUniqueID) {
            this.EntityUniqueID = EntityUniqueID;
            this._afterClosed = new Subject();
            this.afterClosed$ = this._afterClosed.asObservable();
            this._afterLoader = new Subject();
            this.afterLoader$ = this._afterLoader.asObservable();
            this._onButtonClick = new Subject();
            this.onButtonClick$ = this._onButtonClick.asObservable();
            this._buttonList = new Subject();
            this.buttonList$ = this._buttonList.asObservable();
        }
        close(_Payload = null) {
            this.defaultResponse.setPayload(_Payload);
            this._afterClosed.next(this.defaultResponse);
        }
        onButtonClick(_Button) {
            this.defaultResponse.setClickedButtonID(_Button.ID);
            this._onButtonClick.next(_Button);
        }
        setButtonList(_ButtonList) {
            this._buttonList.next(_ButtonList);
        }
        closeLoader() {
            setTimeout(() => {
                this._afterLoader.next(this.EntityUniqueID);
            }, 0);
        }
        setDefaultResponse(_Response) {
            this.defaultResponse = _Response;
        }
    }
    DialogClass.DialogEventsController = DialogEventsController;
    // endregion
    class DialogDefaultResponse extends DialogResponse {
        constructor() {
            super();
            this.DialogBelonging = null;
        }
        setBelonging(_DialogBelonging) {
            this.DialogBelonging = _DialogBelonging;
        }
    }
    DialogClass.DialogDefaultResponse = DialogDefaultResponse;
    class DialogCarrier {
        constructor() {
            this.dialogBelonging = new DialogBelonging();
        }
        setComponent(_Component) {
            this.component = _Component;
        }
        setButtons(_Buttons) {
            if (_Buttons.length) {
                this.dialogBelonging.Buttons = _Buttons;
            }
        }
        setCustomData(_CustomData) {
            this.dialogBelonging.CustomData = _CustomData;
        }
        setConfig(_DialogConfig) {
            // region *** local UserConfig (defined on place where dialog is called) ***
            const dataControl = new GlobalClass.DataControl();
            dataControl.copyValuesFrom(_DialogConfig, this.dialogBelonging.DialogCoreConfig);
            if (_DialogConfig === null || _DialogConfig === void 0 ? void 0 : _DialogConfig.LoaderComponent) {
                this.dialogBelonging.DialogCoreConfig.DisplayLoader = true;
            }
            // endregion
        }
        openDialog$() {
            const service = ServiceLocator.injector.get(DialogService);
            const dialogController = service.open(this.component, this.dialogBelonging);
            return dialogController.afterClosed$;
        }
    }
    DialogClass.DialogCarrier = DialogCarrier;
    class DialogCoreConfig extends GlobalClass.Sizes {
        constructor() {
            super(...arguments);
            this.EscapeKeyClose = null;
            this.HideScrollbar = null;
            this.ButtonPosition = null;
            this.LayoutType = null;
            this.DisplayLoader = null;
            this.LoaderComponent = null;
        }
    }
    DialogClass.DialogCoreConfig = DialogCoreConfig;
    class DialogSettings {
        constructor() {
            this.Buttons = [];
            this.DialogCoreConfig = new DialogCoreConfig();
        }
    }
    DialogClass.DialogSettings = DialogSettings;
    class DialogBelonging extends DialogSettings {
        constructor() {
            super();
            /** @internal */
            this.EntityUniqueID = "D" + Math.random().toString(36).substr(2, 9);
            this.CustomData = null;
            this.EventsController = new DialogEventsController(this.EntityUniqueID);
            const dialogConfigurator = ServiceLocator.injector.get(DialogConfigService);
            const baseSettings = new DialogSettings();
            const dataControl = new GlobalClass.DataControl();
            dataControl.copyValuesFrom(dialogConfigurator.productionConfig.DialogCoreConfig, baseSettings.DialogCoreConfig);
            this.DialogCoreConfig = baseSettings.DialogCoreConfig;
            this.Buttons = dialogConfigurator.productionConfig.Buttons.slice();
        }
    }
    DialogClass.DialogBelonging = DialogBelonging;
})(DialogClass || (DialogClass = {}));
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibW9kZWwuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi9uZ3gtYXdlc29tZS1wb3B1cC90eXBlcy9kaWFsb2cvY29yZS9tb2RlbC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFDQSxPQUFPLEVBQWMsT0FBTyxFQUFFLE1BQU0sTUFBTSxDQUFDO0FBQzNDLE9BQU8sRUFBRSxHQUFHLEVBQUUsSUFBSSxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7QUFFM0MsT0FBTyxFQUFFLFdBQVcsRUFBbUIsTUFBTSxzQkFBc0IsQ0FBQztBQUNwRSxPQUFPLEVBQUUsY0FBYyxFQUFFLE1BQU0sMEJBQTBCLENBQUM7QUFDMUQsT0FBTyxFQUFFLG1CQUFtQixFQUFFLE1BQU0seUJBQXlCLENBQUM7QUFDOUQsT0FBTyxFQUFFLGFBQWEsRUFBRSxNQUFNLGtCQUFrQixDQUFDO0FBMkZqRCxNQUFNLEtBQVcsV0FBVyxDQXdOM0I7QUF4TkQsV0FBaUIsV0FBVztJQUMxQix3QkFBd0I7SUFFeEIsTUFBYSxpQkFBaUI7UUFHNUIsWUFBb0IsU0FBb0I7WUFBcEIsY0FBUyxHQUFULFNBQVMsQ0FBVztZQUZoQyxrQkFBYSxHQUFrQixJQUFJLFdBQVcsQ0FBQyxhQUFhLEVBQUUsQ0FBQztZQUdyRSxJQUFJLENBQUMsYUFBYSxDQUFDLFlBQVksQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLENBQUM7UUFDbEQsQ0FBQztRQUVELDBFQUEwRTtRQUMxRSxXQUFXO1lBR1QsT0FBTyxJQUFJLENBQUMsYUFBYSxDQUFDLFdBQVcsRUFBRSxDQUFDLElBQUksQ0FDMUMsR0FBRyxDQUFDLENBQUMsSUFBSSxFQUFFLEVBQUU7Z0JBQ1gsTUFBTSxtQkFBbUIsR0FBRyxJQUFJLGNBQWMsRUFBRSxDQUFDO2dCQUNqRCxNQUFNLFdBQVcsR0FBRyxJQUFJLFdBQVcsQ0FBQyxXQUFXLEVBQUUsQ0FBQztnQkFDbEQsV0FBVyxDQUFDLGNBQWMsQ0FBQyxJQUFJLEVBQUUsbUJB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R0FBRyxJQUFJLGNBQWMsRUFBRSxDQUFDO1lBQzFDLE1BQU0sV0FBVyxHQUFHLElBQUksV0FBVyxDQUFDLFdBQVcsRUFBRSxDQUFDO1lBQ2xELFdBQVcsQ0FBQyxjQUFjLENBQ3hCLGtCQUFrQixDQUFDLGdCQUFnQixDQUFDLGdCQUFnQixFQUNwRCxZQUFZLENBQUMsZ0JBQWdCLENBQzlCLENBQUM7WUFDRixJQUFJLENBQUMsZ0JBQWdCLEdBQUcsWUFBWSxDQUFDLGdCQUFnQixDQUFDO1lBQ3RELElBQUksQ0FBQyxPQUFPLEdBQUcsa0JBQWtCLENBQUMsZ0JBQWdCLENBQUMsT0FBTyxDQUFDLEtBQUssRUFBRSxDQUFDO1FBQ3JFLENBQUM7S0FDRjtJQXhCWSwyQkFBZSxrQkF3QjNCLENBQUE7QUFDSCxDQUFDLEVBeE5nQixXQUFXLEtBQVgsV0FBVyxRQXdOM0IiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBUeXBlIH0gZnJvbSBcIkBhbmd1bGFyL2NvcmVcIjtcbmltcG9ydCB7IE9ic2VydmFibGUsIFN1YmplY3QgfSBmcm9tIFwicnhqc1wiO1xuaW1wb3J0IHsgbWFwLCB0YWtlIH0gZnJvbSBcInJ4anMvb3BlcmF0b3JzXCI7XG5pbXBvcnQgeyBEaWFsb2dMYXlvdXREaXNwbGF5LCBWZXJ0aWNhbFBvc2l0aW9uIH0gZnJvbSBcIi4uLy4uLy4uL2NvcmUvZW51bXNcIjtcbmltcG9ydCB7IEdsb2JhbENsYXNzLCBHbG9iYWxJbnRlcmZhY2UgfSBmcm9tIFwiLi4vLi4vLi4vY29yZS9nbG9iYWxcIjtcbmltcG9ydCB7IFNlcnZpY2VMb2NhdG9yIH0gZnJvbSBcIi4uLy4uLy4uL2xvY2F0b3Iuc2VydmljZVwiO1xuaW1wb3J0IHsgRGlhbG9nQ29uZmlnU2VydmljZSB9IGZyb20gXCIuL2RpYWxvZy1jb25maWcuc2VydmljZVwiO1xuaW1wb3J0IHsgRGlhbG9nU2VydmljZSB9IGZyb20gXCIuL2RpYWxvZy5zZXJ2aWNlXCI7XG5cbmV4cG9ydCBuYW1lc3BhY2UgRGlhbG9nSW50ZXJmYWNlIHtcbiAgLyoqXG4gICAqIENoZWNrIGludGVyZmFjZSBvZiBwcm9wZXJ0aWVzLlxuICAgKi9cbiAgZXhwb3J0IGludGVyZmFjZSBJRGlhbG9nVXNlckNvbmZpZyB7XG4gICAgQnV0dG9ucz86IEdsb2JhbEludGVyZmFjZS5JQnV0dG9uW107XG4gICAgRGlhbG9nQ29yZUNvbmZpZz86IERpYWxvZ0ludGVyZmFjZS5JRGlhbG9nQ29yZUNvbmZpZztcbiAgfVxuXG4gIC8qKlxuICAgKiBPcHRpb25hbCB1c2VyIGNvbmZpZ3VyYXRpb24uXG4gICAqXG4gICAqIEV4YW1wbGU6XG4gICAqIGBgYHR5cGVzY3JpcHRcbiAgICogLy8gRGlhbG9nIGNvcmUgY29uZmlnIG9iamVjdCBleGFtcGxlLlxuICAgKiBjb25zdCBkaWFsb2dDb3JlQ29uZmlnID0ge1xuICAgKiAgICAgRGlhbG9nQ29yZUNvbmZpZzoge1xuICAgKiAgICAgICAgV2lkdGggICAgICAgICA6ICc1MDBweCcsXG4gICAqICAgICAgICBIZWlnaHQgICAgICAgIDogJzUwMHB4JyxcbiAgICogICAgICAgIEJ1dHRvblBvc2l0aW9uOiAncmlnaHQnLFxuICAgKiAgICAgICAgTGF5b3V0VHlwZTogRGlhbG9nTGF5b3V0RGlzcGxheS5JTkZPLFxuICAgKiAgICAgICAgLy8gTG9hZGVyQ29tcG9uZW50OiAvLyBBbnkgQW5ndWxhciBjb21wb25lbnQgY2xhc3MgbmFtZSBjYW4gYmUgaW5jbHVkZWQgYXMgYSBsb2FkZXIuXG4gICAqICAgICAgICBEaXNwbGF5TG9hZGVyOiBmYWxzZSAvLyBUaGlzIHdpbGwgb3ZlcnJpZGUgTG9hZGVyQ29tcG9uZW50LlxuICAgKiAgICAgfVxuICAgKiAgfVxuICAgKiBgYGBcbiAgICovXG4gIGV4cG9ydCBpbnRlcmZhY2UgSURpYWxvZ0NvcmVDb25maWcgZXh0ZW5kcyBHbG9iYWxJbnRlcmZhY2UuSVNpemVzIHtcbiAgICBFc2NhcGVLZXlDbG9zZT86IGJvb2xlYW47XG4gICAgSGlkZVNjcm9sbGJhcj86IGJvb2xlYW47XG4gICAgQnV0dG9uUG9zaXRpb24/OiBWZXJ0aWNhbFBvc2l0aW9uO1xuICAgIExheW91dFR5cGU/OiBEaWFsb2dMYXlvdXREaXNwbGF5O1xuICAgIERpc3BsYXlMb2FkZXI/OiBib29sZWFuO1xuICAgIExvYWRlckNvbXBvbmVudD86IFR5cGU8YW55PjtcbiAgfVxuXG4gIGV4cG9ydCBpbnRlcmZhY2UgSURpYWxvZ0JlbG9uZ2luZyB7XG4gICAgQnV0dG9uczogR2xvYmFsSW50ZXJmYWNlLklCdXR0b25bXTtcbiAgICBEaWFsb2dDb3JlQ29uZmlnOiBEaWFsb2dJbnRlcmZhY2UuSURpYWxvZ0NvcmVDb25maWc7XG4gICAgRW50aXR5VW5pcXVlSUQ6IHN0cmluZztcbiAgICBDdXN0b21EYXRhOiBhbnk7XG4gICAgRXZlbnRzQ29udHJvbGxlcjogRGlhbG9nSW50ZXJmYWNlLklEaWFsb2dFdmVudHNDb250cm9sbGVyO1xuICB9XG5cbiAgZXhwb3J0IGludGVyZmFjZSBJRGlhbG9nRXZlbnRzQ29udHJvbGxlciB7XG4gICAgLyoqIEBpbnRlcm5hbCAqL1xuICAgIGRlZmF1bHRSZXNwb25zZTogRGlhbG9nSW50ZXJmYWNlLklQcml2YXRlUmVzcG9uc2VNZXJnZWQ7XG4gICAgLyoqIEBpbnRlcm5hbCAqL1xuICAgIGFmdGVyQ2xvc2VkJDogT2JzZXJ2YWJsZTxEaWFsb2dJbnRlcmZhY2UuSVByaXZhdGVSZXNwb25zZU1lcmdlZD47XG4gICAgLyoqIEBpbnRlcm5hbCAqL1xuICAgIGFmdGVyTG9hZGVyJDogT2JzZXJ2YWJsZTxzdHJpbmc+O1xuICAgIC8qKiBAaW50ZXJuYWwgKi9cbiAgICBvbkJ1dHRvbkNsaWNrJDogT2JzZXJ2YWJsZTxHbG9iYWxJbnRlcmZhY2UuSUJ1dHRvbj47XG4gICAgLyoqIEBpbnRlcm5hbCAqL1xuICAgIGJ1dHRvbkxpc3QkOiBPYnNlcnZhYmxlPEdsb2JhbEludGVyZmFjZS5JQnV0dG9uW10+O1xuXG4gICAgY2xvc2UoX1BheWxvYWQ/OiBhbnkpOiB2b2lkO1xuXG4gICAgb25CdXR0b25DbGljayhfQnV0dG9uOiBHbG9iYWxJbnRlcmZhY2UuSUJ1dHRvbik6IHZvaWQ7XG5cbiAgICBzZXRCdXR0b25MaXN0KF9CdXR0b25MaXN0OiBHbG9iYWxJbnRlcmZhY2UuSUJ1dHRvbltdKTogdm9pZDtcblxuICAgIGNsb3NlTG9hZGVyKCk6IHZvaWQ7XG5cbiAgICBzZXREZWZhdWx0UmVzcG9uc2UoX1Jlc3BvbnNlOiBEaWFsb2dJbnRlcmZhY2UuSVByaXZhdGVSZXNwb25zZU1lcmdlZCk6IHZvaWQ7XG5cbiAgICBzZXREZWZhdWx0UmVzcG9uc2UoX1Jlc3BvbnNlOiBEaWFsb2dJbnRlcmZhY2UuSVByaXZhdGVSZXNwb25zZU1lcmdlZCk6IHZvaWQ7XG4gIH1cblxuICBleHBvcnQgaW50ZXJmYWNlIElEaWFsb2dSZXNwb25zZSB7XG4gICAgc2V0UGF5bG9hZChfUGF5bG9hZDogYW55KTogdm9pZDtcblxuICAgIHNldENsaWNrZWRCdXR0b25JRChfQ2xpY2tlZEJ1dHRvbklEKTogdm9pZDtcbiAgfVxuXG4gIGV4cG9ydCBpbnRlcmZhY2UgSURpYWxvZ1B1YmxpY1Jlc3BvbnNlPFJlc3BvbnNlUGF5bG9hZD4ge1xuICAgIC8qKiBHZW5lcmljIHByb3BlcnR5IHR5cGUsIGFjY2VwdCBleHBlY3RlZCBwYXlsb2FkIGZyb20gZHluYW1pYyBjaGlsZCBjb21wb25lbnQuICovXG4gICAgUGF5bG9hZDogUmVzcG9uc2VQYXlsb2FkO1xuICAgIFN1Y2Nlc3M6IGJvb2xlYW47XG4gICAgQ2xpY2tlZEJ1dHRvbklEOiBzdHJpbmc7XG4gIH1cblxuICBleHBvcnQgaW50ZXJmYWNlIElQcml2YXRlUmVzcG9uc2VNZXJnZWRcbiAgICBleHRlbmRzIElEaWFsb2dSZXNwb25zZSxcbiAgICAgIEdsb2JhbEludGVyZmFjZS5JUHJpdmF0ZVJlc3BvbnNlIHtcbiAgICBEaWFsb2dCZWxvbmdpbmc6IERpYWxvZ0ludGVyZmFjZS5JRGlhbG9nQmVsb25naW5nO1xuICB9XG59XG5cbmV4cG9ydCBuYW1lc3BhY2UgRGlhbG9nQ2xhc3Mge1xuICAvLyByZWdpb24gKioqIFB1YmxpYyAqKipcblxuICBleHBvcnQgY2xhc3MgRGlhbG9nSW5pdGlhbGl6ZXIge1xuICAgIHByaXZhdGUgZGlhbG9nQ2FycmllcjogRGlhbG9nQ2FycmllciA9IG5ldyBEaWFsb2dDbGFzcy5EaWFsb2dDYXJyaWVyKCk7XG5cbiAgICBjb25zdHJ1Y3Rvcihwcml2YXRlIGNvbXBvbmVudDogVHlwZTxhbnk+KSB7XG4gICAgICB0aGlzLmRpYWxvZ0NhcnJpZXIuc2V0Q29tcG9uZW50KHRoaXMuY29tcG9uZW50KTtcbiAgICB9XG5cbiAgICAvKiogR2VuZXJpYyBtZXRob2QgYWNjZXB0IGV4cGVjdGVkIHBheWxvYWQgZnJvbSBkeW5hbWljIGNoaWxkIGNvbXBvbmVudC4qL1xuICAgIG9wZW5EaWFsb2ckPFJlc3BvbnNlUGF5bG9hZCA9IGFueT4oKTogT2JzZXJ2YWJsZTxcbiAgICAgIERpYWxvZ0ludGVyZmFjZS5JRGlhbG9nUHVibGljUmVzcG9uc2U8UmVzcG9uc2VQYXlsb2FkPlxuICAgID4ge1xuICAgICAgcmV0dXJuIHRoaXMuZGlhbG9nQ2Fycmllci5vcGVuRGlhbG9nJCgpLnBpcGUoXG4gICAgICAgIG1hcCgocmVzcCkgPT4ge1xuICAgICAgICAgIGNvbnN0IGJhc2ljRGlhbG9nUmVzcG9uc2UgPSBuZXcgRGlhbG9nUmVzcG9uc2UoKTtcbiAgICAgICAgICBjb25zdCBkYXRhQ29udHJvbCA9IG5ldyBHbG9iYWxDbGFzcy5EYXRhQ29udHJvbCgpO1xuICAgICAgICAgIGRhdGFDb250cm9sLmNvcHlWYWx1ZXNGcm9tKHJlc3AsIGJhc2ljRGlhbG9nUmVzcG9uc2UpO1xuICAgICAgICAgIHJldHVybiBiYXNpY0RpYWxvZ1Jlc3BvbnNlO1xuICAgICAgICB9KSxcbiAgICAgICAgdGFrZSgxKVxuICAgICAgKTtcbiAgICB9XG5cbiAgICAvKiogSXQgYWNjZXB0cyBsaXN0IG9mIGN1c3RvbSBidXR0b25zICovXG4gICAgc2V0QnV0dG9ucyhfQnV0dG9uczogR2xvYmFsSW50ZXJmYWNlLklCdXR0b25bXSk6IHZvaWQge1xuICAgICAgdGhpcy5kaWFsb2dDYXJyaWVyLnNldEJ1dHRvbnMoX0J1dHRvbnMpO1xuICAgIH1cblxuICAgIHNldEN1c3RvbURhdGEoX0N1c3RvbURhdGE6IGFueSkge1xuICAgICAgdGhpcy5kaWFsb2dDYXJyaWVyLnNldEN1c3RvbURhdGEoX0N1c3RvbURhdGEpO1xuICAgIH1cblxuICAgIHNldENvbmZpZyhfRGlhbG9nQ29uZmlnOiBEaWFsb2dJbnRlcmZhY2UuSURpYWxvZ0NvcmVDb25maWcpIHtcbiAgICAgIHRoaXMuZGlhbG9nQ2Fycmllci5zZXRDb25maWcoX0RpYWxvZ0NvbmZpZyk7XG4gICAgfVxuICB9XG5cbiAgZXhwb3J0IGNsYXNzIERpYWxvZ1Jlc3BvbnNlXG4gICAgZXh0ZW5kcyBHbG9iYWxDbGFzcy5EYXRhQ29udHJvbFxuICAgIGltcGxlbWVudHNcbiAgICAgIERpYWxvZ0ludGVyZmFjZS5JRGlhbG9nUmVzcG9uc2UsXG4gICAgICBEaWFsb2dJbnRlcmZhY2UuSURpYWxvZ1B1YmxpY1Jlc3BvbnNlPGFueT4ge1xuICAgIC8vIHByaXZhdGUgUmVzcG9uc2U6IERpYWxvZ1ByZXBhcmVSZXNwb25zZSAgICAgICAgICAgID0gbmV3IERpYWxvZ1ByZXBhcmVSZXNwb25zZSgpO1xuXG4gICAgUGF5bG9hZDogYW55ID0gbnVsbDtcbiAgICBTdWNjZXNzOiBib29sZWFuID0gbnVsbDtcbiAgICBDbGlja2VkQnV0dG9uSUQ6IHN0cmluZyA9IG51bGw7XG5cbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgIHN1cGVyKCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQGlnbm9yZVxuICAgICAqL1xuICAgIHNldFBheWxvYWQoX1BheWxvYWQ6IGFueSk6IHZvaWQge1xuICAgICAgdGhpcy5QYXlsb2FkID0gX1BheWxvYWQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQGlnbm9yZVxuICAgICAqL1xuICAgIHNldENsaWNrZWRCdXR0b25JRChfQ2xpY2tlZEJ1dHRvbklEKTogdm9pZCB7XG4gICAgICB0aGlzLkNsaWNrZWRCdXR0b25JRCA9IF9DbGlja2VkQnV0dG9uSUQ7XG4gICAgfVxuICB9XG5cbiAgZXhwb3J0IGNsYXNzIERpYWxvZ0V2ZW50c0NvbnRyb2xsZXJcbiAgICBpbXBsZW1lbnRzIERpYWxvZ0ludGVyZmFjZS5JRGlhbG9nRXZlbnRzQ29udHJvbGxlciB7XG4gICAgZGVmYXVsdFJlc3BvbnNlOiBEaWFsb2dJbnRlcmZhY2UuSVByaXZhdGVSZXNwb25zZU1lcmdlZDtcblxuICAgIHByaXZhdGUgcmVhZG9ubHkgX2FmdGVyQ2xvc2VkOiBTdWJqZWN0PERpYWxvZ0ludGVyZmFjZS5JUHJpdmF0ZVJlc3BvbnNlTWVyZ2VkPiA9IG5ldyBTdWJqZWN0PERpYWxvZ0ludGVyZmFjZS5JUHJpdmF0ZVJlc3BvbnNlTWVyZ2VkPigpO1xuICAgIGFmdGVyQ2xvc2VkJDogT2JzZXJ2YWJsZTxEaWFsb2dJbnRlcmZhY2UuSVByaXZhdGVSZXNwb25zZU1lcmdlZD4gPSB0aGlzLl9hZnRlckNsb3NlZC5hc09ic2VydmFibGUoKTtcblxuICAgIHByaXZhdGUgcmVhZG9ubHkgX2FmdGVyTG9hZGVyOiBhbnkgPSBuZXcgU3ViamVjdDxzdHJpbmc+KCk7XG4gICAgYWZ0ZXJMb2FkZXIkOiBPYnNlcnZhYmxlPHN0cmluZz4gPSB0aGlzLl9hZnRlckxvYWRlci5hc09ic2VydmFibGUoKTtcbiAgICBwcml2YXRlIHJlYWRvbmx5IF9vbkJ1dHRvbkNsaWNrOiBTdWJqZWN0PEdsb2JhbEludGVyZmFjZS5JQnV0dG9uPiA9IG5ldyBTdWJqZWN0PEdsb2JhbEludGVyZmFjZS5JQnV0dG9uPigpO1xuICAgIG9uQnV0dG9uQ2xpY2skOiBPYnNlcnZhYmxlPEdsb2JhbEludGVyZmFjZS5JQnV0dG9uPiA9IHRoaXMuX29uQnV0dG9uQ2xpY2suYXNPYnNlcnZhYmxlKCk7XG4gICAgcHJpdmF0ZSByZWFkb25seSBfYnV0dG9uTGlzdDogU3ViamVjdDxcbiAgICAgIEdsb2JhbEludGVyZmFjZS5JQnV0dG9uW11cbiAgICA+ID0gbmV3IFN1YmplY3Q8R2xvYmFsSW50ZXJmYWNlLklCdXR0b25bXT4oKTtcbiAgICBidXR0b25MaXN0JDogT2JzZXJ2YWJsZTxcbiAgICAgIEdsb2JhbEludGVyZmFjZS5JQnV0dG9uW11cbiAgICA+ID0gdGhpcy5fYnV0dG9uTGlzdC5hc09ic2VydmFibGUoKTtcblxuICAgIGNvbnN0cnVjdG9yKHByaXZhdGUgRW50aXR5VW5pcXVlSUQ6IHN0cmluZykge31cblxuICAgIGNsb3NlKF9QYXlsb2FkOiBhbnkgPSBudWxsKTogdm9pZCB7XG4gICAgICB0aGlzLmRlZmF1bHRSZXNwb25zZS5zZXRQYXlsb2FkKF9QYXlsb2FkKTtcbiAgICAgIHRoaXMuX2FmdGVyQ2xvc2VkLm5leHQodGhpcy5kZWZhdWx0UmVzcG9uc2UpO1xuICAgIH1cblxuICAgIG9uQnV0dG9uQ2xpY2soX0J1dHRvbjogR2xvYmFsSW50ZXJmYWNlLklCdXR0b24pOiB2b2lkIHtcbiAgICAgIHRoaXMuZGVmYXVsdFJlc3BvbnNlLnNldENsaWNrZWRCdXR0b25JRChfQnV0dG9uLklEKTtcbiAgICAgIHRoaXMuX29uQnV0dG9uQ2xpY2submV4dChfQnV0dG9uKTtcbiAgICB9XG5cbiAgICBzZXRCdXR0b25MaXN0KF9CdXR0b25MaXN0OiBHbG9iYWxJbnRlcmZhY2UuSUJ1dHRvbltdKTogdm9pZCB7XG4gICAgICB0aGlzLl9idXR0b25MaXN0Lm5leHQoX0J1dHRvbkxpc3QpO1xuICAgIH1cblxuICAgIGNsb3NlTG9hZGVyKCk6IHZvaWQge1xuICAgICAgc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICAgIHRoaXMuX2FmdGVyTG9hZGVyLm5leHQodGhpcy5FbnRpdHlVbmlxdWVJRCk7XG4gICAgICB9LCAwKTtcbiAgICB9XG5cbiAgICBzZXREZWZhdWx0UmVzcG9uc2UoXG4gICAgICBfUmVzcG9uc2U6IERpYWxvZ0ludGVyZmFjZS5JUHJpdmF0ZVJlc3BvbnNlTWVyZ2VkXG4gICAgKTogdm9pZCB7XG4gICAgICB0aGlzLmRlZmF1bHRSZXNwb25zZSA9IF9SZXNwb25zZTtcbiAgICB9XG4gIH1cblxuICAvLyBlbmRyZWdpb25cblxuICBleHBvcnQgY2xhc3MgRGlhbG9nRGVmYXVsdFJlc3BvbnNlXG4gICAgZXh0ZW5kcyBEaWFsb2dSZXNwb25zZVxuICAgIGltcGxlbWVudHMgRGlhbG9nSW50ZXJmYWNlLklQcml2YXRlUmVzcG9uc2VNZXJnZWQge1xuICAgIERpYWxvZ0JlbG9uZ2luZzogRGlhbG9nSW50ZXJmYWNlLklEaWFsb2dCZWxvbmdpbmcgPSBudWxsO1xuXG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICBzdXBlcigpO1xuICAgIH1cblxuICAgIHNldEJlbG9uZ2luZyhfRGlhbG9nQmVsb25naW5nKTogdm9pZCB7XG4gICAgICB0aGlzLkRpYWxvZ0JlbG9uZ2luZyA9IF9EaWFsb2dCZWxvbmdpbmc7XG4gICAgfVxuICB9XG5cbiAgZXhwb3J0IGNsYXNzIERpYWxvZ0NhcnJpZXIge1xuICAgIGRpYWxvZ0JlbG9uZ2luZzogRGlhbG9nQmVsb25naW5nID0gbmV3IERpYWxvZ0JlbG9uZ2luZygpO1xuICAgIHByaXZhdGUgY29tcG9uZW50OiBUeXBlPGFueT47XG5cbiAgICBjb25zdHJ1Y3RvcigpIHt9XG5cbiAgICBzZXRDb21wb25lbnQoX0NvbXBvbmVudDogVHlwZTxhbnk+KTogdm9pZCB7XG4gICAgICB0aGlzLmNvbXBvbmVudCA9IF9Db21wb25lbnQ7XG4gICAgfVxuXG4gICAgc2V0QnV0dG9ucyhfQnV0dG9uczogR2xvYmFsSW50ZXJmYWNlLklCdXR0b25bXSkge1xuICAgICAgaWYgKF9CdXR0b25zLmxlbmd0aCkge1xuICAgICAgICB0aGlzLmRpYWxvZ0JlbG9uZ2luZy5CdXR0b25zID0gX0J1dHRvbnM7XG4gICAgICB9XG4gICAgfVxuXG4gICAgc2V0Q3VzdG9tRGF0YShfQ3VzdG9tRGF0YTogYW55KSB7XG4gICAgICB0aGlzLmRpYWxvZ0JlbG9uZ2luZy5DdXN0b21EYXRhID0gX0N1c3RvbURhdGE7XG4gICAgfVxuXG4gICAgc2V0Q29uZmlnKF9EaWFsb2dDb25maWc6IERpYWxvZ0ludGVyZmFjZS5JRGlhbG9nQ29yZUNvbmZpZykge1xuICAgICAgLy8gcmVnaW9uICoqKiBsb2NhbCBVc2VyQ29uZmlnIChkZWZpbmVkIG9uIHBsYWNlIHdoZXJlIGRpYWxvZyBpcyBjYWxsZWQpICoqKlxuICAgICAgY29uc3QgZGF0YUNvbnRyb2wgPSBuZXcgR2xvYmFsQ2xhc3MuRGF0YUNvbnRyb2woKTtcbiAgICAgIGRhdGFDb250cm9sLmNvcHlWYWx1ZXNGcm9tKFxuICAgICAgICBfRGlhbG9nQ29uZmlnLFxuICAgICAgICB0aGlzLmRpYWxvZ0JlbG9uZ2luZy5EaWFsb2dDb3JlQ29uZmlnXG4gICAgICApO1xuICAgICAgaWYgKF9EaWFsb2dDb25maWc/LkxvYWRlckNvbXBvbmVudCkge1xuICAgICAgICB0aGlzLmRpYWxvZ0JlbG9uZ2luZy5EaWFsb2dDb3JlQ29uZmlnLkRpc3BsYXlMb2FkZXIgPSB0cnVlO1xuICAgICAgfVxuICAgICAgLy8gZW5kcmVnaW9uXG4gICAgfVxuXG4gICAgb3BlbkRpYWxvZyQoKTogT2JzZXJ2YWJsZTxEaWFsb2dJbnRlcmZhY2UuSVByaXZhdGVSZXNwb25zZU1lcmdlZD4ge1xuICAgICAgY29uc3Qgc2VydmljZTogRGlhbG9nU2VydmljZSA9IFNlcnZpY2VMb2NhdG9yLmluamVjdG9yLmdldChEaWFsb2dTZXJ2aWNlKTtcbiAgICAgIGNvbnN0IGRpYWxvZ0NvbnRyb2xsZXIgPSBzZXJ2aWNlLm9wZW4oXG4gICAgICAgIHRoaXMuY29tcG9uZW50LFxuICAgICAgICB0aGlzLmRpYWxvZ0JlbG9uZ2luZ1xuICAgICAgKTtcbiAgICAgIHJldHVybiBkaWFsb2dDb250cm9sbGVyLmFmdGVyQ2xvc2VkJDtcbiAgICB9XG4gIH1cblxuICBleHBvcnQgY2xhc3MgRGlhbG9nQ29yZUNvbmZpZ1xuICAgIGV4dGVuZHMgR2xvYmFsQ2xhc3MuU2l6ZXNcbiAgICBpbXBsZW1lbnRzIERpYWxvZ0ludGVyZmFjZS5JRGlhbG9nQ29yZUNvbmZpZyB7XG4gICAgRXNjYXBlS2V5Q2xvc2U6IGJvb2xlYW4gPSBudWxsO1xuICAgIEhpZGVTY3JvbGxiYXI6IGJvb2xlYW4gPSBudWxsO1xuICAgIEJ1dHRvblBvc2l0aW9uOiBWZXJ0aWNhbFBvc2l0aW9uID0gbnVsbDtcbiAgICBMYXlvdXRUeXBlOiBEaWFsb2dMYXlvdXREaXNwbGF5ID0gbnVsbDtcbiAgICBEaXNwbGF5TG9hZGVyOiBib29sZWFuID0gbnVsbDtcbiAgICBMb2FkZXJDb21wb25lbnQ6IFR5cGU8YW55PiA9IG51bGw7XG4gIH1cblxuICBleHBvcnQgY2xhc3MgRGlhbG9nU2V0dGluZ3Mge1xuICAgIEJ1dHRvbnM6IEdsb2JhbEludGVyZmFjZS5JQnV0dG9uW10gPSBbXTtcbiAgICBEaWFsb2dDb3JlQ29uZmlnOiBEaWFsb2dJbnRlcmZhY2UuSURpYWxvZ0NvcmVDb25maWcgPSBuZXcgRGlhbG9nQ29yZUNvbmZpZygpO1xuICB9XG5cbiAgZXhwb3J0IGNsYXNzIERpYWxvZ0JlbG9uZ2luZzxDdXN0b21EYXRhID0gYW55PlxuICAgIGV4dGVuZHMgRGlhbG9nU2V0dGluZ3NcbiAgICBpbXBsZW1lbnRzIERpYWxvZ0ludGVyZmFjZS5JRGlhbG9nQmVsb25naW5nIHtcbiAgICAvKiogQGludGVybmFsICovXG4gICAgRW50aXR5VW5pcXVlSUQ6IHN0cmluZyA9IFwiRFwiICsgTWF0aC5yYW5kb20oKS50b1N0cmluZygzNikuc3Vic3RyKDIsIDkpO1xuXG4gICAgQ3VzdG9tRGF0YTogQ3VzdG9tRGF0YSA9IG51bGw7XG4gICAgRXZlbnRzQ29udHJvbGxlcjogRGlhbG9nSW50ZXJmYWNlLklEaWFsb2dFdmVudHNDb250cm9sbGVyO1xuXG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICBzdXBlcigpO1xuICAgICAgdGhpcy5FdmVudHNDb250cm9sbGVyID0gbmV3IERpYWxvZ0V2ZW50c0NvbnRyb2xsZXIodGhpcy5FbnRpdHlVbmlxdWVJRCk7XG4gICAgICBjb25zdCBkaWFsb2dDb25maWd1cmF0b3I6IERpYWxvZ0NvbmZpZ1NlcnZpY2UgPSBTZXJ2aWNlTG9jYXRvci5pbmplY3Rvci5nZXQoXG4gICAgICAgIERpYWxvZ0NvbmZpZ1NlcnZpY2VcbiAgICAgICk7XG4gICAgICBjb25zdCBiYXNlU2V0dGluZ3MgPSBuZXcgRGlhbG9nU2V0dGluZ3MoKTtcbiAgICAgIGNvbnN0IGRhdGFDb250cm9sID0gbmV3IEdsb2JhbENsYXNzLkRhdGFDb250cm9sKCk7XG4gICAgICBkYXRhQ29udHJvbC5jb3B5VmFsdWVzRnJvbShcbiAgICAgICAgZGlhbG9nQ29uZmlndXJhdG9yLnByb2R1Y3Rpb25Db25maWcuRGlhbG9nQ29yZUNvbmZpZyxcbiAgICAgICAgYmFzZVNldHRpbmdzLkRpYWxvZ0NvcmVDb25maWdcbiAgICAgICk7XG4gICAgICB0aGlzLkRpYWxvZ0NvcmVDb25maWcgPSBiYXNlU2V0dGluZ3MuRGlhbG9nQ29yZUNvbmZpZztcbiAgICAgIHRoaXMuQnV0dG9ucyA9IGRpYWxvZ0NvbmZpZ3VyYXRvci5wcm9kdWN0aW9uQ29uZmlnLkJ1dHRvbnMuc2xpY2UoKTtcbiAgICB9XG4gIH1cbn1cbiJdfQ==