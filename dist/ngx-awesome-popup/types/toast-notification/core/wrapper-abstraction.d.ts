import { ElementRef, OnDestroy, QueryList } from '@angular/core';
import { BehaviorSubject, Observable, Subscription } from 'rxjs';
import { AppearanceAnimation, DisappearanceAnimation } from '../../../core/enums';
import { Timer } from '../../../core/global-classes';
import { IButton } from '../../../core/global-interfaces';
import { LayoutHelperService } from '../../../core/layout-helper.service';
import { ToastNotificationBelonging } from './classes';
import * as i0 from "@angular/core";
export declare abstract class WrapperAbstraction implements OnDestroy {
    toastNotificationBelonging: ToastNotificationBelonging;
    layoutHelper: LayoutHelperService;
    private closeIsClicked;
    private autoClosingHasStarted;
    elTextWrapper: ElementRef;
    elTitleWrapper: ElementRef;
    elButtonWrapper: ElementRef;
    elButton: QueryList<ElementRef>;
    fadeInOutAnimation: string;
    timerStarted$: BehaviorSubject<string>;
    subsToClosingDelay: Subscription;
    subTimer: Subscription;
    isTimerStarted: boolean;
    timeout: any;
    timer: Timer;
    boxAnimation: AppearanceAnimation | DisappearanceAnimation | 'reset';
    appearanceAnimation: typeof AppearanceAnimation;
    disappearanceAnimation: typeof DisappearanceAnimation;
    protected constructor(toastNotificationBelonging: ToastNotificationBelonging, layoutHelper: LayoutHelperService);
    get autoCloseCondition(): boolean;
    get buttonsExist(): boolean;
    setCustomStyles(): void;
    mouseOver(): void;
    mouseOut(): void;
    onOverlayClicked(evt: MouseEvent): void;
    onToastClicked(evt: MouseEvent): void;
    setResponse(_IsSuccess: boolean, _ClickedButtonID?: string): void;
    onCustomButton(_Button: IButton): void;
    onButtonClick(_Type: 'confirm' | 'decline'): void;
    autoClose(): void;
    closeParent$(): Observable<any>;
    close(): void;
    closeIcon(): void;
    ngOnDestroy(): void;
    getIconClasses(): string;
    static ɵfac: i0.ɵɵFactoryDeclaration<WrapperAbstraction, never>;
    static ɵdir: i0.ɵɵDirectiveDeclaration<WrapperAbstraction, never, never, {}, {}, never>;
}
