import { Component, Inject } from '@angular/core';
import { boxAnimations } from '../../../core/animations/box.animations';
import { fadeInOut } from '../../../core/animations/fade-in-out.animation';
import { LayoutHelperService } from '../../../core/layout-helper.service';
import { WrapperAbstraction } from '../core/wrapper-abstraction';
import * as i0 from "@angular/core";
import * as i1 from "../../../core/global-config.service";
import * as i2 from "../../../core/layout-helper.service";
import * as i3 from "@angular/common";
import * as i4 from "../core/classes";
export class ToastNotificationWrapperComponent extends WrapperAbstraction {
    constructor(toastNotificationBelonging, gConfig, cd, layoutHelper) {
        super(toastNotificationBelonging, layoutHelper);
        this.toastNotificationBelonging = toastNotificationBelonging;
        this.gConfig = gConfig;
        this.cd = cd;
        this.layoutHelper = layoutHelper;
    }
    ngAfterViewInit() {
        this.setResponse(false);
        this.cd.detectChanges();
        this.autoClose();
        this.setCustomStyles();
    }
}
ToastNotificationWrapperComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.1.2", ngImport: i0, type: ToastNotificationWrapperComponent, deps: [{ token: 'toastNotificationBelonging' }, { token: i1.GlobalConfigService }, { token: i0.ChangeDetectorRef }, { token: i2.LayoutHelperService }], target: i0.ɵɵFactoryTarget.Component });
ToastNotificationWrapperComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "13.1.2", type: ToastNotificationWrapperComponent, selector: "app-toast-notification-wrapper", providers: [LayoutHelperService], usesInheritance: true, ngImport: i0, template: "<div\n  class=\"toast-wrapper standard-toast\"\n  (dblclick)=\"onOverlayClicked($event)\"\n  [@fadeInOut]=\"{\n    value: fadeInOutAnimation,\n    params: {\n      closeDelay: toastNotificationBelonging.toastCoreConfig.animationOut === disappearanceAnimation.NONE ? '200ms' : '300ms'\n    }\n  }\">\n  <div\n    [@.disabled]=\"\n      toastNotificationBelonging.toastCoreConfig.animationIn === appearanceAnimation.NONE &&\n      toastNotificationBelonging.toastCoreConfig.animationOut === disappearanceAnimation.NONE\n    \"\n    [@boxAnimations]=\"boxAnimation\"\n    (mouseover)=\"mouseOver()\"\n    (mouseout)=\"mouseOut()\"\n    (click)=\"onToastClicked($event)\"\n    [className]=\"layoutHelper.getBoxClasses(toastNotificationBelonging.toastCoreConfig.layoutType, 'evolve-toast')\">\n    <div class=\"toast-title-content\" #elTitleWrapper *ngIf=\"toastNotificationBelonging.dispatch.title\">\n      <div class=\"dont-break-out\">\n        <div class=\"text-wrapper dont-break-out\">\n          {{ toastNotificationBelonging.dispatch.title }}\n          <span class=\"close-ico icon-times-circle\" (click)=\"closeIcon()\" *ngIf=\"!buttonsExist\"></span>\n        </div>\n      </div>\n    </div>\n\n    <div class=\"content-holder toast-text\" #elTextWrapper *ngIf=\"toastNotificationBelonging.dispatch.message\">\n      <div class=\"icon-section\" *ngIf=\"!toastNotificationBelonging.toastCoreConfig.disableIcon\">\n        <span [className]=\"getIconClasses()\"></span>\n      </div>\n      <div\n        class=\"text-wrapper-section toast-inner-content\"\n        [ngStyle]=\"{\n          'text-align': toastNotificationBelonging.toastCoreConfig.textPosition\n        }\"\n        [ngClass]=\"{\n          'only-message': !toastNotificationBelonging.dispatch.title\n        }\">\n        <div class=\"dont-break-out\">\n          <div class=\"text-wrapper dont-break-out\" *ngIf=\"!toastNotificationBelonging.toastCoreConfig.allowHtmlMessage\">\n            <p>{{ toastNotificationBelonging.dispatch.message }}</p>\n          </div>\n          <div\n            class=\"text-wrapper\"\n            *ngIf=\"toastNotificationBelonging.toastCoreConfig.allowHtmlMessage\"\n            [innerHTML]=\"toastNotificationBelonging.dispatch.message\"></div>\n        </div>\n      </div>\n      <span\n        class=\"close-ico icon-times-circle\"\n        (click)=\"closeIcon()\"\n        *ngIf=\"buttonsExist && !toastNotificationBelonging.dispatch.title\"></span>\n    </div>\n\n    <div class=\"button-holder\" #elButtonWrapper>\n      <div\n        class=\"button-section\"\n        *ngIf=\"toastNotificationBelonging.buttons.length\"\n        [ngStyle]=\"{\n          'text-align': toastNotificationBelonging.toastCoreConfig.buttonPosition\n        }\">\n        <button\n          #elButton\n          *ngFor=\"let button of toastNotificationBelonging.buttons\"\n          [disabled]=\"button.disabled\"\n          [style.display]=\"button.hidden ? 'none' : 'inline'\"\n          (click)=\"onCustomButton(button)\"\n          [className]=\"layoutHelper.getButtonClasses(button.layoutType, 'ed-btn ed-btn-sm')\">\n          {{ button.label }}\n        </button>\n      </div>\n\n      <div\n        class=\"button-section\"\n        [ngStyle]=\"{\n          'text-align': toastNotificationBelonging.toastCoreConfig.buttonPosition\n        }\"\n        *ngIf=\"\n          !toastNotificationBelonging.buttons.length &&\n          (toastNotificationBelonging.toastCoreConfig.declineLabel || toastNotificationBelonging.toastCoreConfig.confirmLabel)\n        \">\n        <button\n          #elButton\n          *ngIf=\"toastNotificationBelonging.toastCoreConfig.confirmLabel\"\n          (click)=\"onButtonClick('confirm')\"\n          [className]=\"\n            layoutHelper.getButtonClasses(toastNotificationBelonging.toastCoreConfig.layoutType, 'ed-btn ed-btn-sm', 'auto-button')\n          \">\n          {{ toastNotificationBelonging.toastCoreConfig.confirmLabel }}\n        </button>\n        <button\n          class=\"ed-btn ed-btn-sm ed-btn-secondary\"\n          #elButton\n          (click)=\"onButtonClick('decline')\"\n          *ngIf=\"toastNotificationBelonging.toastCoreConfig.declineLabel\">\n          {{ toastNotificationBelonging.toastCoreConfig.declineLabel }}\n        </button>\n      </div>\n    </div>\n\n    <div class=\"progress-bar-container\" *ngIf=\"!buttonsExist && toastNotificationBelonging.toastCoreConfig.progressBar !== 0\">\n      <div\n        class=\"progress-bar\"\n        [ngStyle]=\"{\n          width: (toastNotificationBelonging.toastCoreConfig.progressBar === 1 ? timer.Progress : timer.Remaining) + '%'\n        }\"></div>\n    </div>\n  </div>\n</div>\n", directives: [{ type: i3.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i3.NgStyle, selector: "[ngStyle]", inputs: ["ngStyle"] }, { type: i3.NgClass, selector: "[ngClass]", inputs: ["class", "ngClass"] }, { type: i3.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }], animations: [fadeInOut(), boxAnimations()] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.1.2", ngImport: i0, type: ToastNotificationWrapperComponent, decorators: [{
            type: Component,
            args: [{ selector: 'app-toast-notification-wrapper', animations: [fadeInOut(), boxAnimations()], providers: [LayoutHelperService], template: "<div\n  class=\"toast-wrapper standard-toast\"\n  (dblclick)=\"onOverlayClicked($event)\"\n  [@fadeInOut]=\"{\n    value: fadeInOutAnimation,\n    params: {\n      closeDelay: toastNotificationBelonging.toastCoreConfig.animationOut === disappearanceAnimation.NONE ? '200ms' : '300ms'\n    }\n  }\">\n  <div\n    [@.disabled]=\"\n      toastNotificationBelonging.toastCoreConfig.animationIn === appearanceAnimation.NONE &&\n      toastNotificationBelonging.toastCoreConfig.animationOut === disappearanceAnimation.NONE\n    \"\n    [@boxAnimations]=\"boxAnimation\"\n    (mouseover)=\"mouseOver()\"\n    (mouseout)=\"mouseOut()\"\n    (click)=\"onToastClicked($event)\"\n    [className]=\"layoutHelper.getBoxClasses(toastNotificationBelonging.toastCoreConfig.layoutType, 'evolve-toast')\">\n    <div class=\"toast-title-content\" #elTitleWrapper *ngIf=\"toastNotificationBelonging.dispatch.title\">\n      <div class=\"dont-break-out\">\n        <div class=\"text-wrapper dont-break-out\">\n          {{ toastNotificationBelonging.dispatch.title }}\n          <span class=\"close-ico icon-times-circle\" (click)=\"closeIcon()\" *ngIf=\"!buttonsExist\"></span>\n        </div>\n      </div>\n    </div>\n\n    <div class=\"content-holder toast-text\" #elTextWrapper *ngIf=\"toastNotificationBelonging.dispatch.message\">\n      <div class=\"icon-section\" *ngIf=\"!toastNotificationBelonging.toastCoreConfig.disableIcon\">\n        <span [className]=\"getIconClasses()\"></span>\n      </div>\n      <div\n        class=\"text-wrapper-section toast-inner-content\"\n        [ngStyle]=\"{\n          'text-align': toastNotificationBelonging.toastCoreConfig.textPosition\n        }\"\n        [ngClass]=\"{\n          'only-message': !toastNotificationBelonging.dispatch.title\n        }\">\n        <div class=\"dont-break-out\">\n          <div class=\"text-wrapper dont-break-out\" *ngIf=\"!toastNotificationBelonging.toastCoreConfig.allowHtmlMessage\">\n            <p>{{ toastNotificationBelonging.dispatch.message }}</p>\n          </div>\n          <div\n            class=\"text-wrapper\"\n            *ngIf=\"toastNotificationBelonging.toastCoreConfig.allowHtmlMessage\"\n            [innerHTML]=\"toastNotificationBelonging.dispatch.message\"></div>\n        </div>\n      </div>\n      <span\n        class=\"close-ico icon-times-circle\"\n        (click)=\"closeIcon()\"\n        *ngIf=\"buttonsExist && !toastNotificationBelonging.dispatch.title\"></span>\n    </div>\n\n    <div class=\"button-holder\" #elButtonWrapper>\n      <div\n        class=\"button-section\"\n        *ngIf=\"toastNotificationBelonging.buttons.length\"\n        [ngStyle]=\"{\n          'text-align': toastNotificationBelonging.toastCoreConfig.buttonPosition\n        }\">\n        <button\n          #elButton\n          *ngFor=\"let button of toastNotificationBelonging.buttons\"\n          [disabled]=\"button.disabled\"\n          [style.display]=\"button.hidden ? 'none' : 'inline'\"\n          (click)=\"onCustomButton(button)\"\n          [className]=\"layoutHelper.getButtonClasses(button.layoutType, 'ed-btn ed-btn-sm')\">\n          {{ button.label }}\n        </button>\n      </div>\n\n      <div\n        class=\"button-section\"\n        [ngStyle]=\"{\n          'text-align': toastNotificationBelonging.toastCoreConfig.buttonPosition\n        }\"\n        *ngIf=\"\n          !toastNotificationBelonging.buttons.length &&\n          (toastNotificationBelonging.toastCoreConfig.declineLabel || toastNotificationBelonging.toastCoreConfig.confirmLabel)\n        \">\n        <button\n          #elButton\n          *ngIf=\"toastNotificationBelonging.toastCoreConfig.confirmLabel\"\n          (click)=\"onButtonClick('confirm')\"\n          [className]=\"\n            layoutHelper.getButtonClasses(toastNotificationBelonging.toastCoreConfig.layoutType, 'ed-btn ed-btn-sm', 'auto-button')\n          \">\n          {{ toastNotificationBelonging.toastCoreConfig.confirmLabel }}\n        </button>\n        <button\n          class=\"ed-btn ed-btn-sm ed-btn-secondary\"\n          #elButton\n          (click)=\"onButtonClick('decline')\"\n          *ngIf=\"toastNotificationBelonging.toastCoreConfig.declineLabel\">\n          {{ toastNotificationBelonging.toastCoreConfig.declineLabel }}\n        </button>\n      </div>\n    </div>\n\n    <div class=\"progress-bar-container\" *ngIf=\"!buttonsExist && toastNotificationBelonging.toastCoreConfig.progressBar !== 0\">\n      <div\n        class=\"progress-bar\"\n        [ngStyle]=\"{\n          width: (toastNotificationBelonging.toastCoreConfig.progressBar === 1 ? timer.Progress : timer.Remaining) + '%'\n        }\"></div>\n    </div>\n  </div>\n</div>\n" }]
        }], ctorParameters: function () { return [{ type: i4.ToastNotificationBelonging, decorators: [{
                    type: Inject,
                    args: ['toastNotificationBelonging']
                }] }, { type: i1.GlobalConfigService }, { type: i0.ChangeDetectorRef }, { type: i2.LayoutHelperService }]; } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidG9hc3Qtbm90aWZpY2F0aW9uLXdyYXBwZXIuY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vbmd4LWF3ZXNvbWUtcG9wdXAvdHlwZXMvdG9hc3Qtbm90aWZpY2F0aW9uL3RvYXN0LW5vdGlmaWNhdGlvbi13cmFwcGVyL3RvYXN0LW5vdGlmaWNhdGlvbi13cmFwcGVyLmNvbXBvbmVudC50cyIsIi4uLy4uLy4uLy4uLy4uLy4uL25neC1hd2Vzb21lLXBvcHVwL3R5cGVzL3RvYXN0LW5vdGlmaWNhdGlvbi90b2FzdC1ub3RpZmljYXRpb24td3JhcHBlci90b2FzdC1ub3RpZmljYXRpb24td3JhcHBlci5jb21wb25lbnQuaHRtbCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQW9DLFNBQVMsRUFBRSxNQUFNLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDcEYsT0FBTyxFQUFFLGFBQWEsRUFBRSxNQUFNLHlDQUF5QyxDQUFDO0FBQ3hFLE9BQU8sRUFBRSxTQUFTLEVBQUUsTUFBTSxnREFBZ0QsQ0FBQztBQUUzRSxPQUFPLEVBQUUsbUJBQW1CLEVBQUUsTUFBTSxxQ0FBcUMsQ0FBQztBQUUxRSxPQUFPLEVBQUUsa0JBQWtCLEVBQUUsTUFBTSw2QkFBNkIsQ0FBQzs7Ozs7O0FBUWpFLE1BQU0sT0FBTyxpQ0FBa0MsU0FBUSxrQkFBa0I7SUFDdkUsWUFFUywwQkFBc0QsRUFDdEQsT0FBNEIsRUFDM0IsRUFBcUIsRUFDdEIsWUFBaUM7UUFFeEMsS0FBSyxDQUFDLDBCQUEwQixFQUFFLFlBQVksQ0FBQyxDQUFDO1FBTHpDLCtCQUEwQixHQUExQiwwQkFBMEIsQ0FBNEI7UUFDdEQsWUFBTyxHQUFQLE9BQU8sQ0FBcUI7UUFDM0IsT0FBRSxHQUFGLEVBQUUsQ0FBbUI7UUFDdEIsaUJBQVksR0FBWixZQUFZLENBQXFCO0lBRzFDLENBQUM7SUFFRCxlQUFlO1FBQ2IsSUFBSSxDQUFDLFdBQVcsQ0FBQyxLQUFLLENBQUMsQ0FBQztRQUN4QixJQUFJLENBQUMsRUFBRSxDQUFDLGFBQWEsRUFBRSxDQUFDO1FBQ3hCLElBQUksQ0FBQyxTQUFTLEVBQUUsQ0FBQztRQUNqQixJQUFJLENBQUMsZUFBZSxFQUFFLENBQUM7SUFDekIsQ0FBQzs7OEhBaEJVLGlDQUFpQyxrQkFFbEMsNEJBQTRCO2tIQUYzQixpQ0FBaUMseURBRmpDLENBQUMsbUJBQW1CLENBQUMsaURDWmxDLGdtSkErR0Esb1dEcEdjLENBQUMsU0FBUyxFQUFFLEVBQUUsYUFBYSxFQUFFLENBQUM7MkZBRy9CLGlDQUFpQztrQkFON0MsU0FBUzsrQkFDRSxnQ0FBZ0MsY0FFOUIsQ0FBQyxTQUFTLEVBQUUsRUFBRSxhQUFhLEVBQUUsQ0FBQyxhQUMvQixDQUFDLG1CQUFtQixDQUFDOzswQkFJN0IsTUFBTTsyQkFBQyw0QkFBNEIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBBZnRlclZpZXdJbml0LCBDaGFuZ2VEZXRlY3RvclJlZiwgQ29tcG9uZW50LCBJbmplY3QgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IGJveEFuaW1hdGlvbnMgfSBmcm9tICcuLi8uLi8uLi9jb3JlL2FuaW1hdGlvbnMvYm94LmFuaW1hdGlvbnMnO1xuaW1wb3J0IHsgZmFkZUluT3V0IH0gZnJvbSAnLi4vLi4vLi4vY29yZS9hbmltYXRpb25zL2ZhZGUtaW4tb3V0LmFuaW1hdGlvbic7XG5pbXBvcnQgeyBHbG9iYWxDb25maWdTZXJ2aWNlIH0gZnJvbSAnLi4vLi4vLi4vY29yZS9nbG9iYWwtY29uZmlnLnNlcnZpY2UnO1xuaW1wb3J0IHsgTGF5b3V0SGVscGVyU2VydmljZSB9IGZyb20gJy4uLy4uLy4uL2NvcmUvbGF5b3V0LWhlbHBlci5zZXJ2aWNlJztcbmltcG9ydCB7IFRvYXN0Tm90aWZpY2F0aW9uQmVsb25naW5nIH0gZnJvbSAnLi4vY29yZS9jbGFzc2VzJztcbmltcG9ydCB7IFdyYXBwZXJBYnN0cmFjdGlvbiB9IGZyb20gJy4uL2NvcmUvd3JhcHBlci1hYnN0cmFjdGlvbic7XG5cbkBDb21wb25lbnQoe1xuICBzZWxlY3RvcjogJ2FwcC10b2FzdC1ub3RpZmljYXRpb24td3JhcHBlcicsXG4gIHRlbXBsYXRlVXJsOiAnLi90b2FzdC1ub3RpZmljYXRpb24td3JhcHBlci5jb21wb25lbnQuaHRtbCcsXG4gIGFuaW1hdGlvbnM6IFtmYWRlSW5PdXQoKSwgYm94QW5pbWF0aW9ucygpXSxcbiAgcHJvdmlkZXJzOiBbTGF5b3V0SGVscGVyU2VydmljZV1cbn0pXG5leHBvcnQgY2xhc3MgVG9hc3ROb3RpZmljYXRpb25XcmFwcGVyQ29tcG9uZW50IGV4dGVuZHMgV3JhcHBlckFic3RyYWN0aW9uIGltcGxlbWVudHMgQWZ0ZXJWaWV3SW5pdCB7XG4gIGNvbnN0cnVjdG9yKFxuICAgIEBJbmplY3QoJ3RvYXN0Tm90aWZpY2F0aW9uQmVsb25naW5nJylcbiAgICBwdWJsaWMgdG9hc3ROb3RpZmljYXRpb25CZWxvbmdpbmc6IFRvYXN0Tm90aWZpY2F0aW9uQmVsb25naW5nLFxuICAgIHB1YmxpYyBnQ29uZmlnOiBHbG9iYWxDb25maWdTZXJ2aWNlLFxuICAgIHByaXZhdGUgY2Q6IENoYW5nZURldGVjdG9yUmVmLFxuICAgIHB1YmxpYyBsYXlvdXRIZWxwZXI6IExheW91dEhlbHBlclNlcnZpY2VcbiAgKSB7XG4gICAgc3VwZXIodG9hc3ROb3RpZmljYXRpb25CZWxvbmdpbmcsIGxheW91dEhlbHBlcik7XG4gIH1cblxuICBuZ0FmdGVyVmlld0luaXQoKTogdm9pZCB7XG4gICAgdGhpcy5zZXRSZXNwb25zZShmYWxzZSk7XG4gICAgdGhpcy5jZC5kZXRlY3RDaGFuZ2VzKCk7XG4gICAgdGhpcy5hdXRvQ2xvc2UoKTtcbiAgICB0aGlzLnNldEN1c3RvbVN0eWxlcygpO1xuICB9XG59XG4iLCI8ZGl2XG4gIGNsYXNzPVwidG9hc3Qtd3JhcHBlciBzdGFuZGFyZC10b2FzdFwiXG4gIChkYmxjbGljayk9XCJvbk92ZXJsYXlDbGlja2VkKCRldmVudClcIlxuICBbQGZhZGVJbk91dF09XCJ7XG4gICAgdmFsdWU6IGZhZGVJbk91dEFuaW1hdGlvbixcbiAgICBwYXJhbXM6IHtcbiAgICAgIGNsb3NlRGVsYXk6IHRvYXN0Tm90aWZpY2F0aW9uQmVsb25naW5nLnRvYXN0Q29yZUNvbmZpZy5hbmltYXRpb25PdXQgPT09IGRpc2FwcGVhcmFuY2VBbmltYXRpb24uTk9ORSA/ICcyMDBtcycgOiAnMzAwbXMnXG4gICAgfVxuICB9XCI+XG4gIDxkaXZcbiAgICBbQC5kaXNhYmxlZF09XCJcbiAgICAgIHRvYXN0Tm90aWZpY2F0aW9uQmVsb25naW5nLnRvYXN0Q29yZUNvbmZpZy5hbmltYXRpb25JbiA9PT0gYXBwZWFyYW5jZUFuaW1hdGlvbi5OT05FICYmXG4gICAgICB0b2FzdE5vdGlmaWNhdGlvbkJlbG9uZ2luZy50b2FzdENvcmVDb25maWcuYW5pbWF0aW9uT3V0ID09PSBkaXNhcHBlYXJhbmNlQW5pbWF0aW9uLk5PTkVcbiAgICBcIlxuICAgIFtAYm94QW5pbWF0aW9uc109XCJib3hBbmltYXRpb25cIlxuICAgIChtb3VzZW92ZXIpPVwibW91c2VPdmVyKClcIlxuICAgIChtb3VzZW91dCk9XCJtb3VzZU91dCgpXCJcbiAgICAoY2xpY2spPVwib25Ub2FzdENsaWNrZWQoJGV2ZW50KVwiXG4gICAgW2NsYXNzTmFtZV09XCJsYXlvdXRIZWxwZXIuZ2V0Qm94Q2xhc3Nlcyh0b2FzdE5vdGlmaWNhdGlvbkJlbG9uZ2luZy50b2FzdENvcmVDb25maWcubGF5b3V0VHlwZSwgJ2V2b2x2ZS10b2FzdCcpXCI+XG4gICAgPGRpdiBjbGFzcz1cInRvYXN0LXRpdGxlLWNvbnRlbnRcIiAjZWxUaXRsZVdyYXBwZXIgKm5nSWY9XCJ0b2FzdE5vdGlmaWNhdGlvbkJlbG9uZ2luZy5kaXNwYXRjaC50aXRsZVwiPlxuICAgICAgPGRpdiBjbGFzcz1cImRvbnQtYnJlYWstb3V0XCI+XG4gICAgICAgIDxkaXYgY2xhc3M9XCJ0ZXh0LXdyYXBwZXIgZG9udC1icmVhay1vdXRcIj5cbiAgICAgICAgICB7eyB0b2FzdE5vdGlmaWNhdGlvbkJlbG9uZ2luZy5kaXNwYXRjaC50aXRsZSB9fVxuICAgICAgICAgIDxzcGFuIGNsYXNzPVwiY2xvc2UtaWNvIGljb24tdGltZXMtY2lyY2xlXCIgKGNsaWNrKT1cImNsb3NlSWNvbigpXCIgKm5nSWY9XCIhYnV0dG9uc0V4aXN0XCI+PC9zcGFuPlxuICAgICAgICA8L2Rpdj5cbiAgICAgIDwvZGl2PlxuICAgIDwvZGl2PlxuXG4gICAgPGRpdiBjbGFzcz1cImNvbnRlbnQtaG9sZGVyIHRvYXN0LXRleHRcIiAjZWxUZXh0V3JhcHBlciAqbmdJZj1cInRvYXN0Tm90aWZpY2F0aW9uQmVsb25naW5nLmRpc3BhdGNoLm1lc3NhZ2VcIj5cbiAgICAgIDxkaXYgY2xhc3M9XCJpY29uLXNlY3Rpb25cIiAqbmdJZj1cIiF0b2FzdE5vdGlmaWNhdGlvbkJlbG9uZ2luZy50b2FzdENvcmVDb25maWcuZGlzYWJsZUljb25cIj5cbiAgICAgICAgPHNwYW4gW2NsYXNzTmFtZV09XCJnZXRJY29uQ2xhc3NlcygpXCI+PC9zcGFuPlxuICAgICAgPC9kaXY+XG4gICAgICA8ZGl2XG4gICAgICAgIGNsYXNzPVwidGV4dC13cmFwcGVyLXNlY3Rpb24gdG9hc3QtaW5uZXItY29udGVudFwiXG4gICAgICAgIFtuZ1N0eWxlXT1cIntcbiAgICAgICAgICAndGV4dC1hbGlnbic6IHRvYXN0Tm90aWZpY2F0aW9uQmVsb25naW5nLnRvYXN0Q29yZUNvbmZpZy50ZXh0UG9zaXRpb25cbiAgICAgICAgfVwiXG4gICAgICAgIFtuZ0NsYXNzXT1cIntcbiAgICAgICAgICAnb25seS1tZXNzYWdlJzogIXRvYXN0Tm90aWZpY2F0aW9uQmVsb25naW5nLmRpc3BhdGNoLnRpdGxlXG4gICAgICAgIH1cIj5cbiAgICAgICAgPGRpdiBjbGFzcz1cImRvbnQtYnJlYWstb3V0XCI+XG4gICAgICAgICAgPGRpdiBjbGFzcz1cInRleHQtd3JhcHBlciBkb250LWJyZWFrLW91dFwiICpuZ0lmPVwiIXRvYXN0Tm90aWZpY2F0aW9uQmVsb25naW5nLnRvYXN0Q29yZUNvbmZpZy5hbGxvd0h0bWxNZXNzYWdlXCI+XG4gICAgICAgICAgICA8cD57eyB0b2FzdE5vdGlmaWNhdGlvbkJlbG9uZ2luZy5kaXNwYXRjaC5tZXNzYWdlIH19PC9wPlxuICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgIDxkaXZcbiAgICAgICAgICAgIGNsYXNzPVwidGV4dC13cmFwcGVyXCJcbiAgICAgICAgICAgICpuZ0lmPVwidG9hc3ROb3RpZmljYXRpb25CZWxvbmdpbmcudG9hc3RDb3JlQ29uZmlnLmFsbG93SHRtbE1lc3NhZ2VcIlxuICAgICAgICAgICAgW2lubmVySFRNTF09XCJ0b2FzdE5vdGlmaWNhdGlvbkJlbG9uZ2luZy5kaXNwYXRjaC5tZXNzYWdlXCI+PC9kaXY+XG4gICAgICAgIDwvZGl2PlxuICAgICAgPC9kaXY+XG4gICAgICA8c3BhblxuICAgICAgICBjbGFzcz1cImNsb3NlLWljbyBpY29uLXRpbWVzLWNpcmNsZVwiXG4gICAgICAgIChjbGljayk9XCJjbG9zZUljb24oKVwiXG4gICAgICAgICpuZ0lmPVwiYnV0dG9uc0V4aXN0ICYmICF0b2FzdE5vdGlmaWNhdGlvbkJlbG9uZ2luZy5kaXNwYXRjaC50aXRsZVwiPjwvc3Bhbj5cbiAgICA8L2Rpdj5cblxuICAgIDxkaXYgY2xhc3M9XCJidXR0b24taG9sZGVyXCIgI2VsQnV0dG9uV3JhcHBlcj5cbiAgICAgIDxkaXZcbiAgICAgICAgY2xhc3M9XCJidXR0b24tc2VjdGlvblwiXG4gICAgICAgICpuZ0lmPVwidG9hc3ROb3RpZmljYXRpb25CZWxvbmdpbmcuYnV0dG9ucy5sZW5ndGhcIlxuICAgICAgICBbbmdTdHlsZV09XCJ7XG4gICAgICAgICAgJ3RleHQtYWxpZ24nOiB0b2FzdE5vdGlmaWNhdGlvbkJlbG9uZ2luZy50b2FzdENvcmVDb25maWcuYnV0dG9uUG9zaXRpb25cbiAgICAgICAgfVwiPlxuICAgICAgICA8YnV0dG9uXG4gICAgICAgICAgI2VsQnV0dG9uXG4gICAgICAgICAgKm5nRm9yPVwibGV0IGJ1dHRvbiBvZiB0b2FzdE5vdGlmaWNhdGlvbkJlbG9uZ2luZy5idXR0b25zXCJcbiAgICAgICAgICBbZGlzYWJsZWRdPVwiYnV0dG9uLmRpc2FibGVkXCJcbiAgICAgICAgICBbc3R5bGUuZGlzcGxheV09XCJidXR0b24uaGlkZGVuID8gJ25vbmUnIDogJ2lubGluZSdcIlxuICAgICAgICAgIChjbGljayk9XCJvbkN1c3RvbUJ1dHRvbihidXR0b24pXCJcbiAgICAgICAgICBbY2xhc3NOYW1lXT1cImxheW91dEhlbHBlci5nZXRCdXR0b25DbGFzc2VzKGJ1dHRvbi5sYXlvdXRUeXBlLCAnZWQtYnRuIGVkLWJ0bi1zbScpXCI+XG4gICAgICAgICAge3sgYnV0dG9uLmxhYmVsIH19XG4gICAgICAgIDwvYnV0dG9uPlxuICAgICAgPC9kaXY+XG5cbiAgICAgIDxkaXZcbiAgICAgICAgY2xhc3M9XCJidXR0b24tc2VjdGlvblwiXG4gICAgICAgIFtuZ1N0eWxlXT1cIntcbiAgICAgICAgICAndGV4dC1hbGlnbic6IHRvYXN0Tm90aWZpY2F0aW9uQmVsb25naW5nLnRvYXN0Q29yZUNvbmZpZy5idXR0b25Qb3NpdGlvblxuICAgICAgICB9XCJcbiAgICAgICAgKm5nSWY9XCJcbiAgICAgICAgICAhdG9hc3ROb3RpZmljYXRpb25CZWxvbmdpbmcuYnV0dG9ucy5sZW5ndGggJiZcbiAgICAgICAgICAodG9hc3ROb3RpZmljYXRpb25CZWxvbmdpbmcudG9hc3RDb3JlQ29uZmlnLmRlY2xpbmVMYWJlbCB8fCB0b2FzdE5vdGlmaWNhdGlvbkJlbG9uZ2luZy50b2FzdENvcmVDb25maWcuY29uZmlybUxhYmVsKVxuICAgICAgICBcIj5cbiAgICAgICAgPGJ1dHRvblxuICAgICAgICAgICNlbEJ1dHRvblxuICAgICAgICAgICpuZ0lmPVwidG9hc3ROb3RpZmljYXRpb25CZWxvbmdpbmcudG9hc3RDb3JlQ29uZmlnLmNvbmZpcm1MYWJlbFwiXG4gICAgICAgICAgKGNsaWNrKT1cIm9uQnV0dG9uQ2xpY2soJ2NvbmZpcm0nKVwiXG4gICAgICAgICAgW2NsYXNzTmFtZV09XCJcbiAgICAgICAgICAgIGxheW91dEhlbHBlci5nZXRCdXR0b25DbGFzc2VzKHRvYXN0Tm90aWZpY2F0aW9uQmVsb25naW5nLnRvYXN0Q29yZUNvbmZpZy5sYXlvdXRUeXBlLCAnZWQtYnRuIGVkLWJ0bi1zbScsICdhdXRvLWJ1dHRvbicpXG4gICAgICAgICAgXCI+XG4gICAgICAgICAge3sgdG9hc3ROb3RpZmljYXRpb25CZWxvbmdpbmcudG9hc3RDb3JlQ29uZmlnLmNvbmZpcm1MYWJlbCB9fVxuICAgICAgICA8L2J1dHRvbj5cbiAgICAgICAgPGJ1dHRvblxuICAgICAgICAgIGNsYXNzPVwiZWQtYnRuIGVkLWJ0bi1zbSBlZC1idG4tc2Vjb25kYXJ5XCJcbiAgICAgICAgICAjZWxCdXR0b25cbiAgICAgICAgICAoY2xpY2spPVwib25CdXR0b25DbGljaygnZGVjbGluZScpXCJcbiAgICAgICAgICAqbmdJZj1cInRvYXN0Tm90aWZpY2F0aW9uQmVsb25naW5nLnRvYXN0Q29yZUNvbmZpZy5kZWNsaW5lTGFiZWxcIj5cbiAgICAgICAgICB7eyB0b2FzdE5vdGlmaWNhdGlvbkJlbG9uZ2luZy50b2FzdENvcmVDb25maWcuZGVjbGluZUxhYmVsIH19XG4gICAgICAgIDwvYnV0dG9uPlxuICAgICAgPC9kaXY+XG4gICAgPC9kaXY+XG5cbiAgICA8ZGl2IGNsYXNzPVwicHJvZ3Jlc3MtYmFyLWNvbnRhaW5lclwiICpuZ0lmPVwiIWJ1dHRvbnNFeGlzdCAmJiB0b2FzdE5vdGlmaWNhdGlvbkJlbG9uZ2luZy50b2FzdENvcmVDb25maWcucHJvZ3Jlc3NCYXIgIT09IDBcIj5cbiAgICAgIDxkaXZcbiAgICAgICAgY2xhc3M9XCJwcm9ncmVzcy1iYXJcIlxuICAgICAgICBbbmdTdHlsZV09XCJ7XG4gICAgICAgICAgd2lkdGg6ICh0b2FzdE5vdGlmaWNhdGlvbkJlbG9uZ2luZy50b2FzdENvcmVDb25maWcucHJvZ3Jlc3NCYXIgPT09IDEgPyB0aW1lci5Qcm9ncmVzcyA6IHRpbWVyLlJlbWFpbmluZykgKyAnJSdcbiAgICAgICAgfVwiPjwvZGl2PlxuICAgIDwvZGl2PlxuICA8L2Rpdj5cbjwvZGl2PlxuIl19