import { Inject, Injectable } from '@angular/core';
import { AppearanceAnimation, DialogLayoutDisplay, DisappearanceAnimation } from '../../../core/enums';
import { DataControl } from '../../../core/global-classes';
import { DefaultLoaderComponent } from '../../../default-loader/default-loader.component';
import { DialogCustomStyles, DialogSettings } from './classes';
import * as i0 from "@angular/core";
export class DialogConfigService {
    constructor(userConfig = {}) {
        this.userConfig = userConfig;
        this.authorConfig = new DialogSettings();
        this.productionConfig = new DialogSettings();
        const userConfigBase = new DialogSettings();
        const dataControl = new DataControl();
        dataControl.copyValuesFrom(userConfig.dialogCoreConfig, userConfigBase.dialogCoreConfig);
        userConfig.dialogCoreConfig = userConfigBase.dialogCoreConfig;
        if (userConfig.dialogCoreConfig.loaderComponent !== null) {
            userConfig.dialogCoreConfig.displayLoader = userConfig.dialogCoreConfig.displayLoader === null;
        }
        this.authorConfig.dialogCoreConfig.width = 'auto';
        this.authorConfig.dialogCoreConfig.height = 'auto';
        this.authorConfig.dialogCoreConfig.hideScrollbar = false;
        this.authorConfig.dialogCoreConfig.escapeKeyClose = false;
        this.authorConfig.dialogCoreConfig.buttonPosition = 'right';
        this.authorConfig.dialogCoreConfig.displayLoader = false;
        this.authorConfig.dialogCoreConfig.fullScreen = false;
        this.authorConfig.dialogCoreConfig.layoutType = DialogLayoutDisplay.NONE;
        this.authorConfig.dialogCoreConfig.loaderComponent = DefaultLoaderComponent;
        this.authorConfig.dialogCoreConfig.animationIn = AppearanceAnimation.ZOOM_IN;
        this.authorConfig.dialogCoreConfig.animationOut = DisappearanceAnimation.ZOOM_OUT;
        this.authorConfig.dialogCoreConfig.customStyles = new DialogCustomStyles();
        dataControl.copyValuesFrom(this.authorConfig.dialogCoreConfig, this.productionConfig.dialogCoreConfig);
        dataControl.copyValuesFrom(userConfig.dialogCoreConfig, this.productionConfig.dialogCoreConfig);
    }
}
DialogConfigService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.1.2", ngImport: i0, type: DialogConfigService, deps: [{ token: 'dialogConfig' }], target: i0.ɵɵFactoryTarget.Injectable });
DialogConfigService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "13.1.2", ngImport: i0, type: DialogConfigService, providedIn: 'root' });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.1.2", ngImport: i0, type: DialogConfigService, decorators: [{
            type: Injectable,
            args: [{
                    providedIn: 'root'
                }]
        }], ctorParameters: function () { return [{ type: undefined, decorators: [{
                    type: Inject,
                    args: ['dialogConfig']
                }] }]; } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGlhbG9nLWNvbmZpZy5zZXJ2aWNlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vbmd4LWF3ZXNvbWUtcG9wdXAvdHlwZXMvZGlhbG9nL2NvcmUvZGlhbG9nLWNvbmZpZy5zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxNQUFNLEVBQUUsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQ25ELE9BQU8sRUFBRSxtQkFBbUIsRUFBRSxtQkFBbUIsRUFBRSxzQkFBc0IsRUFBRSxNQUFNLHFCQUFxQixDQUFDO0FBQ3ZHLE9BQU8sRUFBRSxXQUFXLEVBQUUsTUFBTSw4QkFBOEIsQ0FBQztBQUMzRCxPQUFPLEVBQUUsc0JBQXNCLEVBQUUsTUFBTSxrREFBa0QsQ0FBQztBQUMxRixPQUFPLEVBQUUsa0JBQWtCLEVBQUUsY0FBYyxFQUFFLE1BQU0sV0FBVyxDQUFDOztBQU0vRCxNQUFNLE9BQU8sbUJBQW1CO0lBSTlCLFlBRVUsYUFBZ0MsRUFBRTtRQUFsQyxlQUFVLEdBQVYsVUFBVSxDQUF3QjtRQUw1QyxpQkFBWSxHQUFzQixJQUFJLGNBQWMsRUFBRSxDQUFDO1FBQ3ZELHFCQUFnQixHQUFzQixJQUFJLGNBQWMsRUFBRSxDQUFDO1FBT3pELE1BQU0sY0FBYyxHQUFHLElBQUksY0FBYyxFQUFFLENBQUM7UUFDNUMsTUFBTSxXQUFXLEdBQUcsSUFBSSxXQUFXLEVBQUUsQ0FBQztRQUN0QyxXQUFXLENBQUMsY0FBYyxDQUFDLFVBQVUsQ0FBQyxnQkFBZ0IsRUFBRSxjQUFjLENBQUMsZ0JBQWdCLENBQUMsQ0FBQztRQUN6RixVQUFVLENBQUMsZ0JBQWdCLEdBQUcsY0FBYyxDQUFDLGdCQUFnQixDQUFDO1FBRTlELElBQUksVUFBVSxDQUFDLGdCQUFnQixDQUFDLGVBQWUsS0FBSyxJQUFJLEVBQUU7WUFDeEQsVUFBVSxDQUFDLGdCQUFnQixDQUFDLGFBQWEsR0FBRyxVQUFVLENBQUMsZ0JBQWdCLENBQUMsYUFBYSxLQUFLLElBQUksQ0FBQztTQUNoRztRQUlELElBQUksQ0FBQyxZQUFZLENBQUMsZ0JBQWdCLENBQUMsS0FBSyxHQUFHLE1BQU0sQ0FBQztRQUNsRCxJQUFJLENBQUMsWUFBWSxDQUFDLGdCQUFnQixDQUFDLE1BQU0sR0FBRyxNQUFNLENBQUM7UUFDbkQsSUFBSSxDQUFDLFlBQVksQ0FBQyxnQkFBZ0IsQ0FBQyxhQUFhLEdBQUcsS0FBSyxDQUFDO1FBQ3pELElBQUksQ0FBQyxZQUFZLENBQUMsZ0JBQWdCLENBQUMsY0FBYyxHQUFHLEtBQUssQ0FBQztRQUMxRCxJQUFJLENBQUMsWUFBWSxDQUFDLGdCQUFnQixDQUFDLGNBQWMsR0FBRyxPQUFPLENBQUM7UUFDNUQsSUFBSSxDQUFDLFlBQVksQ0FBQyxnQkFBZ0IsQ0FBQyxhQUFhLEdBQUcsS0FBSyxDQUFDO1FBQ3pELElBQUksQ0FBQyxZQUFZLENBQUMsZ0JBQWdCLENBQUMsVUFBVSxHQUFHLEtBQUssQ0FBQztRQUN0RCxJQUFJLENBQUMsWUFBWSxDQUFDLGdCQUFnQixDQUFDLFVBQVUsR0FBRyxtQkFBbUIsQ0FBQyxJQUFJLENBQUM7UUFDekUsSUFBSSxDQUFDLFlBQVksQ0FBQyxnQkFBZ0IsQ0FBQyxlQUFlLEdBQUcsc0JBQXNCLENBQUM7UUFDNUUsSUFBSSxDQUFDLFlBQVksQ0FBQyxnQkFBZ0IsQ0FBQyxXQUFXLEdBQUcsbUJBQW1CLENBQUMsT0FBTyxDQUFDO1FBQzdFLElBQUksQ0FBQyxZQUFZLENBQUMsZ0JBQWdCLENBQUMsWUFBWSxHQUFHLHNCQUFzQixDQUFDLFFBQVEsQ0FBQztRQUNsRixJQUFJLENBQUMsWUFBWSxDQUFDLGdCQUFnQixDQUFDLFlBQVksR0FBRyxJQUFJLGtCQUFrQixFQUFFLENBQUM7UUFJM0UsV0FBVyxDQUFDLGNBQWMsQ0FBQyxJQUFJLENBQUMsWUFBWSxDQUFDLGdCQUFnQixFQUFFLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxnQkFBZ0IsQ0FBQyxDQUFDO1FBQ3ZHLFdBQVcsQ0FBQyxjQUFjLENBQUMsVUFBVSxDQUFDLGdCQUFnQixFQUFFLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxnQkFBZ0IsQ0FBQyxDQUFDO0lBU2xHLENBQUM7O2dIQTdDVSxtQkFBbUIsa0JBS3BCLGNBQWM7b0hBTGIsbUJBQW1CLGNBRmxCLE1BQU07MkZBRVAsbUJBQW1CO2tCQUgvQixVQUFVO21CQUFDO29CQUNWLFVBQVUsRUFBRSxNQUFNO2lCQUNuQjs7MEJBTUksTUFBTTsyQkFBQyxjQUFjIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0LCBJbmplY3RhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBBcHBlYXJhbmNlQW5pbWF0aW9uLCBEaWFsb2dMYXlvdXREaXNwbGF5LCBEaXNhcHBlYXJhbmNlQW5pbWF0aW9uIH0gZnJvbSAnLi4vLi4vLi4vY29yZS9lbnVtcyc7XG5pbXBvcnQgeyBEYXRhQ29udHJvbCB9IGZyb20gJy4uLy4uLy4uL2NvcmUvZ2xvYmFsLWNsYXNzZXMnO1xuaW1wb3J0IHsgRGVmYXVsdExvYWRlckNvbXBvbmVudCB9IGZyb20gJy4uLy4uLy4uL2RlZmF1bHQtbG9hZGVyL2RlZmF1bHQtbG9hZGVyLmNvbXBvbmVudCc7XG5pbXBvcnQgeyBEaWFsb2dDdXN0b21TdHlsZXMsIERpYWxvZ1NldHRpbmdzIH0gZnJvbSAnLi9jbGFzc2VzJztcbmltcG9ydCB7IElEaWFsb2dVc2VyQ29uZmlnIH0gZnJvbSAnLi9pbnRlcmZhY2VzJztcblxuQEluamVjdGFibGUoe1xuICBwcm92aWRlZEluOiAncm9vdCdcbn0pXG5leHBvcnQgY2xhc3MgRGlhbG9nQ29uZmlnU2VydmljZSB7XG4gIGF1dGhvckNvbmZpZzogSURpYWxvZ1VzZXJDb25maWcgPSBuZXcgRGlhbG9nU2V0dGluZ3MoKTtcbiAgcHJvZHVjdGlvbkNvbmZpZzogSURpYWxvZ1VzZXJDb25maWcgPSBuZXcgRGlhbG9nU2V0dGluZ3MoKTtcblxuICBjb25zdHJ1Y3RvcihcbiAgICBASW5qZWN0KCdkaWFsb2dDb25maWcnKVxuICAgIHByaXZhdGUgdXNlckNvbmZpZzogSURpYWxvZ1VzZXJDb25maWcgPSB7fVxuICApIHtcbiAgICAvLyByZWdpb24gKioqIGRpYWxvZyB1c2VyQ29uZmlnICh1c2VyIGlucHV0IGFwcC1tb2R1bGUpICoqKlxuICAgIGNvbnN0IHVzZXJDb25maWdCYXNlID0gbmV3IERpYWxvZ1NldHRpbmdzKCk7XG4gICAgY29uc3QgZGF0YUNvbnRyb2wgPSBuZXcgRGF0YUNvbnRyb2woKTtcbiAgICBkYXRhQ29udHJvbC5jb3B5VmFsdWVzRnJvbSh1c2VyQ29uZmlnLmRpYWxvZ0NvcmVDb25maWcsIHVzZXJDb25maWdCYXNlLmRpYWxvZ0NvcmVDb25maWcpOyAvLyB0aGlzIHdpbGwgbWFrZSBzdXJlIHRoYXQgb2JqZWN0IGhhcyByaWdodCBwcm9wZXJ0aWVzXG4gICAgdXNlckNvbmZpZy5kaWFsb2dDb3JlQ29uZmlnID0gdXNlckNvbmZpZ0Jhc2UuZGlhbG9nQ29yZUNvbmZpZztcblxuICAgIGlmICh1c2VyQ29uZmlnLmRpYWxvZ0NvcmVDb25maWcubG9hZGVyQ29tcG9uZW50ICE9PSBudWxsKSB7XG4gICAgICB1c2VyQ29uZmlnLmRpYWxvZ0NvcmVDb25maWcuZGlzcGxheUxvYWRlciA9IHVzZXJDb25maWcuZGlhbG9nQ29yZUNvbmZpZy5kaXNwbGF5TG9hZGVyID09PSBudWxsO1xuICAgIH1cbiAgICAvLyBlbmRyZWdpb25cblxuICAgIC8vIHJlZ2lvbiAqKiogYXV0aG9yIGRlZmF1bHQgY29uZmlnIHZhbHVlcyAoaWYgdGhlcmUgaXMgbm8gdXNlciBpbnB1dCkgKioqXG4gICAgdGhpcy5hdXRob3JDb25maWcuZGlhbG9nQ29yZUNvbmZpZy53aWR0aCA9ICdhdXRvJztcbiAgICB0aGlzLmF1dGhvckNvbmZpZy5kaWFsb2dDb3JlQ29uZmlnLmhlaWdodCA9ICdhdXRvJztcbiAgICB0aGlzLmF1dGhvckNvbmZpZy5kaWFsb2dDb3JlQ29uZmlnLmhpZGVTY3JvbGxiYXIgPSBmYWxzZTtcbiAgICB0aGlzLmF1dGhvckNvbmZpZy5kaWFsb2dDb3JlQ29uZmlnLmVzY2FwZUtleUNsb3NlID0gZmFsc2U7XG4gICAgdGhpcy5hdXRob3JDb25maWcuZGlhbG9nQ29yZUNvbmZpZy5idXR0b25Qb3NpdGlvbiA9ICdyaWdodCc7XG4gICAgdGhpcy5hdXRob3JDb25maWcuZGlhbG9nQ29yZUNvbmZpZy5kaXNwbGF5TG9hZGVyID0gZmFsc2U7XG4gICAgdGhpcy5hdXRob3JDb25maWcuZGlhbG9nQ29yZUNvbmZpZy5mdWxsU2NyZWVuID0gZmFsc2U7XG4gICAgdGhpcy5hdXRob3JDb25maWcuZGlhbG9nQ29yZUNvbmZpZy5sYXlvdXRUeXBlID0gRGlhbG9nTGF5b3V0RGlzcGxheS5OT05FO1xuICAgIHRoaXMuYXV0aG9yQ29uZmlnLmRpYWxvZ0NvcmVDb25maWcubG9hZGVyQ29tcG9uZW50ID0gRGVmYXVsdExvYWRlckNvbXBvbmVudDtcbiAgICB0aGlzLmF1dGhvckNvbmZpZy5kaWFsb2dDb3JlQ29uZmlnLmFuaW1hdGlvbkluID0gQXBwZWFyYW5jZUFuaW1hdGlvbi5aT09NX0lOO1xuICAgIHRoaXMuYXV0aG9yQ29uZmlnLmRpYWxvZ0NvcmVDb25maWcuYW5pbWF0aW9uT3V0ID0gRGlzYXBwZWFyYW5jZUFuaW1hdGlvbi5aT09NX09VVDtcbiAgICB0aGlzLmF1dGhvckNvbmZpZy5kaWFsb2dDb3JlQ29uZmlnLmN1c3RvbVN0eWxlcyA9IG5ldyBEaWFsb2dDdXN0b21TdHlsZXMoKTtcblxuICAgIC8vIGVuZHJlZ2lvblxuXG4gICAgZGF0YUNvbnRyb2wuY29weVZhbHVlc0Zyb20odGhpcy5hdXRob3JDb25maWcuZGlhbG9nQ29yZUNvbmZpZywgdGhpcy5wcm9kdWN0aW9uQ29uZmlnLmRpYWxvZ0NvcmVDb25maWcpO1xuICAgIGRhdGFDb250cm9sLmNvcHlWYWx1ZXNGcm9tKHVzZXJDb25maWcuZGlhbG9nQ29yZUNvbmZpZywgdGhpcy5wcm9kdWN0aW9uQ29uZmlnLmRpYWxvZ0NvcmVDb25maWcpO1xuXG4gICAgLy8gYnV0dG9uc1xuICAgIC8qaWYodXNlckNvbmZpZy5idXR0b25zKXtcblx0XHRcdHRoaXMuY29uZmlnLmJ1dHRvbnMucHVzaChcblx0XHRcdFx0bmV3IEJ1dHRvbk1ha2VyKCdPaycsICdvaycsIEJ1dHRvbkxheW91dERpc3BsYXkuUFJJTUFSWSlcblx0XHRcdFx0LG5ldyBCdXR0b25NYWtlcignQ2FuY2VsJywgJ2NhbmNlbCcsIEJ1dHRvbkxheW91dERpc3BsYXkuU0VDT05EQVJZKVxuXHRcdFx0KTtcblx0XHR9Ki9cbiAgfVxufVxuIl19