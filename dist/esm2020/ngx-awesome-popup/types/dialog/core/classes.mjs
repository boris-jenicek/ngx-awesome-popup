import { Subject } from 'rxjs';
import { map, take } from 'rxjs/operators';
import { DataControl, Sizes } from '../../../core/global-classes';
import { ServiceLocator } from '../../../locator.service';
import { DialogConfigService } from './dialog-config.service';
import { DialogService } from './dialog.service';
export class DialogInitializer {
    constructor(component) {
        this.component = component;
        this.dialogCarrier = new DialogCarrier();
        this.dialogCarrier.setComponent(this.component);
    }
    openDialog$() {
        return this.dialogCarrier.openDialog$().pipe(map(resp => {
            const basicDialogResponse = new DialogResponse();
            const dataControl = new DataControl();
            dataControl.copyValuesFrom(resp, basicDialogResponse);
            return basicDialogResponse;
        }), take(1));
    }
    setButtons(_Buttons) {
        this.dialogCarrier.setButtons(_Buttons);
    }
    setCustomData(_CustomData) {
        this.dialogCarrier.setCustomData(_CustomData);
    }
    setConfig(_DialogConfig) {
        this.dialogCarrier.setConfig(_DialogConfig);
    }
}
export class DialogResponse extends DataControl {
    constructor() {
        super();
        this.payload = null;
        this.success = null;
        this.clickedButtonID = null;
    }
    setPayload(_Payload) {
        this.payload = _Payload;
    }
    setClickedButtonID(_ClickedButtonID) {
        this.clickedButtonID = _ClickedButtonID;
    }
}
export class DialogeventsController {
    constructor(entityUniqueID) {
        this.entityUniqueID = entityUniqueID;
        this._afterClosed = new Subject();
        this._afterLoader = new Subject();
        this._onButtonClick = new Subject();
        this._buttonList = new Subject();
        this.onButtonClick$ = this._onButtonClick.asObservable();
        this.afterClosed$ = this._afterClosed.asObservable();
        this.afterLoader$ = this._afterLoader.asObservable();
        this.buttonList$ = this._buttonList.asObservable();
    }
    close(_Payload = null) {
        this.defaultResponse.setPayload(_Payload);
        this._afterClosed.next(this.defaultResponse);
    }
    onButtonClick(_Button) {
        this.defaultResponse.setClickedButtonID(_Button.ID);
        this._onButtonClick.next(_Button);
    }
    setButtonList(_ButtonList) {
        this._buttonList.next(_ButtonList);
    }
    closeLoader() {
        setTimeout(() => {
            this._afterLoader.next(this.entityUniqueID);
        }, 0);
    }
    setDefaultResponse(_Response) {
        this.defaultResponse = _Response;
    }
}
export class DialogDefaultResponse extends DialogResponse {
    constructor() {
        super();
        this.DialogBelonging = null;
    }
    setBelonging(_DialogBelonging) {
        this.DialogBelonging = _DialogBelonging;
    }
}
export class DialogCarrier {
    constructor() {
        this.dialogBelonging = new DialogBelonging();
    }
    setComponent(_Component) {
        this.component = _Component;
    }
    setButtons(_Buttons) {
        if (_Buttons.length) {
            this.dialogBelonging.buttons = _Buttons;
        }
    }
    setCustomData(_CustomData) {
        this.dialogBelonging.customData = _CustomData;
    }
    setConfig(_DialogConfig) {
        const dataControl = new DataControl();
        dataControl.copyValuesFrom(_DialogConfig, this.dialogBelonging.dialogCoreConfig);
        if (_DialogConfig?.loaderComponent) {
            this.dialogBelonging.dialogCoreConfig.displayLoader = true;
        }
    }
    openDialog$() {
        const service = ServiceLocator.injector.get(DialogService);
        const dialogController = service.open(this.component, this.dialogBelonging);
        return dialogController.afterClosed$;
    }
}
export class DialogCustomStyles {
    constructor() {
        this.buttonSectionCSS = null;
        this.buttonCSS = null;
        this.wrapperCSS = null;
    }
}
export class dialogCoreConfig extends Sizes {
    constructor() {
        super(...arguments);
        this.escapeKeyClose = null;
        this.hideScrollbar = null;
        this.buttonPosition = null;
        this.layoutType = null;
        this.displayLoader = null;
        this.loaderComponent = null;
        this.animationIn = null;
        this.animationOut = null;
        this.customStyles = new DialogCustomStyles();
    }
}
export class DialogSettings {
    constructor() {
        this.buttons = [];
        this.dialogCoreConfig = new dialogCoreConfig();
    }
}
export class DialogBelonging extends DialogSettings {
    constructor() {
        super();
        this.entityUniqueID = 'D' + Math.random().toString(36).substr(2, 9);
        this.customData = null;
        this.eventsController = new DialogeventsController(this.entityUniqueID);
        const dialogConfigurator = ServiceLocator.injector.get(DialogConfigService);
        const baseSettings = new DialogSettings();
        const dataControl = new DataControl();
        dataControl.copyValuesFrom(dialogConfigurator.productionConfig.dialogCoreConfig, baseSettings.dialogCoreConfig);
        this.dialogCoreConfig = baseSettings.dialogCoreConfig;
        this.buttons = dialogConfigurator.productionConfig.buttons.slice();
    }
}
//# sourceMappingURL=data:application/json;base64,