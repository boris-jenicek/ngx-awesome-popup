import { Subject } from 'rxjs';
import { map, take } from 'rxjs/operators';
import { DataControl, dispatch } from '../../../core/global-classes';
import { ServiceLocator } from '../../../locator.service';
import { ConfirmBoxConfigService } from './confirm-box-config.service';
import { ConfirmBoxService } from './confirm-box-service';
export class ConfirmBoxInitializer {
    constructor() {
        this.confirmBoxCarrier = new ConfirmBoxCarrier();
    }
    openConfirmBox$() {
        return this.confirmBoxCarrier.openConfirmBox$().pipe(map(resp => {
            const basicConfirmBoxResponse = new ConfirmBoxResponse();
            const dataControl = new DataControl();
            dataControl.copyValuesFrom(resp, basicConfirmBoxResponse);
            return basicConfirmBoxResponse;
        }), take(1));
    }
    setButtons(_Buttons) {
        this.confirmBoxCarrier.setButtons(_Buttons);
    }
    setConfig(_ConfirmBoxCoreConfig) {
        this.confirmBoxCarrier.setConfig(_ConfirmBoxCoreConfig);
    }
    setDispatch(_Title, _Message = null) {
        this.confirmBoxCarrier.setTitle(_Title);
        this.confirmBoxCarrier.setMessage(_Message);
    }
    setTitle(_Title) {
        this.confirmBoxCarrier.setTitle(_Title);
    }
    setMessage(_Message) {
        this.confirmBoxCarrier.setMessage(_Message);
    }
    setButtonLabels(_Confirm, _Decline) {
        this.confirmBoxCarrier.setButtonLabels(_Confirm, _Decline);
    }
}
export class ConfirmBoxResponse extends DataControl {
    constructor() {
        super();
        this.success = null;
        this.clickedButtonID = null;
    }
    setSuccess(_IsSuccess) {
        this.success = _IsSuccess;
    }
    setClickedButtonID(_ClickedButtonID) {
        this.clickedButtonID = _ClickedButtonID;
    }
}
export class ConfirmBoxeventsController {
    constructor(entityUniqueID) {
        this.entityUniqueID = entityUniqueID;
        this._afterClosed = new Subject();
        this._onButtonClick = new Subject();
        this._buttonList = new Subject();
        this.afterClosed$ = this._afterClosed.asObservable();
        this.onButtonClick$ = this._onButtonClick.asObservable();
        this.buttonList$ = this._buttonList.asObservable();
    }
    close(_Response) {
        const response = _Response ? _Response : this.defaultResponse;
        this._afterClosed.next(response);
    }
    onButtonClick(_Button) {
        this.defaultResponse.setClickedButtonID(_Button.ID);
        this._onButtonClick.next(_Button);
    }
    setButtonList(_ButtonList) {
        this._buttonList.next(_ButtonList);
    }
    setDefaultResponse(_Response) {
        this.defaultResponse = _Response;
    }
}
export class ConfirmBoxDefaultResponse extends ConfirmBoxResponse {
    constructor() {
        super();
        this.confirmBoxBelonging = null;
    }
    setBelonging(_ConfirmBoxBelonging) {
        this.confirmBoxBelonging = _ConfirmBoxBelonging;
    }
}
export class ConfirmBoxCarrier {
    constructor() {
        this.confirmBoxBelonging = new ConfirmBoxBelonging();
    }
    setButtons(_Buttons) {
        if (_Buttons.length) {
            this.confirmBoxBelonging.buttons = _Buttons;
        }
    }
    setTitle(_Title) {
        this.confirmBoxBelonging.dispatch.title = _Title;
    }
    setMessage(_Message) {
        this.confirmBoxBelonging.dispatch.message = _Message;
    }
    setButtonLabels(_Confirm, _Decline) {
        this.confirmBoxBelonging.confirmBoxCoreConfig.confirmLabel = _Confirm;
        this.confirmBoxBelonging.confirmBoxCoreConfig.declineLabel = _Decline;
    }
    setConfig(_ConfirmBoxBelonging) {
        const dataControl = new DataControl();
        dataControl.copyValuesFrom(_ConfirmBoxBelonging, this.confirmBoxBelonging.confirmBoxCoreConfig);
    }
    openConfirmBox$() {
        const service = ServiceLocator.injector.get(ConfirmBoxService);
        const confirmBoxController = service.open(this.confirmBoxBelonging);
        return confirmBoxController.afterClosed$;
    }
}
export class ConfirmBoxSettings {
    constructor() {
        this.buttons = [];
        this.confirmBoxCoreConfig = new confirmBoxCoreConfig();
        this.dispatch = new dispatch();
    }
}
export class ConfirmBoxCustomStyles {
    constructor() {
        this.titleCSS = null;
        this.textCSS = null;
        this.buttonSectionCSS = null;
        this.buttonCSS = null;
        this.wrapperCSS = null;
    }
}
export class confirmBoxCoreConfig {
    constructor() {
        this.width = null;
        this.height = null;
        this.buttonPosition = null;
        this.layoutType = null;
        this.dispatch = null;
        this.confirmLabel = null;
        this.declineLabel = null;
        this.disableIcon = null;
        this.allowHtmlMessage = null;
        this.animationIn = null;
        this.animationOut = null;
        this.customStyles = new ConfirmBoxCustomStyles();
        this.iconStyleClass = null;
    }
}
export class ConfirmBoxBelonging extends ConfirmBoxSettings {
    constructor() {
        super();
        this.entityUniqueID = 'C' + Math.random().toString(36).substr(2, 9);
        this.eventsController = new ConfirmBoxeventsController(this.entityUniqueID);
        const ConfirmBoxCoreConfigurator = ServiceLocator.injector.get(ConfirmBoxConfigService);
        const baseSettings = new ConfirmBoxSettings();
        const dataControl = new DataControl();
        dataControl.copyValuesFrom(ConfirmBoxCoreConfigurator.productionConfig.confirmBoxCoreConfig, baseSettings.confirmBoxCoreConfig);
        this.confirmBoxCoreConfig = baseSettings.confirmBoxCoreConfig;
        this.buttons = ConfirmBoxCoreConfigurator.productionConfig.buttons.slice();
    }
}
//# sourceMappingURL=data:application/json;base64,