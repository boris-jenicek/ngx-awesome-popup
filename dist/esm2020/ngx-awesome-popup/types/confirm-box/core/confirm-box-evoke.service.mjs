var _ConfirmBoxEvokeService_instances, _ConfirmBoxEvokeService_extender;
import { __classPrivateFieldGet } from "tslib";
import { Injectable } from '@angular/core';
import { DialogLayoutDisplay } from '../../../core/enums';
import { ConfirmBoxInitializer } from './classes';
import * as i0 from "@angular/core";
export class ConfirmBoxEvokeService {
    constructor() {
        _ConfirmBoxEvokeService_instances.add(this);
    }
    success(title, message, confirmLabel, declineLabel) {
        const confirmBox = __classPrivateFieldGet(this, _ConfirmBoxEvokeService_instances, "m", _ConfirmBoxEvokeService_extender).call(this, title, message, confirmLabel, declineLabel);
        confirmBox.setConfig({
            layoutType: DialogLayoutDisplay.SUCCESS
        });
        return confirmBox.openConfirmBox$();
    }
    info(title, message, confirmLabel, declineLabel) {
        const confirmBox = __classPrivateFieldGet(this, _ConfirmBoxEvokeService_instances, "m", _ConfirmBoxEvokeService_extender).call(this, title, message, confirmLabel, declineLabel);
        confirmBox.setConfig({
            layoutType: DialogLayoutDisplay.INFO
        });
        return confirmBox.openConfirmBox$();
    }
    warning(title, message, confirmLabel, declineLabel) {
        const confirmBox = __classPrivateFieldGet(this, _ConfirmBoxEvokeService_instances, "m", _ConfirmBoxEvokeService_extender).call(this, title, message, confirmLabel, declineLabel);
        confirmBox.setConfig({
            layoutType: DialogLayoutDisplay.WARNING
        });
        return confirmBox.openConfirmBox$();
    }
    danger(title, message, confirmLabel, declineLabel) {
        const confirmBox = __classPrivateFieldGet(this, _ConfirmBoxEvokeService_instances, "m", _ConfirmBoxEvokeService_extender).call(this, title, message, confirmLabel, declineLabel);
        confirmBox.setConfig({
            layoutType: DialogLayoutDisplay.DANGER
        });
        return confirmBox.openConfirmBox$();
    }
    customOne(title, message, confirmLabel, declineLabel) {
        const confirmBox = __classPrivateFieldGet(this, _ConfirmBoxEvokeService_instances, "m", _ConfirmBoxEvokeService_extender).call(this, title, message, confirmLabel, declineLabel);
        confirmBox.setConfig({
            layoutType: DialogLayoutDisplay.CUSTOM_ONE
        });
        return confirmBox.openConfirmBox$();
    }
    customTwo(title, message, confirmLabel, declineLabel) {
        const confirmBox = __classPrivateFieldGet(this, _ConfirmBoxEvokeService_instances, "m", _ConfirmBoxEvokeService_extender).call(this, title, message, confirmLabel, declineLabel);
        confirmBox.setConfig({
            layoutType: DialogLayoutDisplay.CUSTOM_TWO
        });
        return confirmBox.openConfirmBox$();
    }
    customThree(title, message, confirmLabel, declineLabel) {
        const confirmBox = __classPrivateFieldGet(this, _ConfirmBoxEvokeService_instances, "m", _ConfirmBoxEvokeService_extender).call(this, title, message, confirmLabel, declineLabel);
        confirmBox.setConfig({
            layoutType: DialogLayoutDisplay.CUSTOM_THREE
        });
        return confirmBox.openConfirmBox$();
    }
    customFour(title, message, confirmLabel, declineLabel) {
        const confirmBox = __classPrivateFieldGet(this, _ConfirmBoxEvokeService_instances, "m", _ConfirmBoxEvokeService_extender).call(this, title, message, confirmLabel, declineLabel);
        confirmBox.setConfig({
            layoutType: DialogLayoutDisplay.CUSTOM_FOUR
        });
        return confirmBox.openConfirmBox$();
    }
    customFive(title, message, confirmLabel, declineLabel) {
        const confirmBox = __classPrivateFieldGet(this, _ConfirmBoxEvokeService_instances, "m", _ConfirmBoxEvokeService_extender).call(this, title, message, confirmLabel, declineLabel);
        confirmBox.setConfig({
            layoutType: DialogLayoutDisplay.CUSTOM_FIVE
        });
        return confirmBox.openConfirmBox$();
    }
}
_ConfirmBoxEvokeService_instances = new WeakSet(), _ConfirmBoxEvokeService_extender = function _ConfirmBoxEvokeService_extender(title, message, confirmLabel, declineLabel) {
    const confirmBox = new ConfirmBoxInitializer();
    confirmBox.setTitle(title);
    confirmBox.setMessage(message);
    confirmBox.setButtonLabels(confirmLabel, declineLabel);
    return confirmBox;
};
ConfirmBoxEvokeService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.1.2", ngImport: i0, type: ConfirmBoxEvokeService, deps: [], target: i0.ɵɵFactoryTarget.Injectable });
ConfirmBoxEvokeService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "13.1.2", ngImport: i0, type: ConfirmBoxEvokeService, providedIn: 'root' });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.1.2", ngImport: i0, type: ConfirmBoxEvokeService, decorators: [{
            type: Injectable,
            args: [{
                    providedIn: 'root'
                }]
        }] });
//# sourceMappingURL=data:application/json;base64,